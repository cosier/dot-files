<?php

namespace VZA\BidOnTaskBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller as TheController;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;

class TransactionController extends TheController
{


    public function updateTxIdAction(Request $req, $tx_id)
    {
        $tx = $this->container->get('doctrine')
            ->getRepository('BidOnTaskBundle:Transaction')
            ->find($tx_id);

        $data = $req->request->get('paypal_tx_id');
        $tx->setPaypalTxId($data);

        $mgr = $this->container->get('doctrine')->getManager();
        $mgr->persist($tx);
        $mgr->flush();

        return new RedirectResponse($req->headers->get('referer'));
    }

	public function viewAction(Request $req, $user_type, $tx_id)
	{
		$base_url = "/secure/{$user_type}/transactions";
		$sub_action = 'view';

		$tx = $this->container->get('doctrine')
			->getRepository('BidOnTaskBundle:Transaction')
			->find($tx_id);

        return $this->container->get('templating')->renderResponse(
                    'BidOnTaskBundle:Transactions:transactions_view.html.twig',
                    [
                        'user_type'  => $user_type,
                        'sub_action' => $sub_action,
                        'base_url'   => $base_url,
                        'tx' => $tx
                    ]);
	}

	public function cancelAction(Request $req, $tx_id)
	{
		$tx = $this->container->get('doctrine')
			->getRepository('BidOnTaskBundle:Transaction')
			->find($tx_id);

		$this->container->get('vza.payment')->cancelTransaction($tx);
		$this->container->get('session')->getFlashBag()->add('notice', 'Transaction Cancelled');
		$url = $req->headers->get('referer');
		if(!$url) $url = '/money';
		return new RedirectResponse($url);
	}


    public function restoreAction(Request $req, $tx_id)
    {
        $tx = $this->container->get('doctrine')
            ->getRepository('BidOnTaskBundle:Transaction')
            ->find($tx_id);

        $this->container->get('vza.payment')->restoreTransaction($tx);
        $this->container->get('session')->getFlashBag()->add('notice', 'Transaction Restored');

        return new RedirectResponse($req->headers->get('referer'));
    }

	public function completeAction(Request $req, $tx_id)
	{
		$tx = $this->container->get('doctrine')
			->getRepository('BidOnTaskBundle:Transaction')
			->find($tx_id);

		$this->container->get('vza.payment')->completeTransaction($tx);
		$this->container->get('session')->getFlashBag()->add('notice', 'Transaction Completed');

		return new RedirectResponse($req->headers->get('referer'));
	}

    /**
     * View Financials
     * @param  [type] $user_type  [description]
     * @param  string $sub_action [description]
     * @return [type] [description]
     */
    public function indexAction($user_type, $sub_action='all')
    {
        $base_url = "/secure/{$user_type}/transactions";

        $em = $this->container->get('doctrine')->getManager();

        /**
         * Handle Generic User Index
         */
        $dql   = "SELECT t FROM BidOnTaskBundle:Transaction t
        	WHERE t.pending   = true
        	AND   t.cancelled = false
        	OR    t.complete  = true
        	ORDER BY t.created DESC";

        $query = $em->createQuery($dql);

        // die($dql);
        $paginator  = $this->get('knp_paginator');
        // dump($query);

        $pagination = $paginator->paginate(
            $query,
            $this->get('request')->query->get('page', 1)/*page number*/,
            10 /*limit per page*/
        );

        return $this->container->get('templating')->renderResponse(
                    'BidOnTaskBundle:Transactions:transactions_all.html.twig',
                    [
                        'user_type'  => $user_type,
                        'sub_action' => $sub_action,
                        'base_url'   => $base_url,
                        'pagination' => $pagination
                    ]);
    }

    /**
     * View Financials
     * @param  [type] $user_type  [description]
     * @param  string $sub_action [description]
     * @return [type] [description]
     */
    public function withdrawalCompleteAction($user_type, $sub_action='withdrawals-complete')
    {
        $base_url = "/secure/{$user_type}/transactions";

        $em = $this->container->get('doctrine')->getManager();

        /**
         * Handle Generic User Index
         */
        $dql   = "SELECT t FROM BidOnTaskBundle:Transaction t
            WHERE    t.pending   = true
            AND      t.tx_type   = 1
            AND      t.cancelled = false
            AND      t.complete  = true
            ORDER BY t.created DESC";

        $query = $em->createQuery($dql);

        // die($dql);
        $paginator  = $this->get('knp_paginator');
        // dump($query);

        $pagination = $paginator->paginate(
            $query,
            $this->get('request')->query->get('page', 1)/*page number*/,
            10 /*limit per page*/
        );
        return $this->container->get('templating')->renderResponse(
                    'BidOnTaskBundle:Transactions:transactions_withdrawals.html.twig',
                    [
                        'user_type'  => $user_type,
                        'sub_action' => $sub_action,
                        'base_url'   => $base_url,
                        'pagination' => $pagination
                    ]);
    }

    public function withdrawalPendingAction($user_type, $sub_action='withdrawals-pending')
    {
        $base_url = "/secure/{$user_type}/transactions";

        $em = $this->container->get('doctrine')->getManager();

        /**
         * Handle Generic User Index
         */
        $dql   = "SELECT t FROM BidOnTaskBundle:Transaction t
            WHERE    t.pending = true
            AND      t.tx_type = 1
            AND      t.cancelled = false
            ORDER BY t.created DESC";

        $query = $em->createQuery($dql);

        // die($dql);
        $paginator  = $this->get('knp_paginator');
        // dump($query);

        $pagination = $paginator->paginate(
            $query,
            $this->get('request')->query->get('page', 1)/*page number*/,
            10 /*limit per page*/
        );
        return $this->container->get('templating')->renderResponse(
                    'BidOnTaskBundle:Transactions:transactions_withdrawals.html.twig',
                    [
                        'user_type'  => $user_type,
                        'sub_action' => $sub_action,
                        'base_url'   => $base_url,
                        'pagination' => $pagination
                    ]);
    }

    /**
     * View Financials
     * @param  [type] $user_type  [description]
     * @param  string $sub_action [description]
     * @return [type] [description]
     */
    public function cancelledAction($user_type, $sub_action='cancelled')
    {
        $base_url = "/secure/{$user_type}/transactions";

        $em = $this->container->get('doctrine')->getManager();

        /**
         * Handle Generic User Index
         */
        $dql   = "SELECT t FROM BidOnTaskBundle:Transaction t
        	WHERE  t.cancelled = true ORDER BY t.created DESC";
        $query = $em->createQuery($dql);

        // die($dql);
        $paginator  = $this->get('knp_paginator');
        // dump($query);

        $pagination = $paginator->paginate(
            $query,
            $this->get('request')->query->get('page', 1)/*page number*/,
            10 /*limit per page*/
        );
        return $this->container->get('templating')->renderResponse(
                    'BidOnTaskBundle:Transactions:transactions_cancelled.html.twig',
                    [
                        'user_type'  => $user_type,
                        'sub_action' => $sub_action,
                        'base_url'   => $base_url,
                        'pagination' => $pagination
                    ]);
    }


}