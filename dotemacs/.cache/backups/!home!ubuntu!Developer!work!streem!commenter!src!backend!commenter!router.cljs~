(ns commenter.router
  (:require [commenter.article :as article]
            [commenter.database :as db]
            [commenter.logic :as logic]))

(defn parse-url
  "Parses a regular request url into sub parameter objects"
  [url]
  (.parse (js/require "url") url))

(defn path-name
  "Extracts the pathname from the request parameters
   While also normalising the dev/production routing prefix (commenter/ is on Production)"
  [params]
  (let [path (aget params "pathname")
        path-cleaned (.replace (.replace path (js/RegExp. "/commenter/" "g") "") "/" "")]
    path-cleaned))


(defn set-headers [res type]
  (.writeHead res 200 (js-obj
                       "Content-Type" type
                       "Cache-Control" "public"
                       "max-age" "0")))

(defn route-not-found [path res]
  (.end res (+ "No route found matching:" path)))

;; Handle Data test route
(defn route-latest [res]
  (println "Handling Data Route")
  (set-headers res "text/html")
  (let [payload (logic/data-latest-articles-marked res)]
    (println "route-live end")))

;; Handle Live Data Routing
(defn route-live [res]
  (println "Handling Live Route")
  (set-headers res "application/json")
  (.end res "Live Route"))

(defn route-stats [res]
  (set-headers res "application/json")
  (logic/data-statistics res))


;; Handle Index Routing
(defn route-index [res]
  (println "Handling Index Route")
  (.end res "Index Route"))


(defn engage
  "Routing Entry Point.
   Handle end to end routing all of all incoming HTTP requests"
  [req res]
  (enable-console-print!)
  (.log js/console (str "Incoming Request"))
  (let [url (aget req "url")
        params (parse-url url)
        path (path-name params)]
    (case path
      "/"         (route-index  res)
      "/latest"   (route-latest res)
      "//latest"  (route-latest res)
      "/live"     (route-live   res)
      "/stats"    (route-stats  res)
      "//stats"   (route-stats  res)
      "/test"     (route-test   res req)
      "//test"    (route-test   res req)
      (route-not-found path   res))))



;; REPL Logic
(comment
  (article/comment-count 10)
  (.replace "/commenter/live" (js/RegExp. "commenter/" "g") ""))

