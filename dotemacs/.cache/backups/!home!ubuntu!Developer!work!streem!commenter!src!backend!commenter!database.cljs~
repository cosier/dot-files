(ns commenter.database
  (:require [cljs.nodejs :as node]
            [commenter.logger :as logger]
            [commenter.utils :as utils]))

;; Console shim
(enable-console-print!)

(defn get-config [key]
  (case key
  :host "localhost"
  :user "root"
  :password ""
  :database "streem_news_aggregator"
  "error"))

(def db-config (js-obj
                "host"     (get-config :host)
                "user"     (get-config :user)
                "password" (get-config :password)
                "database" (get-config :database)))


(println "Are we on production? " (utils/is-production?))

(def connection-pool (let [mysql (js/require "mysql")
                           connection-pool (.createPool mysql db-config)]
                       connection-pool))

(defn query-callback-handler [callback]
  (fn [results]
    (println "query-callback-handle results received")
    (callback (results))))

(defn query [query-string results-callback]
  "Executes a query against the active connection pool"
  (let [q query-string
        callback (if results-callback results-callback (fn [] nil))]
  (.query connection-pool
          (str q) callback)))



(defn mark-comment-closed [url]
  (println "database >> marking-comment-as-open")  
  (let [query-string
        (str
         "UPDATE articles SET comment_status=1 "
         "WHERE url='" url "';")]
    (query query-string)))


(defn mark-comment-open [url]
  (println "database >> marking-comment-as-open")
  (let [query-string
        (str
         "UPDATE articles SET comment_status=2 "
         "WHERE url='" url "';")]
    (query query-string)))


(defn update-article-comment-count [url count]
  (println "database >> update-article-comment-count \n{" url "}")
  (let [query-string
        (str
         "UPDATE articles SET comments_qty_found='" count "' "
         "WHERE url='" url  "';")]
    (query query-string)))

(defn insert-comment-content-for-article [url comments-content-list]
  true)

(defn latest-articles [callback]
  (println "database >> latest-articles processing")
  (let [query-handler (fn [err rows fields]
                        (callback rows))
        result-limit (if (utils/is-production?) 3000 60)
        period-limit (if (utils/is-production?) 1 24)
        special-query (str
                       "SELECT providers.comments_count_enable, articles.url, articles.time, articles.comments_status "
                       "FROM articles INNER JOIN providers "
                       "ON articles.providers_id = providers.providers_id "
                       "WHERE time >= SYSDATE() - INTERVAL " period-limit " DAY and "
                       "providers.comments_count_enable = 1 and "
                       "articles.comments_status NOT IN ('1') "
                       "ORDER BY articles.time DESC LIMIT " result-limit)]
    (println "database >> Fetching latest articles: " special-query "\n")
    (query special-query query-handler)))


(defn latest-articles-with-comments []
  [])
