--- Log opened Tue Feb 18 19:48:54 2014
19:48 -!- Irssi: #clojure: Total of 773 nicks [1 ops, 0 halfops, 0 voices, 772 normal]
19:48 -!- Irssi: Join to #clojure was synced in 6 secs
19:53 <    mdrogalis > Morning.
20:01 <CookedGryphon > Hey, does anybody have any ideas about how to profile core.async code in a sensible sort of a way
20:01 <CookedGryphon > without just firing up visualvm - i find the output pretty incomprehensible
20:02 <CookedGryphon > I sort of want to look at it from a go-block level, see what is doing a lot (i.e. I have written badly and is spinning in a loop) vs sitting there locked, etc
20:02 <CookedGryphon > can I get at the underlying state machine and track that sort of thing?
20:14 <Anderkent]lun > CookedGryphon: hm, you could try timbre, but I think you'd have to manually expand the profiling macros (because async won't let you do (profile (<! chan foo))
20:15 <CookedGryphon > Anderkent]lunch: wouldn't that be weird, because it would be split across invocations of the state machine.......
20:15 <CookedGryphon > or something
20:15 <CookedGryphon > also, I don't really want to go through allll my code inserting (profile ...), because then I would want to remove it
20:15 <CookedGryphon > and i'd like to leave this as an option to turn on and look at at any time
20:16 <    Anderkent > with timbre you don't have to remove it, you just change your logging level and it goes away :
20:16 <    Anderkent > I think the state machine would be transparent to timbre
20:16 <    Anderkent > i.e. it'd track time spent while parked as time of execution
20:17 <    Anderkent > hard to say if that's what you want or not
20:17 <CookedGryphon > Anderkent: yeah, that's really not what I want
20:17 <CookedGryphon > doing that, the most efficient functions which just sit there parked would show up as taking most time!
20:17 <    Anderkent > sure, so just look for functions with most invocations rather than most time spent
20:18 <    Anderkent > or don't wrap parking ops in profile
20:19 <CookedGryphon > hmm
20:20 <    Anderkent > I guess I'm not sure what you're trying to find out; intuitively the costly functions (i.e. ones worth profiling) shouldnt live in go blocks, just be called from one. Is that intuition wrong?
20:20 <CookedGryphon > yes that's correct - if I have coded it right :P
20:20 <    Anderkent > I haven't used core.async much, but always thought of it more as a communication mechanism than a processing engine
20:20 <    Anderkent > ah :P
20:20 <CookedGryphon > the situation that's made me think of this
20:21 <CookedGryphon > is I currently have a system which is getting hot while it should be idling
20:21 <    Anderkent > hm. Log more? :P
20:21 <CookedGryphon > making me think that in one of my go-loops I'm accidentally recurring without doing any work
20:21 <CookedGryphon > so it just spins
20:21 <CookedGryphon > which would be easy to see if I could keep track of what's recurring when
20:22 <CookedGryphon > I might just write a variation on go-loop which does just this
20:22 <    Anderkent > right, I see your point. You could swap your go blocks for thread blocks and then use a jvm profiler to see where the threads are spinning
20:22 <CookedGryphon > tracks the number of invocations and sends it off to riemann or something
20:22 <CookedGryphon > I'm actually on android, and the profiling isn't great
20:22 <    Anderkent > I guess I don't know how big your app is; my intuition is just go read your code :P
20:22 <    Anderkent > but if thats not feasible, sorry; can't help you
20:23 <CookedGryphon > I think I'm going to tweak a go block
20:41 <  szymanowski > is there a way to have wildcard in multimethod dispatch values?
20:41 <  szymanowski > does core.match can help on this?
20:42 <    Anderkent > szymanowski: as in just a catch-all method? use :default as the value
20:42 <  szymanowski > yes i know that but it would be great to have wildcards
20:44 <    Anderkent > hm, can you provide an example? I guess I've never bothered with complicated hierarchy multimethod (always exact match, either on keyword or class)
20:45 <    mdrogalis > szymanowski: Arbitrary wild cards in multimethods: no
20:45 <  szymanowski > ok is there any implementations of sush a feature somewhere?
20:46 <  szymanowski > such
20:46 <    mdrogalis > szymanowski: Not that I'm aware of. But there might be.
20:47 <    Anderkent > I don't think so; seems a very weird thing to do to me
20:47 <  szymanowski > why?
20:47 <   clojurebot > szymanowski: because you can't handle the truth!
20:47 <    Anderkent > it just doesnt fit the way I think of multimethods, I suppose.
20:48 <  szymanowski > you're maybe right i will think more about it
21:19 <       quizdr > is it necessary to compile a source file before you require it another source file? the require call itself will not compile it for you?
21:19 <       quizdr > it appears to be the case.
21:20 < stuartsierra > quizdr: `require` will compile & load the source file for you. `compile` is only necessary for Ahead-of-Time (AOT) compilation, which saves compiled .class files on disk.
21:21 <     sritchie > seangrove: hey; I'm working through it now, I can show you the not-quite-working-yet code
21:21 <     sritchie > seangrove: https://github.com/paddleguru/om-timer
21:22 <       quizdr > stuartsierra i get symbol not found errors relating to functions in a required namespace. when i go into that required namespace's source file and do a control-c control-k to compile that file, then go back to my original file, the issue is resolved.
21:23 <    Anderkent > quizdr: was that file required before and then edited? `require` will not reload a file from disk if it's already been loaded
21:23 < stuartsierra > quizdr: clean out your compiled files (lein clean) and start a new repl
21:24 <       quizdr > stuartsierra anderkent would it make a difference that this other file I am requiring has been "lein install"ed previously and is not in my current project? would that require that I compile it separately?
21:25 <     sritchie > quizdr: that can happen from AOT compilation
21:26 <       quizdr > sritchie so when i restart a repl i will probably need to recompile any sources that are not in my project but i am requiring, yes? I assume AOT is in play here since perhaps that is what lein install does?
21:27 <     sritchie > quizdr: I've only seen that problem show up when AOT compilation's at play, yes
21:27 <     sritchie > and only then when you have some dependency mismatch
21:27 <     sritchie > (ie, you have a diamond dep, where you're requiring some version of a library, and the code you're requiring is compiled against a different version)
21:28 <     sritchie > if you fix the mismatch in your project or remove the AOT compilation you won't have to recompile
21:30 <CookedGryphon > aphyr: Hey, I'm trying to use your riemann-clojure-client and I'm getting an issue when I AOT compile because IDref is defined twice - once in clojure and once in the riemann-java-client
21:31 <CookedGryphon > is that okay on the jvm? (I'm using android + dexer which complains and falls over)
21:33 <    Anderkent > is that IDref with the same qualified name? Then I would expect it to break in every jvm
21:33 <    Anderkent > (if they're loaded in the same classloader)
21:33 <CookedGryphon > Anderkent: yeah it appears to be exactly the same name
21:34 <    Anderkent > except riemann-clojure-client seems to depend on riemann-java-client and not define its own IDref
21:34 <    Anderkent > so I think you're having a classpath issue or something
21:37 <CookedGryphon > IDref is a clojure class - clojure.lang.IDRef
21:37 <CookedGryphon > which riemann-java-client seems to have pulled in
21:38 <    Anderkent > hm, can you post exactly what error you're getting?
21:38 <CookedGryphon > UNEXPECTED TOP-LEVEL EXCEPTION:
21:38 <CookedGryphon > java.lang.IllegalArgumentException: already added: Lclojure/lang/IDeref;
21:38 <    Anderkent > on refheap pastebin or whatever
21:38 <CookedGryphon > there's a stacktrace, but it's just internal dexer stack
21:39 <    Anderkent > do you know what your exact classpath is?
21:39 <    Anderkent > do you for example have multiple versions of clojure on your cp?
21:40 <CookedGryphon > I already said, this is defined in riemann-java-client (a dependency of riemann-clojure-client) as well as in clojure itself
21:40 <CookedGryphon > so I want to know if this works for anyone
21:40 <    Anderkent > ah, right I see it now
21:41 <    Anderkent > that's a very weird thing to do
21:43 <    Anderkent > it does load for me on the jvm, the secondary implementation is probably never picked up
21:44 <    Anderkent > i.e. when the jvm is looking for a clojure.java.lang.IDeref.class file on the classpath, it finds it in the clojure jar and stops looking
21:49 <      dnolen_ > sritchie: btw, it's not possible to reproduce your issues, even with lein cljsbuild auto, timer button always works for me.
21:49 <     sritchie > dnolen_: yeah, saw that note - I get it every time, even after nuking .repl, out, target, lein cljsbuild clean -
21:49 <      dnolen_ > sritchie: I'm inclined to close your ticket. One thought is that weird stuff happens if you have multiple lein cljsbuilds running at the same time - easy for this to happen.
21:50 <      dnolen_ > sritchie: whatever it is, I'm very skeptical it's Om related.
21:50 <      dnolen_ > sritchie: but hard to tell you have a complex setup and not a minimal case.
21:50 <     sritchie > dnolen_: yeah, trying to reduce it now. Thanks a lot for taking a look, and feel free to close - I'm working on pushing the example to heroku,
21:50 <     sritchie > and cleaning out my .lein/profiles.clj
21:51 <     sritchie > to make sure no extra code is getting in the mix. still shows up every time for me
21:51 <      dnolen_ > sritchie: Chrome?
21:51 <     sritchie > yeah, and firefox
21:52 <      dnolen_ > sritchie: yep if I edit, wait for recompile and refresh Chrome & FF, I can always start stop the timer
21:52 <     sritchie > and no errors in the console?
21:52 <      dnolen_ > sritchie: no errors
21:53 <     sritchie > dnolen_: the timer was toggling, and I'd see the numbers change like they're supposed to,
21:53 <      dnolen_ > sritchie: I do a goog.string multiple require error when the app loads, but seems unrelated to whatever problem you are having.
21:53 <     sritchie > there's something goofed about my setup, whether it's the way I initialize cljsbuild auto and lein repl :headless in separate terminals,
21:53 <     sritchie > or the repl process...
21:53 <     sritchie > yeah, I see that too, but that showed up when things were working as well
21:54 <      dnolen_ > sritchie: k closing for now, feel free to open a ticket you have a more minimal case. More than happy to take a look when you do.
21:54 <     sritchie > dnolen_: you know, maybe it's the different clojurescript versions from austin.
21:55 <      dnolen_ > sritchie: I don't use Austin - so that might be it?
21:55 <      dnolen_ > sritchie: gotta say Austin really needs to support :none, your builds are criminally slow
21:55 <      dnolen_ > 11-13 seconds for me
21:55 <      dnolen_ > should be .03 seconds
21:55 <      dnolen_ > cemerick: ^
21:55 <     sritchie > yeah? that may just be my config goof.
21:56 <      dnolen_ > sritchie: Austin doesn't work with :none
21:56 <     sritchie > dnolen_: austin was in my lein config, so this may be a JVM classloading issue
21:56 <     sritchie > whichever cljs wins...
21:56 <      dnolen_ > sritchie: yeah, Om needs 2156
21:57 <     cemerick > dnolen_: where are builds 11s?
21:57 <     sritchie > but yeah, thanks a lot for looking. I'll be much more suspicious of config going forward and try to isolate that stuff before reporting. will let you know how the investigation proceeds
21:57 <      dnolen_ > cemerick: :whitespace + sourcemaps
21:57 <     sritchie > cemerick: yup
22:00 <      dnolen_ > sritchie: fwiw, seems like a lot of people are using Om now, when I introduce a bug I get reports pretty quickly :)
22:00 <    Anderkent > dnolen_: hey, om looks cool! I saw that before but I didn't hear of react so I just figured it was an interface to some facebook api after the first line of the readme and stopped reading. Not sure if that might have happened to someone else before and is thus worth fixing!
22:01 <    invasmani > Om is great, thanks for all of your hard work
22:01 <     sritchie > dnolen_: yeah, our current stuff is in "reactive" style, and most of the code is watches and state updates
22:01 <      dnolen_ > invasmani: no problem, thx
22:01 <     sritchie > dnolen_: this is a huge win
22:02 <      dnolen_ > Anderkent: I'll think about it, but I think React is making some waves so not long before most people know what it is :)
22:02 <     cemerick > dnolen_: Where does that compile time come from in the context of a browser-REPL interaction?
22:03 <      dnolen_ > cemerick: Austin requires at least :whitespace optimizations no?
22:03 <    Anderkent > dnolen_: I think just changing the first line to something like 'A clojurescript UI library built on top of Facebook's React' would mostly do it
22:04 <     cemerick > dnolen_: Rumor has it; but, surely it's not 11s per expression beign eval'd?
22:05 <     cemerick > I've used source maps ~twice, so I'm generally not aware of the impact they have on the compilation process.
22:06 <      dnolen_ > cemerick: it's significant, I think most people at this point use source maps all the time.
22:06 <      dnolen_ > including myself.
22:06 <     sritchie > oh, yeah, nice. with :none, 0.76 seconds per change.
22:06 <     cemerick > dnolen_: yeah ok; but, where does the 11s-13s come from?
22:06 <      dnolen_ > cemerick: :whitespace + source maps
22:07 <     cemerick > dnolen_: you mean in the context of cljsbuild auto?
22:07 <      dnolen_ > cemerick: yep
22:07 <     cemerick > ok; what does that have to do with austin?
22:07 <      dnolen_ > cemerick: do you think that people don't run REPL & auto at the same time?
22:07 <     cemerick > cljsbuild supports :none, source maps, etc
22:08 <     sritchie > cemerick: does austin support :none?
22:08 <     cemerick > dnolen_: it's never occurred to me, but they're in different processes, and have different configurations.
22:09 <      dnolen_ > cemerick: oh ok, so Austin doesn't require you to build your *own* source with :whitespace?
22:09 <     cemerick > dnolen_: goodness no
22:09 <  michaniskin > dnolen_: cemerick: i'm using cljsc but not via lein-cljsbuild, and i'm seeing ~3sec compile times for one changed cljs source file, when it used to be a few hundred msec at most. i'm carefully preserving last-modified times of source files, i think. where should i look for issues that could slow down the cljs build?
22:09 <      dnolen_ > cemerick: ok good to know - I was completely baffled by earlier conversation. Thanks for the clarification.
22:10 <     cemerick > dnolen_: That is, the austin server-side part has its own compilation env with its own compiler options; *those* need to be :whitespace/:simple, but that just doesn't matter in the REPL context.
22:10 <     cemerick > :cljsbuild configs can have :advanced, :none, whatever, and have no impact on austin's operation
22:10 <       quizdr > when I ctrl-c ctrl-k a source file, why would another source file in the same directory not be found on classpath if I require that file? the namespace name is indeed correct, but I get an error that the clj file could not be located.
22:10 <     cemerick > sritchie: not AFAIK, though it's been a long time since I've tried
22:10 <      dnolen_ > michaniskin: if you're not using lein cljsbuild than your need to preserve compiler environment between builds to get incremental compilation benefits
22:10 <      dnolen_ > cemerick: got it
22:11 <  michaniskin > dnolen_: by "compiler environment" you mean the temp files in :output-dir?
22:11 <     cemerick > michaniskin: no; see cljs.env
22:11 <      dnolen_ > michaniskin: no, the atom that holds analysis information needs to be bound.
22:11 <  michaniskin > cemerick: dnolen_: oh awesome thanks!
22:11 <      dnolen_ > michaniskin: (cljs.env/with-compiler-env compiler-atom (cljs.closure/build ...))
22:11 <     cemerick > michaniskin: :-)
22:12 <  michaniskin > you guys just saved me who knows how much time. thanks!
22:12 <     cemerick > michaniskin: tribal knowledge FTW ;-P
22:13 <     cemerick > dnolen_: BTW, I have a patch ready for 656, but I wonder if you have any input re: my prior comment?
22:13 <      dnolen_ > cemerick: yeah I saw that, will need to think about it for a little bit, will respond on the ticket.
22:13 <       quizdr > does your project.clj need to list as a dependency all the namespaces created in the same project's src/ directory?
22:14 <     cemerick > dnolen_: ok; I'll put a prospective patch on there anyway
22:15 <     cemerick > quizdr: no
22:15 <       quizdr > cemerick any idea what would cause a filenotfound exception when you require a namespace that is in the same src dir, just a different file?
22:16 <     cemerick > quizdr: typo, wrong filename extension, mismatch in filename and ns declaration
22:17 <       quizdr > cemeric thanks, obvious ideas that i've triple checked.
22:18 <       quizdr > cemerick could a hypen in a clj filename cause a problem?
22:18 <       quizdr > *hyphen
22:19 <    S11001001 > quizdr: yeah; hyphens code as underscores when filenamifying
22:19 <     cemerick > quizdr: hyphens in namespaces need to be underscores in filenames
22:19 <       quizdr > ah ha! thanks guys
22:27 <     sritchie > dnolen_: fwiw, here's a recreation of the bug on heroku
22:27 <     sritchie > http://omtimer.herokuapp.com/timer
22:28 <     sritchie > dnolen_: no one seems to be stomping the cljs version
22:28 <      dnolen_ > sritchie: your markup seems very problematic to me
22:28 <      dnolen_ > React & your code loaded twice
22:29 <     sritchie > oh, that's a pretty huge neon sign, and almost certainly the problem
22:30 <          lvh > Hi
22:30 <          lvh > if I have a function that's more or less analogous to map, except it's doing multiple funcs over one coll (in a slightly involved way; I can't just spell it as "comp"), is it bad form to have the funcs arg come after the coll arg?
22:33 <     sritchie > dnolen_: fixed, and the goog.string error's gone too
22:33 <    ambrosebs > lvh: in most sequence functions, the collection comes last. good for threading with ->>
22:33 <    ambrosebs > lvh: that said, the threading macros have improved, so this is less of an issue
22:34 <       quizdr > is it better or more idiomatic to wrap a map function in dorun or use doseq if i need side effects created from items in a collection?
22:34 <       quizdr > i use map so much, that i also use it for side effects and often wrap with dorun, but now i'm wondering if this is a bad habit.
22:35 <          lvh > ambrosebs: Cool. So, inthis function, I should swap the args? https://gist.github.com/lvh/7b018a90cdafd119dc41
22:36 <    ambrosebs > ,(doc dorun)
22:36 <   clojurebot > "([coll] [n coll]); When lazy sequences are produced via functions that have side effects, any effects other than those needed to produce the first element in the seq do not occur until the seq is consumed. dorun can be used to force any effects. Walks through the successive nexts of the seq, does not retain the head and returns nil."
22:36 <    ambrosebs > quizdr: do you mean doall?
22:36 <    Anderkent > on the other hand update-in etc. take the collection first
22:36 <    ambrosebs > quizdr: oh I see. I use doseq for side effects.
22:36 <       quizdr > ambrosebs no, dorun. the difference is that doall retains the head, which i wouldn't usually need.
22:37 <    Anderkent > quizdr: dorun is explicitly made for lazy seqs of side effects. It's okay to do that
22:37 <       quizdr > ok Anderkent i just find it easier to wrap a map in it than to pull out the doseq bindings. maybe like the sequence, i too am lazy?
22:42 <          lvh > Hi! How can I get a sorted list of [[(f x0) x0] ... ] given xs?
22:42 <          lvh > It's almost map, except not quite...
22:44 <          lvh > zipmap almost does what I want, I guess I can build a map and then seq it?
22:46 <     joegallo > ,(partition 2 [:a 1 :b 2 :c 3])
22:46 <   clojurebot > ((:a 1) (:b 2) (:c 3))
22:51 <      arohner > anyone remember that crazy ruby blog post where the guy monkeypatched everything to be in the same class? I'm trying to google for it and failing horribly
22:51 <    AeroNotix > arohner: I think that was titled: "How to be a moron"
22:52 <      arohner > well, my goal is to make fun of ruby :-)
22:52 <    AeroNotix > arohner: ruby doesn't need your help
22:56 <  szymanowski > what is the simplest way to create a function that always return true?
22:57 <      dnolen_ > szymanowski: (constantly true)
22:57 <  szymanowski > great thank you
22:59 <     cemerick > dnolen_: I have a JS library I'd like to use that uses some reserved words as property names, which gclosure complains about. Would like to provide a compiler option corresponding to the constants in CompilerOptions.LanguageMode. Reasonable?
23:00 <      dnolen_ > cemerick: pretty sure there's an existing ticket for this
23:00 <     cemerick > dnolen_: ok, I'll track it down and put something together
23:00 <      dnolen_ > cemerick: http://dev.clojure.org/jira/browse/CLJS-743
23:01 <     cemerick > oh, even better
23:03 <      oskarkv > If I want to deref a reference and then set it without anyone else setting it inbetween, should I use a ref in a transaction? Or is there a way with an atom?
23:03 <    AeroNotix > oskarkv: ref+dosync
23:03 <      oskarkv > ok thx
23:06 <      hhenkel > Hi all...quick question...I managed to get a lazy-seq and now I'm wondering how to iterate over it...
23:07 <      hhenkel > I guess the key is doall?
23:07 <      oskarkv > hhenkel there are many ways, using map, reduce, loop/recur do name a few
23:07 <      oskarkv > to*
23:08 <      oskarkv > hhenkel what do you want to do with it?
23:09 <      hhenkel > oskarkv: first let me descibe what is in the lazy-seq...I read json data from a file, merge those data into each other and get it as a lazy-seq.
23:09 <      hhenkel > oskarkv: This seq holds config data for servers from which I want to create recuring jobs via at-at
23:10 <      hhenkel > Therefore I think I have to iterate over all items.
23:11 <     borkdude > hhenkel there are many functions that iterate over sequences
23:11 <     borkdude > hhenkel map, filter, reduce, etc
23:11 <     borkdude > hhenkel it depends on what you want to do
23:11 <      oskarkv > like one job for each element? Then maybe (map create-job the-seq), and if there are side-effects then use doall/dorun
23:11 <      oskarkv > hhenkel ^
23:11 <     borkdude > hhenkel doall is only used to realize all elements in a lazy seq
23:13 <      hhenkel > oskarkv: I don't think that I got side-effects as I want to schedule my network request with at-at (running in threads as far as I know).
23:14 <      hhenkel > I guess I was looking for something much more complicated then a simple (map create-job my-lazy-seq).... ;)
23:16 <         `cbp > hhenkel: (doseq [config my-lazy-seq] (create-job config))
23:20 <      hhenkel > oskarkv: `cbp: If I try your suggestions it seems like no data is given to my function.
23:20 <      hhenkel > I'll paste it in a min
23:24 <      hhenkel > oskarkv:
23:24 <      hhenkel > `cbp: https://www.refheap.com/41527
23:25 <      oskarkv > hhenkel you have missed a (
23:26 <      oskarkv > before the function, look at `cbp's example
23:27 <      hhenkel > oskarkv: yes, you're right....and what about your map example?
23:28 <      oskarkv > hhenkel but with map it should have worked. but note that the result of map is also a lazy seq, nothing will happen with it right away
23:28 <      hhenkel > oskarkv: I tried it with the same pprint function...
23:29 <      oskarkv > how?
23:29 <   clojurebot > with style and grace
23:30 <      hhenkel > It also looks like something is still wrong with my data...is it possible that I managed to create a lazy-seq within a lazy-seq?
23:30 <      oskarkv > yes that certainly possible :P
23:30 <      hhenkel > oskarkv: It's also in tn the refheap.
23:31 <      oskarkv > hhenkel I don't see any pprint in the code there :P
23:31 <      hhenkel > oskarkv: yes...the trace...sorry.
23:32 <      hhenkel > oskarkv: Also added the function that works on my data...
23:32 <      hhenkel > ...any hint how to not have to lazy-seq?
23:32 <      oskarkv > if you swapped trace for pprint? The schedule-request function will not run, because map is lazy.
23:32 <      oskarkv > (dorun (map ...))
23:33 <      oskarkv > or, doall if you want to retain it
23:34 <      hhenkel > oskarkv: missed the dorun / doall....any thoughts on the double lazy-seq?
23:35 <      oskarkv > hhenkel double lazy-seqs are not necessarily a problem
23:36 <      hhenkel > But if you look at my data strucutre that I get, do you think it's necessary that it is wrapped twice?
23:36 <        TimMc > Ticket filed for stupid clojure.string/split behavior: http://dev.clojure.org/jira/browse/CLJ-1360
23:36 <        TimMc > (not that it will accomplish anything)
23:36 <        sveri > hi, is there a dedicated sum function for lists or should I use reduce?
23:37 <     sritchie > dnolen_: hey, one Q about that timing app
23:37 <     sritchie > dnolen_: any advice on how I can be careful about isolating the timer DOM updates from other updates on the page?
23:37 <      hhenkel > oskarkv: the data contains to "objects" I would like to work on...therefore it seems like an overhead to me.
23:38 <     sritchie > I have a list of "result entries"; every time you click the mark button, I grab the current time and add an entry to {:stopwatch {:results <vector-of-results>}}
23:39 <      oskarkv > hhenkel I'm not sure what you are doing with your data
23:39 <     sritchie > dnolen_: :stopwatch has :results, :timestamp, :stopwatch-time, :active?… it looks like my :results rows are updated every 10ms. I feel like something about the way I'm passing cursors is triggering dom updates on :results changes...
23:39 <     sritchie > dnolen_: probably I need to nest them differently?
23:40 <      oskarkv > hhenkel what is get-server-config, for example?
23:40 <      hhenkel > oskarkv: I added it to the refheap
23:40 <      oskarkv > hhenkel ok
23:40 <      hhenkel > oskarkv: That's what I was refering to earlier.
23:40 <      oskarkv > ah :P
23:45 <      dnolen_ > sritchie: is your :results row a vector that isn't changing?
23:45 <      oskarkv > hhenkel and what was your question/problem? :P
23:46 <     sritchie > dnolen_: yeah, it is
23:46 <      hhenkel > oskarkv: Down below you see the result of "my work"...it is wrapped in (({ ...
23:47 <     sritchie > https://github.com/paddleguru/om-timer/blob/develop/src/cljs/paddleguru/client/timer.cljs#L207
23:47 <      hhenkel > oskarkv: all i want to do is iterate over those to objects...and it seems not right to have it double wrapped..
23:47 <     sritchie > dnolen_: and I'm trying to be careful to only pass that vector down into my build-all call;
23:47 <     sritchie > :focus-cell is a piece of higher level state that leaks down, though. maybe that's triggering a re-render. Let me remove that and see if it helps
23:48 <      hhenkel > oskarkv: Or with other words, why should I pack it two times to unpack it twice later on.
23:49 <      oskarkv > hhenkel those come from `for`? So there is only one application and one server?
23:50 <     sritchie > dnolen_: yeah, it's still really sluggish after adding 100 results (even though that vector doesn't change)
23:51 <     sritchie > dnolen_: http://omtimer.herokuapp.com/timer
23:51 <      hhenkel > oskarkv: nope, there are multiple applications that can have multiple servers ( a weblogic domain for example, one domain multiple managed servers and we got multiple weblogic domains).
23:51 <      dnolen_ > sritchie: yeah so that's not going to work, you're triggering a re-render every time.
23:52 <      dnolen_ > sritchie: you need to do the reverse "inside"
23:52 <      oskarkv > hhenkel but right now only 1? And those lists come from for?
23:52 <      oskarkv > or, seqs
23:53 <      dnolen_ > sritchie: a bit of a wart at the moment with how Om works, we can't use Clojure's equality test yet because of some implementation details.
23:53 <      dnolen_ > sritchie: basically in order to avoid re-renders identical? must be true, not =
23:53 <     sritchie > ah, gotcha
23:54 <     sritchie > so I need to make sure to build the results vector in reverse as I add stuff
23:54 <     sritchie > if I want those result entries to show up in reverse order
23:54 <      dnolen_ > sritchie: no just do the reverse later
23:54 <      hhenkel > oskarkv: the description is in yaml files....there are two example objects in the data.
23:54 <      dnolen_ > sritchie: like inside the component that shows it
23:54 <      hhenkel > oskarkv: first ends with  :http-port 8080}
23:54 <      hhenkel > oskarkv: line 58
23:55 <      dnolen_ > sritchie: even if I remove the wart, that will still be fastest
23:55 <  paulfedorow > why is it that i can't see the output of prn inside a go block when evaluating it in vim with fireplace?
23:56 <     sritchie > dnolen_: huh, I thought this was inside the component that shows it (finisher-rows)
23:56 <     sritchie > finisher-rows shows the group of them
23:56 <      dnolen_ > sritchie: no you are reversing then calling build
23:56 <      dnolen_ > no way identical? check can work
23:56 <      oskarkv > hhenkel sorry, when you said "the result of my work" I think I misunderstood. What work? What function output that? And how did the double (( come about?
23:57 <     sritchie > yeah, for sure - just wasn't clear on the return type of build-all
23:57 <     sritchie > so I can move the reverse outside
23:57 <      dnolen_ > sritchie: build-all just returns a seq of components
23:57 <      dnolen_ > sritchie: so you can use apply
23:57 <      hhenkel > oskarkv: The data shown is the result of "get-server-config"
23:58 <      oskarkv > ah, now i see
23:58 <     sritchie > dnolen_: nice. "ranked" is going to be a problem as well, I guess, since identical? will fail
23:59 <     sritchie > dnolen_: though that's modeled after (defn people [app] …) in https://github.com/swannodette/om/wiki/Basic-Tutorial
23:59 <      dnolen_ > sritchie: it's usually not a problem but for long lists of things yes, you're going to lose time comparing things that don't need to be compared
23:59 <      hhenkel > oskarkv: I gotta go - basketball time - be back later on.
23:59 <      oskarkv > So right now there are 1 app and 2 servers? Anyway you can do this in for: (for [app apps, server app] ...), that sould get rid of the double wrapping
23:59 <      oskarkv > hhenkel ^
--- Day changed Wed Feb 19 2014
00:00 <      hhenkel > oskarkv: I'll give it a quick shot.
00:00 <  paulfedorow > ah worked around it by wrapping the go block in a <!!. guess the go block wasn't executed fast enough for fireplace to grab the output
00:00 <   whodidthis > any way to destructure hashsets?
00:00 <      oskarkv > hhenkel note that comma is whitespace, no need for it
00:00 <      hhenkel > oskarkv: Perfect!
00:00 <      hhenkel > oskarkv: works now as expected.
00:01 <      hhenkel > oskarkv: Thank you!
00:01 <      hhenkel > oskarkv++
00:01 <      oskarkv > hhenkel great :p no problem
00:01 <      oskarkv > (inc oskarkv) :p
00:02 <         `cbp > (inc oskarkv)
00:02 <      lazybot > ⇒ 1
00:02 <     sritchie > dnolen_: the whole UI for this thing is poorly designed, anyway; since we insert at the top, you have to re-render everything below.
00:03 <     sritchie > dnolen_: yeah, it's much faster without "ranked", presumably because you have to re-render everything to increment their rank by 1
00:05 <     sritchie > dnolen_: the way forward is probably to implement that component that only re-renders items that are in the current window
00:05 <     sritchie > dnolen_: thanks for the help. the fog is lifting.
00:11 <       bbloom > dnolen_: i think sritchie has your next blog post idea for you: you need to show how to implement a virtualizing stack panel
00:11 <      dnolen_ > bbloom: heh, we'll see :)
00:12 <      dnolen_ > sritchie: yes, this where if you came up with a generic component a lot of people would benefit.
00:12 <     sritchie > yeah, I'm planning on putting some time toward my Om + CLJS knowledge each day
00:13 <     sritchie > I'll see what I can do with this
00:14 <      dnolen_ > sritchie: that's really the thing I'm most excited about. As people build out their applications there will be legitimately reusable things that should be easy to spin out like I've done w/ om-sync.
00:14 <       bbloom > dnolen_: it would be pretty easy if you assume fixed height items and just absolute position them: then you basically just render N items where N is like the number of items that fit vertically * 3 or whatever
00:15 <      dnolen_ > bbloom: yep
00:15 <       bbloom > legitimately reusable: as opposed to "we claim this is reusable, but nobody but us has ever reused it"
00:15 <      dnolen_ > bbloom: most of the annoyances will simply be making it so that it works in every browser >= IE8
00:16 <       bbloom > dnolen_: if you just put a div in a scrollable div, set the inner div's height explicitly, and then absolutely position fixed height items within that: i see no reason why it shouldn't in any browser w/ minimal effort
00:16 <      dnolen_ > bbloom: it should just work yes - but you know how these things are :)
00:16 <       bbloom > true story.
00:16 <      dnolen_ > it works, except on Galaxy Tab or something
00:17 <     sdegutis > I think (id) would be a great name for some function.
00:17 <     sdegutis > Except then we could never name variables "id"
00:17 <       bbloom > sdegutis: which is likely why rich choose identity
00:17 <       bbloom > sdegutis: haskell was more bold: http://hackage.haskell.org/package/base-4.6.0.1/docs/Prelude.html#v:id
00:18 <     sdegutis > Well I already feel paranoid when I name a symbol "id", having to check lazybot to see if it's already a function.
00:18 <       bbloom > lol
00:18 <     sdegutis > So it might as well be unusable.
00:18 <       bbloom > sounds like an isolated problem...
00:18 <     sdegutis > bbloom: Doing Haskell lately?
00:18 <       bbloom > sdegutis: nope
00:18 <       bbloom > sdegutis: no plans to either
00:18 <     sdegutis > !!
00:18 <     sdegutis > Why not?
00:18 <       bbloom > sdegutis: not gonna get in to a language war now....
00:19 <     sdegutis > No I mean, I just thought everyone in here was getting into Haskell lately.
00:19 <     sdegutis > (Except that one guy.)
00:19 <  technomancy > gentlemen. you'll have to wait till 1600 UTC for this.
00:19 <  technomancy > =)
00:19 <     sdegutis > (yeah, him)
00:19 <       bbloom > i've been enjoying his absence
00:20 <     sdegutis > technomancy: I don't see it in the topic anymore.
00:20 <       bbloom > sdegutis: it's now well known policy, not a new announcement :-P
00:20 <  technomancy > hehe
00:20 <     sdegutis > I just saw a trend of Clojurians getting into Haskell. Not sure why it happened en masse like that. Kinda neat phenomenon.
00:20 <  technomancy > is Clojure big enough to have any "en masse" phenomenons happen in it?
00:21 <  technomancy > phenomena
00:21 <       bbloom > sdegutis: this community believes in understanding PLT and, like it or not, haskell has a strong foothold there. you basically need to read ML and Haskell to keep up with the theory
00:21 <     sdegutis > (en-masse & people) only requires >= 3 arguments.
00:21 <       bbloom > sdegutis: and, if you're lucky, scheme :-P
00:21 <     sdegutis > PLT?
00:21  *    sdegutis googles
00:21 <     sdegutis > $google PLT
00:21 <      lazybot > [Project Learning Tree] https://www.plt.org/
00:21 <     sdegutis > Oh.
00:22 <       bbloom > no
00:22 <       bbloom > programing language theory
00:22 <       bbloom > clojurebot: PLT is http://en.wikipedia.org/wiki/Programming_language_theory
00:22 <   clojurebot > In Ordnung
00:22 <     sdegutis > Oh dang, I'm off topic.
00:22  *    sdegutis heads back to #clojure-social.
00:26 <      dnolen_ > so w/ the React.js 0.9.0-rc1 changes, Om is 10X faster for initial render than the popular competitors :)
00:26 <      dnolen_ > love it when perf is someone elses problems
00:28 <       bbloom > dnolen_: nice. what changed?
00:28 <      dnolen_ > bbloom: bunch of internal tweaks, petehunt suspects JIT friendlier
00:29 <     petehunt > also innerHTML size is a lot smaller since we reduced the size of ids
00:29 <     petehunt > probably has a lot to do with it
00:29 <      dnolen_ > petehunt: nice
00:29 <       bbloom > petehunt: JIT friendlier means less runtime metaprogramming? more use of objects as structs?
00:30 <     petehunt > bbloom: we fixed a few places where we created obj keys in different orders
00:30 <     petehunt > big thing was not accessing undefined props in a few places
00:30 <       bbloom > petehunt: gotcha. so the hidden classes optimizations don't bail out w/o warning
00:31 <     petehunt > right
00:31 <       bbloom > petehunt: and by ids smaller, you literally mean fewer character strings? heh. hilarious
00:31 <     petehunt > yeah
00:31 <        wei__ > compojure handlers/wrappers are called from inside out right? so that means if I use the -> operator my handlers are actually called in the reverse order in which they appear?
00:31 <     sritchie > yup
00:31 <     sritchie > wei__: that's correct
00:32 <        wei__ > sritchie: thx
00:32 <     petehunt > go measure the # of html bytes in the dom ni 0.8 and 0.9
00:32 <     petehunt > :)
00:32 <        nkoza > dnolen_: are you using Om in production?
00:32 <       bbloom > petehunt: go team
00:32 <       bbloom > nice work
00:32 <      dnolen_ > nkoza: not yet, but other people are
00:33 <       bbloom > nkoza: dnolen_ never uses his own stuff in production. where would the fun be in that? he just rathers you all gamble for him
00:33 <      dnolen_ > haha
00:33 <        nkoza > I see, maybe I can be another guinea pig
00:35 <         `cbp > I cloned the stackoverflow new topic's add-tags-input for my app in about 250 lines of om. That was pretty nice.
00:37 <      dnolen_ > `cbp: nice
00:38 <         `cbp > dnolen_: indeed, all i needed was the basic tutorial hehe
00:39 <         `cbp > Once I port it to 0.4 i'll make a repo with my widgets
00:41 <      dnolen_ > "we've replaced 17,000 lines of JavaScript with 2,000 lines of om/react" http://github.com/swannodette/om/issues/116#issuecomment-35410957
00:43 <       bbloom > glorious
00:43 <    ambrosebs > dnolen_: wow congrats!
00:48 <   whodidthis > is there a way to get ring to respond with status 400 if im not returning a status or body
00:48 <   whodidthis > so status 400 if my response-handler returns nil
00:49 <       ystael > whodidthis: sure, just interpose a middleware that replaces nil with a 400 response on the way back out
00:50 <   whodidthis > cool, havent lookd at any middleware yet
00:51 <       ystael >  whodidthis: have you looked at Liberator?
00:51 <       ystael > something like that takes care of a lot of these concerns for you
00:52 <   whodidthis > im not planning on doing that many http end points so ill try something simpler
00:52 <   whodidthis > more interested in websockets
00:56 <       zanes_ > Huh. Odd that max doesn't take a comparator.
00:56 <     hiredman > ,(doc max-key)
00:56 <   clojurebot > "([k x] [k x y] [k x y & more]); Returns the x for which (k x), a number, is greatest."
00:56 <        zanes > I'm aware of max-key.
00:58 <        zanes > But thanks.
00:58 <       pyrtsa > clojure.core is really lacking in Comparator based functions. :(
00:59 <      llasram > pyrtsa: In what sense?
00:59 <       pyrtsa > Comparison operators only work on numbers. No min/max algorithms for collections of Comparables. etc.
01:00 <      llasram > Oh, that.  Yeah, not sure why
01:01 <       pyrtsa > Fun fact: (< date1 date2) comparison works for java.util.Date when it's part of a Datomic query. But not when clojure.core/<.
01:04 < justin_smith > ,(< (.getTime (java.util.Date.)) (.getTime (do (Thread/sleep 1) (java.util.Date.))))
01:04 <   clojurebot > true
01:04 <      jonasen > pyrtsa: < is for nums only (as per the docs).
01:06 <       pyrtsa > jonasen: I know. Not sure if that's been a good design decision, though.
01:07 < justin_smith > ,(compare (java.util.Date.) (do (Thread/sleep 1) (java.util.Date.)))
01:07 <   clojurebot > -1
01:08 <        zanes > pyrtsa: Is there some contrib library I should be reaching for?
01:10 <        zanes > Also, this is a weird question, but is there a convention for naming deref'd variables? e.g. variable-name -> dvariable-name or similar
01:10 <       pyrtsa > zanes: Don't know of any.
01:11 <        zanes > I guess just using @ everywhere is shorter in almost all instances.
01:12 <       pyrtsa > I usually try to avoid dereffing the same IDeref multiple times in the same function, if it's possible some other thread might be changing it.
01:13 < justin_smith > really you should be using a transaction (for a ref) or a swap function (for an atom)
01:13 < justin_smith > dereffing multiple times in one fn sounds like a code smell
01:13 <       pyrtsa > Nod.
01:14 < justin_smith > also "sounds like a code smell" is metaphor abuse
01:14 <       pyrtsa > :D
01:14 <      llasram > Software synesthesia
01:15 < justin_smith > lol
01:15 <  technomancy > why does everyone assume code smell is malodorous
01:15 < justin_smith > code perfume
01:15 <  technomancy > can't code smell fresh and lively?
01:16 < justin_smith > decoderant
01:16 <      llasram > (inc justin_smith)
01:16 <      lazybot > ⇒ 27
01:16 <  technomancy > nice
01:16 <   SegFaultAX > Haha, well done.
01:17 <       bbloom > justin_smith: decoderant would be a great name for a linter
01:18 <       bbloom > "Eliminates those pesky code smells!"
01:18 <       bbloom > "Now with bleach!"
01:19 <     pjstadig > 𝅘𝅥𝅮Your code's not fully clean until it's Zest fully clean!𝅘𝅥𝅮
01:19 <      amalloy > bbloom: coderant.de is available
01:19 <      amalloy > de.coderant is the group-id - now what's the artifact-id?
01:19 <     pjstadig > speed-stick
01:19 <       bbloom > fresh-blast
01:20 <       bbloom > pjstadig: that's the the submodule that finds perf smells
01:21 <  technomancy > different versions have code names [de.coderant "0.5.0-ARCTIC-CHILL"] and [de.coderant "1.1.0-ISLAND-BREEZE"]
01:22 < justin_smith > haha
01:22 <     pjstadig > i always end up buying domain names because of #clojure
01:22 <     pjstadig > this is how i ended up with clabango.org (which I finally let go)
01:22 <     pjstadig > ~suddenly
01:22 <   clojurebot > CLABANGO!
01:22 <       Raynes > #firstworldproblems
01:22 <       Raynes > :P
01:36 <        aphyr > CookedGryphon: #riemann is the best way to get ahold of me BTW.
01:37 <        aphyr > CookedGryphon: haven't seen a compilation error before but I believe you, haha. Riemann-java-client defines it internally.
01:38 <        aphyr > Any idea how to let the java client implement the interface without copying the class?
01:38 <     hiredman > http://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html ?
01:51 <        ptcek > Anyone know how to configure jTDS or MSJDBC driver for MSSQL 2005 to use :fetch-size parameter and fetch lazily? I have a working example with Oracle, but cannot find out how to do that with MSSQL...
01:53 <        ptcek > It always tries to load the whole dataset in memory in contracst with Oracle that uses fixed amount of memory no matter how large the dataset...
01:56 <        aphyr > CookedGryphon: https://github.com/aphyr/riemann-java-client/issues/34
01:57 < justin_smith > ptcek: clojure.java.jdbc should return a stream of result data, using constant memory space is a question of what you do with that stream
01:58 <        ptcek > justin_smith: I will post the working code in a sec to make it clear...
02:01 <       fitzoh > anyone have any experience with clj-webdriver?
02:11 <        ptcek > justin_smith: Cannot connect to work, so just from memory http://pastebin.com/uewDgdau
02:13 <        ptcek > justin_smith: this works well when connecting to Oracle (clojure process will take a few MBs more than when idle no matter how large the dataset) but MSSQL driver will try to load the whole dataset into memory so it blows up
02:18 < justin_smith > oh, so this sounds like a bug somewhere in the integration of the mssql driver and clojure.java.jdbc - have you tried breaking it into explicit count and offset queries? that should work as a fallback
02:19 < justin_smith > though it is admittedly tedious
02:23 <        ptcek > justin_smith: I did not and don't want to (I don't need to get the result now so I am not forced) and it bugs me that it works in Oracle
02:24 < justin_smith > Sounds like a problem with that mssql backend, yeah. I think your options are not use mssql, fix their driver, or use count and offset queries.
02:24 < justin_smith > I'd be interested if you find something better though.
02:24 <        ptcek > as I am total noob and new to clojure/dbs and all I think I will not :)
02:26 < justin_smith > :count and :offset keys, and breaking into multiple queries in a loop, should work OK
02:26 <     borkdude > So now I get what caribou is about: building crud apps
02:26 < justin_smith > borkdude: yeah, that's a big part of it - or at least handling the crud part of setting up a website
02:27 <     borkdude > justin_smith I'm impressed by the demo video
02:27 < justin_smith > thanks, I'll let patchwork know
02:27 <        ptcek > justin_smith: yeah this will work but if my approach is correct, I would even more like to see IT working. Could it be considered bug?
02:28 <        ptcek > justin_smith: bug in what? drivers?
02:28 < justin_smith > ptcek: I think it is a bug in the mssql driver
02:28 <        ptcek > justin_smith: I will try jTDS authors then...
02:29 < justin_smith > or maybe it is a technically a missing feature and not a bug... dunno, sorry
02:29 <        ptcek > they present that it should be working and all the opts are supported
02:30 <      jonasen > Anyone know of where I can read more about core.async pub/sub system (blog posts, examples etc)? All I found is basically the docstring for `core.async/pub`: https://github.com/clojure/core.async/blob/master/src/main/clojure/cljs/core/async.cljs#L597
02:30 <        ptcek > justin_smith: after all, do you consider the aproach with, genrally, statefull function to be correct given the use case?
02:31 <        aphyr > jonasen: the docstrings are helpful: https://github.com/aphyr/core.async/blob/decomplecting/src/main/clojure/clojure/core/async.clj
02:32 <      dnolen_ > jonasen: pub/sub is pretty simple, https://github.com/swannodette/om-sync
02:33 <      dnolen_ > jonasen: pub takes a chan and returns something you can suscribe to, you must supply something that take the value of the channel and returns the topic, sub is simple, you subscribe to pub chan and you say what topic you want to listen in on.
02:33 < justin_smith > ptcek: as long as you don't ever run the code in parallel
02:34 < justin_smith > ptcek: if you would ever have two concurrent queries, you would want to bind the atom inside a closure, so they wouldn't compete for the same atom
02:34 <      jonasen > dnolen_: thanks! I think pub/sub is what I want. Great to see om-sync is using it. I'll read through the code
02:35 < justin_smith > (wrapping the whole thing in a let statement instead of using def, and probably putting that inside an fn)
02:35 <      dnolen_ > jonasen: it's not so much using it, people who want to use it must follow this pattern.
02:35 <      dnolen_ > jonasen: om-sync works by consuming a feed of all changes to the application state
02:35 < justin_smith > good clojure style is to refactor things so that all the caller will care about is the arguments (if any) and the return value
02:35 <        ptcek > justin_smith: this is what I meant by stateful function, ie closure over atom, right?
02:36 < justin_smith > right, once you close over a new atom, it is only locally stateful
02:36 < justin_smith > and won't share state with another invocation
02:36 <      stompyj > Clojure + Redis.  It's like the dawn of a new day.  That is all. :)
02:36 <        ptcek > yeah this is what I am planning
02:36 < justin_smith > (let [sum (atom 0)] (clojure.java.jdbc/query ... (rest of your code goes here)))
02:37 < justin_smith > of course dereffing the atom at the end
02:37 <        ptcek > justin_smith: thanks for suggestions
02:39 < justin_smith > also, if you end up doing queries in a loop with :count and :limit parameters, you can probably make the queries in parallel, adding to the atom as each comes back, instead of waiting for them one at a time
02:39 < justin_smith > so you only need deal with latency once, rather than multiplying latency by the query count
02:41 <        ptcek > justin_smith: so use n atoms for n parallel queries?
02:41 < justin_smith > um no
02:42 < justin_smith > one atom, but swap as they come back
02:42 < justin_smith > for n parallel queries that are meant to derive 1 count
02:43 <        ptcek > ok, actually I am using some "switches" that I switch while going through the dataset and adding only when some combination of switches is present, ie I process a row at a time and keep the necessary history in the atom
02:44 <      amalloy > justin_smith: instead of hand-rolling some junk with an atom and spawning the threads yourself, why not use reducers/fold? that's what it's for; you just have to define a Reducer implementation for your database thing
02:44 <        ptcek > + the accumulator, of course
02:45 < justin_smith > ptcek: yeah, amalloy's idea is much better
02:47 <        ptcek > ok so use fold in place of result-set-fn
02:50 < justin_smith > I think it's not quite that simple, you would define a fold that does a query, and reducers would combine the results http://clojure.com/blog/2012/05/08/reducers-a-library-and-model-for-collection-processing.html
02:50 < justin_smith > I haven't used reducers / fold myself though, but it sounds like the right solution, maybe amalloy has more specific suggestions
02:52 < justin_smith > the basic idea is that each query would construct its own sum, and the reducer would sum each of these as they are ready, I think
02:53 <      amalloy > sorry, i don't really have time to dive back into the details of how to build custom foldables. i have slides and a script from a presentation i did on it back whenr educers were new, though: https://github.com/amalloy/reducers-presentation
02:55 <        ptcek > amalloy: thanks for this material I'll go through it
03:09 <   ericdwhite > Hi I have a questions about using merge to add items to list within a map.  I'm looking for feedback on style as I'm new to clojure.  What's the best way to post code in IRC? gist?
03:10 <      llasram > ericdwhite: gists are fine, also https://www.refheap.com/
03:11 <   ericdwhite > https://gist.github.com/ericdwhite/9079003
03:12 <   ericdwhite > In the example I have a room with a list of people inside, and I want to create a method to allow people to join the room.  I'm looking for feed back on the method (join-em)
03:13 <      amalloy > join-rm could be (update-in room [:people] merge person)
03:13 < justin_smith > also, in general, if you know the keys ahead of time, assoc makes more sense than merge
03:13 <      amalloy > although merge shouldn't work at all here, right? i mean, what i posted is a transformation of your existing code, but you can't merge vectors, only maps
03:14 <      amalloy > so really you mean more like (update-in room [:people] conj person), which is pretty normal
03:15 <         `cbp > I'd do like (defn add-people [room & people] (update-in room [:people] into people))
03:17 <      amalloy > meh
03:17 <      amalloy > whether one person or multiple people makes more sense depends on his context, which we don't know
03:18 <      amalloy > i certainly wouldn't use &, though - people being an explicit seq will be more convenient
03:19 <   ericdwhite > I was adding 1 person at a time, because that was how the UI worked.
03:19 <        notid > Quick question: is there a splat operator in clojure? I'm wanting to make the vector inline here: (some-func [1 2 3] "hello")
03:19 <   ericdwhite > so with 'conj' the result is: {:id "room1", :people [{:name "john", :id 1} {:name "sam", :id 2}]}
03:20 <   ericdwhite > And the same for & people with into.  Thanks for your help.  What I was really missing was update-in!
03:34 <      dnolen_ > notid: apply
03:34 <      dnolen_ > notid: though you can't quite do what you want there.
03:35 <      dnolen_ > (apply some-func (concat [1 2 3] ["hello"])) is about the best you can do.
03:36 <      dnolen_ > notid: unless of course some-fun takes vectors as second arg, then (apply some-fun "hello" [1 2 3])
03:38 <         ivan > jonathanj: I think I'll go with (mapv (partial reduce +) (apply map list [[1 1] [2 2] [3 5]])) for summing columns; I don't think there's a shorter way to do sum or zip unless you want to define your own
03:52 <  gfredericks > did java originally have characters or were they stapled on later?
03:52 <       danneu > Is there another way to sort strings alphabetically (case-insensitive) than to convert to lower-case?
03:53 <     hiredman > ,(doc sort-by)
03:53 <   clojurebot > "([keyfn coll] [keyfn comp coll]); Returns a sorted sequence of the items in coll, where the sort order is determined by comparing (keyfn item). If no comparator is supplied, uses compare. comparator must implement java.util.Comparator. If coll is a Java array, it will be modified. To avoid this, sort a copy of the array."
03:53 <  gfredericks > danneu: String#compareToIgnoreCase
03:55 <  gfredericks > ,(sort (comparator (fn [^String s1 ^String s2] (neg? (.compareToIgnoreCase s1 s2)))) ["foo" "BAR" "baz"])
03:55 <   clojurebot > ("BAR" "baz" "foo")
03:55 <       danneu > gfredericks: brilliant
03:57 <     hiredman > ,(sort-by #(.toLowerCase %) ["foo" "BAR" "baz"])
03:57 <   clojurebot > ("BAR" "baz" "foo")
04:04 <     pjstadig > ,(sort-by (mem-fn toLowerCase) ["foo" "BAR" "baz"])
04:04 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: mem-fn in this context, compiling:(NO_SOURCE_PATH:0:0)>
04:04 <     pjstadig > ,(sort-by (memfn toLowerCase) ["foo" "BAR" "baz"])
04:04 <   clojurebot > ("BAR" "baz" "foo")
04:07 <       danneu > for one use-case, the built-in comparator saves me 2 characters
04:08 <     borkdude > is there no section on debugging in the clojure cookbook? https://github.com/clojure-cookbook/clojure-cookbook
04:10 <     hiredman > gfredericks: fns (if I recall correctly) implement whatever the comparing interface is, so you shouldn't need to call comparator or neg?
04:10 <      llasram > borkdude: Clojure code never has bugs.  Once you get code working at the REPL, it generally just works
04:11 <     borkdude > llasram that is only true if your name is Rich Hickey
04:11 <     borkdude > I just discovered this nice tool https://github.com/prismofeverything/schmetterling
04:11 <     borkdude > via caribou docs
04:12 <       danneu > my debug workflow is about as sophisticated as it was at my first vbscriipt job
04:12 <     borkdude > daniel_karlsson you mean println?
04:12 <     borkdude > I mean danneu
04:12 <       danneu > yes
04:13 <     borkdude > danneu mine too
04:13 <       danneu > or clojure.pprint/pprint
04:13 <     borkdude > danneu and I used swank debug thing
04:13 <       danneu > when i'm feelin fancy
04:13 <     borkdude > danneu but I haven't used it in a long while, I don't know if it is even ported to the new nrepl world?
04:15 <       danneu > i dont know how to make nrepl helpful with stacktraces. right now it just shows the top line of the trace in a 1-inch-high popup which is usually good enough
04:15 <       danneu > the default seemed to print the whole trace in its own buffer that i would have to manually close
04:15 <  gfredericks > hiredman: I knew there must be an easier way; that's a tricky one to guess though
04:16 <  gfredericks > pjstadig: that one reflects I think
04:26 <     borkdude > is anyone around involved in schmetterling?
04:27 <     borkdude > yeahyeah I can't use the word anyone here, but now it seems appropriate
04:27 <     borkdude > I wanted to ask if it's normal that when I press "continue" the same exception comes up again and again
04:29 < justin_smith > borkdude: patchwork is the guy behind schmetterling, I can ask him what is up
04:29 < justin_smith > there is a thing where if you do something in the inspector that throws an error, it goes into an error loop iirc
04:29 < justin_smith > unless that is fixed
04:29 <     borkdude > justin_smith yeah I got that, that is documented as well on the page
04:30 < justin_smith > oh, ok
04:30 <    patchwork > borkdude:  What is the exception?  It all depends on the state of your process
04:31 <     borkdude > patchwork I opened up a repl with 'lein try schmetterling'
04:31 <    patchwork > Also, some libraries throw exceptions with the intention of catching them later, but schmetterling will still break on them
04:31 <     borkdude > and then did this:
04:31 <     borkdude > user=> (let [x 10 y 15]
04:31 <     borkdude >   #_=>   (schmetterling.core/debugger))
04:31 <     borkdude > patchwork I can inspect x and y
04:32 <     borkdude > but when I press continue, I get the same thing over and over, the REPL never returns to the normal state
04:32 <    patchwork > paste the exception here:  https://www.refheap.com/
04:33 <    patchwork > I need to document this, but you can add certain exceptions to an exclusion list if certain libs you use pathologically throw them internally
04:33 <        muhoo > is there some way to make liberator use cheshire instead of clojure.data.json?
04:36 <  gfredericks > time to write a simple-json-facade-clj
04:37 <     rasmusto > gfredericks: faceon
04:37  * technomancy shudders
04:38 <  gfredericks > I'm still trying to solve the problem of making cheshire extensible for libraries
04:38 <     rasmusto > technomancy: at least there's no ironicjure in it
04:38 <     borkdude > patchwork https://www.dropbox.com/s/v9fr9vdt4p0uox9/Screenshot%202014-02-18%2022.38.21.png
04:38 <     borkdude > patchwork I raised the expection from a repl, calling a function foo with args x y and z
04:39 <     borkdude > https://www.refheap.com/41562
04:39 <     borkdude > patchwork when I click continue, I get the same screen over and over
04:40 <    patchwork > borkdude:  Hmm…. strange.  Must be something about how the exception is interacting with the repl
04:41 <    patchwork > it should just finish and continue, but I have never triggered the exception from the repl before, I usually do it from a running app
04:41 <     hiredman > gfredericks: a module system where every library gets its own copy of cheshire to extend, right?
04:42 <    patchwork > borkdude:  What happens if instead you trigger a different exception, like (/ 1 0)?
04:43 <  gfredericks > hiredman: man I have no idea how seriously you meant that
04:43 <     borkdude > patchwork I'll try now again
04:43 <         bob2 > muhoo, how did you make it use either?
04:43 <  technomancy > parameterized namespacessssss
04:43 <         bob2 > muhoo, I didn't think it did any implicit deserialisation
04:43 <     hiredman > rewrite cheshire to use some kind of service object, so you instantiate this cheshire object with some parameters and use it
04:43 <     sdegutis > technomancy: wat
04:43 <     sdegutis > that would be so cool
04:44 <     hiredman > gfredericks: I don't know how serious the question is
04:44 <  gfredericks > (deftype ReadOnlyDereffable [r] clojure.lang.IDeref (deref [_] @r))
04:44 <        muhoo > technomancy: huh?
04:45 <        muhoo > bob2: serialization not deserialization
04:45 <       danneu > Has anybody ever worked with BBCode with Clojure/Java? I'm looking for a good lib + editor combo
04:45 <  gfredericks > hiredman: reasonably serious; I have a structured logging lib and would like it to default to str rather than throwing; and maybe a couple other customizations
04:45 <         bob2 > muhoo, ah
04:45 <     hiredman > (deftype Cheshire ...) (let [c (Cheshire.)] (add-encoder c ...) ...)
04:45 <  technomancy > sdegutis: apparently OCaml modules do a good job at supporting this
04:45 <        muhoo > bob2: it uses clojure.data.json to encode application/json types. i could manually just handle types but it defeats one of the purposes of using liberator
04:45 <         bob2 > yeah, i'm less convinced of liberator than I was
04:45 <        muhoo > it's a Great Beast
04:46 <  gfredericks > hiredman: the weird part is if I'm going to fork and rewrite or whatever anyhow, I actually solve the problem by using the new version from the logging lib and nowhere else :/
04:46 <       danneu > Rather, can anyone recommend a good editor that also happens to support BBCode?
04:46 <     borkdude > patchwork same problem
04:46 <  gfredericks > fsvo "solve"
04:46 <        muhoo > it seems way more work than it's worth for some things, but i've got a project that already uses it and don't feel like ripping it all up and starting over ATM
04:46 <     hyPiRion > gfredericks: (defn read-only-deffable [val] (let [p (promise)] (deliver p val) p)) is not sufficient? Saves you a deftype
04:47 <     hiredman > gfredericks: stick a copy of cheshire in a classloader where no one else can get at it
04:47 <  gfredericks > hyPiRion: hey reify would do it too
04:47 <         bob2 > also all the hooks are racey
04:47 <     borkdude > danneu maybe there is a BBCode mode for emacs? http://www.emacswiki.org/emacs/BbCode#toc1
04:47 <  gfredericks > hyPiRion: also: (doto (promise) (deliver val))
04:47 <         bob2 > does this url exist at hook time? no? better check in the handler anyway
04:47 <     hyPiRion > gfredericks: oh nice
04:47 <     hyPiRion > I don't usually deliver promises instantly, but I'll note it down
04:48 <       danneu > borkdude: oh, i meant for users. like my forum users.
04:48 <  gfredericks > hyPiRion: useful for any alter-then-return pattern
04:48 <      rsenior > technomany: do you have any clojure swarming bootstrap scripts for syme?
04:48 <     borkdude > danneu ah ok ;0)
04:48 <  gfredericks > (doto (def ...) (alter-var-root ...))
04:48 <        gtrak > gfredericks: any reason not to use delay there?
04:48 <      llasram > technomany == a system for cloning technomancy, ensuring the dominance of leiningen over all other build tools
04:48 <  gfredericks > gtrak: arbitrary refs can have changing values
04:49 <      rsenior > doh - thanks llasram
04:49 <  gfredericks > technomancy are the author of the clojure build tool leiningen
04:49 <      rsenior > technomancy: do you have any clojure swarming bootstrap scripts for syme?
04:50 <  technomancy > rsenior: there should be one in the repo, but I think there's something wrong with the language detection
04:50 <  technomancy > it's just not getting applied somehow
04:50 <  technomancy > https://github.com/technomancy/syme/blob/master/resources/languages/Clojure.sh
04:50 <  technomancy > https://github.com/technomancy/syme/pull/37
04:50 <      rsenior > right, I was thinking emacs, starter-kit, clojure-mode etc
04:51 <  technomancy > oh, personal dotfiles; suer
04:51 <  technomancy > sure
04:51 <  technomancy > https://github.com/technomancy/.symerc
04:53 <     borkdude > patchwork I tested now without the repl, causing the exception from a 'lein run', same problem
04:54 <    patchwork > borkdude:  Strange, I'll try to replicate
04:54 <     borkdude > patchwork this is the code from which the exception is thrown: https://www.refheap.com/41564
04:54 <    patchwork > It is like it is trying to execute the same function over and over again
04:55 <     borkdude > patchwork this is my project.clj https://www.refheap.com/41565
04:55 <      rsenior > technomancy: thanks! Going to give swarming a try this evening at the St Louis Clojure Meetup
05:02 <    patchwork > borkdude:  Ah, if you notice the exception is in a different line and file each time
05:02 <    patchwork > I hit continue maybe 15 times and it completed
05:02 <  gfredericks > (defmacro while-> "Like -> but short-circuits as soon as pred returns falsy for the threaded value." [pred x & forms] ...)
05:03 <    patchwork > It is just showing every exception getting thrown by the clojure compiler at every level it does that
05:03 <    patchwork > I think the main issue is that you trigger the exception when the file is loaded
05:03 <    patchwork > (foo 1 2 3) at the root level
05:03 <    patchwork > I will try an experiment, just a sec
05:10 <  technomancy > rsenior: great; good luck
05:10 <    patchwork > borkdude:  Yeah, in general you want to avoid executing things when a file loads.  Check this out: https://www.refheap.com/41567
05:10 <    patchwork > Instead of (foo 1 2 3) at the outer scope of your file, it is inside the -main function
05:10 <  gfredericks > oh hey another function with `some` in the name that uses traditional truthiness: some-fn
05:10 <    patchwork > This protects it from evaluation at load time
05:11 <    patchwork > Then in your project.clj just say :main proj.core
05:12 <    patchwork > It is still triggered maybe three times, this is the compiler rethrowing the same exception as it percolates up the stack
05:14 <  technomancy > gfredericks: traditional truthiness is between one true and one false only.
05:15 <      amalloy > technomancy: this sounds like some weird satire of gay rights
05:15 <      amalloy > satire? maybe i mean parody
05:16 <     borkdude > patchwork I know, this was just for testing
05:16 <     borkdude > patchwork testing without a repl that is. normally I don't create calls at top level ;)
05:17 <  gfredericks > amalloy: anti-gay-rights?
05:17 <  gfredericks > technomancy: traditional truthiness is int-based
05:17 <  technomancy > oh snap
05:17 <    patchwork > borkdude:  What I am saying is, that is what makes it seem like the exception is repeating itself, when really it is just sending it through far more calls since it is loading it over and over again
05:17 <    patchwork > probably something similar is happening with the repl
05:17 <  technomancy > don't get all von neumann on me
05:18 <     borkdude > patchwork ah ok
05:18 <  technomancy > gfredericks: I follow the teachings of the Church.
05:18 <     borkdude > patchwork I'll try non-top-level call then
05:18 <  gfredericks > technomancy: von neumann said it, I believe it, that settles it
05:18 <     rasmusto > one man and von neumann, please
05:19 <  technomancy > the Church, who also happens to be A Church.
05:19 <     hyPiRion > haha
05:19 <     sdegutis > :/
05:20 <     hyPiRion > good old Alonzo.
05:20 <     borkdude > patchwork I now got this. No difference. https://www.refheap.com/41569
05:21 <     sdegutis > oh thats a nice story, von Neumann died a Catholic :)
05:24 <    patchwork > borkdude:  Keep hitting continue
05:24 <    patchwork > its location in the stack changes
05:26 <  gfredericks > ,(as-> {:foo 12} {:keys [foo bar] :as m} (assoc m :foo 13) (assoc m :bar foo))
05:26 <   clojurebot > {:keys [13 13], :as {:bar 13, :foo 13}}
05:26 <  gfredericks > haha
05:26 <     sdegutis > oh good, we're back on topic
05:27 <  gfredericks > (inc clojure)
05:27 <      lazybot > ⇒ 15
05:27  *    sdegutis got nervous for a second
05:28 <     rasmusto > gfredericks: waaah, that's confusing me
05:29 <     rasmusto > ,(doc as->)
05:29 <   clojurebot > "([expr name & forms]); Binds name to expr, evaluates the first form in the lexical context of that binding, then binds name to that result, repeating for each successive form, returning the result of the last form."
05:30 <     borkdude > patchwork that's true. when I keep pressing continue eventually the browser window is 'empty', but what should happen to the call to foo? now my program doesn't respond anymore
05:30 <     borkdude > patchwork I think it should just finish now?
05:30 <     rasmusto > gfredericks: is it supposed to stay 12?
05:30 <    patchwork > It does finish with an exception in the terminal
05:30 <    patchwork > (at least for me)
05:31 <     ztellman > technomancy: I think you should be a little more open-minded when it comes to churches http://bit.ly/1jP4CEP
05:31 <    patchwork > Which is correct, since it threw an exception and it is not in a loop
05:32 <     borkdude > patchwork yes, I would expect that, but not in my terminal :-s
05:32 <      amalloy > gfredericks: that's pretty silly. as-> could make this work, right, just by letting another gensym at the end? or i suppose by not letting the last version at all
05:33 <      amalloy > ie, like https://gist.github.com/amalloy/9081844
05:34 <     borkdude > patchwork only when I kill the schmetterling instance, my program finishes
05:34 <     borkdude > patchwork with the exception thrown
05:36 <    patchwork > borkdude:  Strange, not sure what is up with that
05:36 <    patchwork > I usually use it on a web server and trigger the exception on requests
05:37 <    patchwork > Then the process continues and you can trigger it again by reloading
05:37 <       rhg135 > quick question, how would i compose a series of channel-returning functions?
05:37 <    patchwork > Maybe it has something to do with the dt_socket keeping the process alive?
05:38 <     borkdude > patchwork I don't know. I haven't yet used this in a project, just discovered it.
05:38 <         bob2 > rhg135, ? as in wait on them all?
05:39 <      hhenkel > (inc oskarkv)
05:39 <      lazybot > ⇒ 2
05:39 <       rhg135 > bob2, i'm such an idiot lol
05:39 <    patchwork > borkdude:  Well, I haven't officially released it yet, but I use it all the time.  I will work on that and see what I can find out.  There are a lot of quirks in the java debugging interface I have discovered during this process
05:39 <       rhg135 > knew i was overthinking this
05:40 <     borkdude > patchwork it's great stuff
05:40 <       rhg135 > just run it all in a go block
05:44 <    patchwork > borkdude:  Thanks!  all feedback welcome
05:54 <         `cbp > heh that as-> stuff
05:54 <         `cbp > maybe make a jira ticket?
05:55 <  technomancy > seangrove: hey, are you still having issues with build speed?
05:55 <  technomancy > we rolled out a bunch of changes recently to speed things up; wondering if you've noticed any difference
05:57 <     sdegutis > oh i saw that on HN
05:58 <         `cbp > sdegutis: you saw what?
06:02 <      TravisD > is the seuqence library similar in spirit to the iterator abstraction in the STL for c++?
06:03 <      TravisD > like, most containers are iterable, let's use that as a unifying interface?
06:04 <       bbloom > TravisD: you mean the seq abstraction in clojure?
06:04 <      TravisD > bbloom: yeah, I guess. The book I'm looking at calls something the "seq library", which I guess is just all the functions for dealing with seqable things
06:04 <       bbloom > TravisD: there's a tiny bit of commonality, but in reality it is muuch much different than the STL iterator idea
06:04 <      TravisD > ah okay
06:05 <       bbloom > TravisD: oh i see you mean on http://clojure.org/sequences
06:05 <       bbloom > TravisD: nobody calls it that :-P
06:05 <       bbloom > that's just a heading in that documentation page
06:06 <      TravisD > bbloom: in the book Programming Clojure they talk about the "seq library". But maybe that's just an informal name they are using
06:06 <       bbloom > TravisD: the major difference between iterators and seqs is that iterators have a much richer network of notions around forwards and backwards, "end" positions, types, etc
06:06 <      TravisD > ah, right
06:06 <       bbloom > TravisD: i suspect that's just the author filling content by reading from the clojure home page :-)
06:07 <       bbloom > TravisD: seqs have basically two operations of interest: first and rest
06:07 <       bbloom > or next, instead of rest, depending on how you look at it
06:07 <       bbloom > iterators themselves are mutable, seqs are not
06:08 <       bbloom > the fact that they help you traverse a sequential abstraction is basically where the similarities end
06:08 <     sdegutis > Iterators rock.
06:08 <     sdegutis > Does Clojure have any?
06:08 <    AeroNotix > sdegutis: persistent data structures
06:08 <    AeroNotix > immutability
06:08 <    AeroNotix > iterators are at odds with those things
06:09 <      TravisD > hm, seems like the two concepts are quite related, no? They both are for traversing collections, with the intention of making it possible to write more general algorithms
06:09 <      TravisD > the details are obviosuly different
06:09 <     sdegutis > AeroNotix: It could use atoms.
06:09 <      amalloy > sdegutis: jillions of them
06:09 <      amalloy > &(.iterator [1 2 3])
06:09 <      lazybot > ⇒ #< clojure.lang.APersistentVector$2@fcf9e1>
06:09 <     sdegutis > amalloy: as a Clojure-level feature
06:09 <         bob2 > that's not really what atoms are for
06:09 <     hiredman > seqs are a functional iteration protocol
06:10 <     sdegutis > Hey now, let's not adopt a "can't do" attitude!
06:10 <     sdegutis > We can do anything we set our minds to! Let's totally make iterators!
06:10 <    turbofail > it's not a "can't do" attitude, it's a "shouldn't do" attitude
06:10 <     hyPiRion > Let's implement goto guys
06:11 <        yedi_ > lol bbloom: i was down with your pseudo troll in the scala thread on HN
06:11 <     hiredman > http://okmij.org/ftp/continuations/
06:11 <         bob2 > come-from
06:11 <     hyPiRion > The return of TAGBODY
06:11 <     sdegutis > hyPiRion: that'd be awesome
06:11 <         bob2 > hyPiRion, (recur)
06:12 <    turbofail > recur is too limited in its confusion-generation capabilities
06:12 <       bbloom > yedi_: using the parent response as a template was very trollish, but it was just too fun
06:12 <         bob2 > haha
06:12 <    turbofail > we need to go further
06:12 <         bob2 > recur to arbitrary points above you in the stack?
06:13 <    turbofail > random points, preferably
06:13 <          qbg > It's called throw :p
06:13 <     hyPiRion > (inc qbg)
06:13 <      lazybot > ⇒ 2
06:14 <     sdegutis > But throw only works if you go backwards in execution. I'd like to go forwards.
06:14 <     sdegutis > I'd like to skip a bunch of steps.
06:14 <          qbg > Exceptions don't bring you backwards in execution
06:14 <          qbg > Only forward :)
06:15 <     sdegutis > Backwards up the stack sir.
06:16 <       bbloom > you guys should totally start where hiredman sent you :-)
06:16 <     sdegutis > You may totally skip some steps, whatever is between the try high-point and its catch.
06:16 <       bbloom > oleg's continuations explorations are super insightful, if you have the patience
07:13 <        whomp > how do i test if a var is an int vs., say, a char?
07:14 <       right1 > (class)
07:14 <         `cbp > or type
07:14 <        whomp > so i'd say, (= (class a) Java.lang.Long) ?
07:15 <         qbg_ > ,[(integer? 5) (char? 5)]
07:15 <   clojurebot > [true false]
07:15 <        whomp > thx :)
07:15 <         qbg_ > YMMV w.r.t. integer?
07:15 <         bob2 > can you make the caller just provide the right thing?
07:16 <     akurilin > So let's say I'm bootstrapping some JS for my web application: is there a clojure library that will easily convert clj datastructures into JS syntax so I can inject it into a template?
07:16 <     akurilin > It's also possible I'm going totally wrong about this.
07:17 <   logic_prog > dnolen_ : ping
07:17 <         `cbp > akurilin: serialize into json?
07:17 <     akurilin > `cbp: oh derp. Ok cheshire it is then.
07:18 <         `cbp > :-P
07:18 <     akurilin > For some reason I totally blanked about that one.
07:18 <         qbg_ > clj->js
07:18 <         `cbp > qbg_: that's clojurescript
07:18 <         qbg_ > sorry, misread :)
07:47 <AmnesiousFune > The first prerelease of Typed Clojure for Light Table is available here: https://github.com/ndr-qef/light-typedclojure
08:21 <   marcopolo` > AmnesiousFunes: kudos!
08:22 <AmnesiousFune > Thanks
08:22 <AmnesiousFune > Side effects: new LT bug confirmed and 2-3 PRs incoming.
08:34 <         dsrx > AmnesiousFunes: just curious, why the paredit dep?
08:35 <AmnesiousFune > dsrx: Annotation formatters require some sexp/cursor manipulation
08:36 <         dsrx > anyone in here using clojurescript to write a chrome extension, spotify application, or anything else that isn't served over http:// (and thus has issues using something like austin or the cljs browser repl)?
08:36 <         dsrx > if so I just released something you might be interested in, ping me
08:37 <         dsrx > AmnesiousFunes: ah, makes sense
08:45 <    donmullen > dsrx: interested in using clojurescript for chrome extension development
08:46 <  technomancy > I wish I could use lisp for extending my browser too
08:46 <  technomancy > I don't use chrome though
08:47 <    sdegutis_ > You can!
08:48 <    sdegutis_ > All we need to do is invent a way less convoluted version of HTML/CSS/JS, and make it run inside a custom VM, and make it easy to write browsers for, and then write a browser for it!
08:48 <    sdegutis_ > Then we'll just add Clojure as a scripting language.
08:48 <  technomancy > no, first you need to reinvent logic gates. the ones we have now are so clunky.
08:48 <    sdegutis_ > Nonsense.
08:48 <  technomancy > while we're at it, maybe we could find a better material than silicon for semiconductors
08:49 <        TimMc > water-based gates are more elegant
08:49 <        TimMc > I have ethical objections to silicon doping.
08:49 <  technomancy > "a less convoluted version of HTML/CSS/JS" -> "Emacs buffers, overlays, and elisp"
08:50 <  technomancy > "make it run inside a custom VM" -> check
08:50 <  technomancy > "make it easy to write browsers for" -> check
08:50 <  technomancy > "write a browser for it" -> check
08:50 <  technomancy > ok, that was fun
08:51 <    sdegutis_ > technomancy: how is that last one a check?
08:51 <    sdegutis_ > How is it easy to write a custom browser w/ the elisp vm?
08:51 <  technomancy > the Info reader is a hyperlinked browser
08:51 <    sdegutis_ > Oh, right.
08:51 <    sdegutis_ > I was thinking something with pixel-based margins.
08:51 <    sdegutis_ > Yes I know, heresy etc.
08:51 <  technomancy > pixels are so gauché
08:52 <  technomancy > if you're going to start from scratch at least use voxels
08:52 <  technomancy > there's also http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/lisp/net/eww.el
09:05 <      TravisD > Is the list of libraries in a call to (use) is quoted because the symbols it contains may not be defined?
09:06 <     sdegutis > More like because you don't want to access whatever they may point to.
09:06 <     sdegutis > ,(def clojure.core 3)
09:06 <   clojurebot > #'sandbox/clojure.core
09:06 <     sdegutis > ,(inc clojure.core)
09:06 <   clojurebot > #<CompilerException java.lang.ClassNotFoundException: clojure.core, compiling:(NO_SOURCE_PATH:0:0)>
09:06 <     sdegutis > Uhh.
09:07 <      TravisD > Yeah, I guess you don't want the symbols to be evaluated
09:08 <  gfredericks > TravisD: notably even after (use ...) finishes those symbols still aren't defined
09:08 <  gfredericks > ,clojure.core
09:08 <   clojurebot > #<CompilerException java.lang.ClassNotFoundException: clojure.core, compiling:(NO_SOURCE_PATH:0:0)>
09:09 <      TravisD > Ah, cool
09:09 <      TravisD > an alternative would be to use strings to name the libraries?
09:10 <  gfredericks > ,(require "clojure.string")
09:10 <   clojurebot > #<ExceptionInfo clojure.lang.ExceptionInfo: Don't know how to create ISeq from: java.lang.Character {:instance \l}>
09:10 <  gfredericks > require certainly could have been written that way
09:10 <      TravisD > oh, I mean, that would have been an alternative way to do it
09:11 <  gfredericks > namespaces in general are and endless source of n00b confusion
09:11 <      TravisD > hehe
09:11 <      TravisD > I haven't looked at them too closely yet, but some examples in this book were a bit confusing
09:11 <      TravisD > it's one of the only place I've seen quoted vectors
09:11 <  gfredericks > they're not all that complicated, there are just a few things that aren't what you first expect
09:12 <  gfredericks > quoted vectors are just an alternative to quoting the things inside the vector instead
09:12 <  gfredericks > e.g. '[foo bar] vs ['foo 'bar]
09:13 <      TravisD > and you only need to quote it so that the symbols aren't evaluated
09:13 <  gfredericks > exactly
09:15 <      TravisD > cool, thanks
09:16 <        muhoo > how do i rebind a private function inside a ns i don't control?
09:17 <         bob2 > are you sure you need to do that?
09:19 <         dsrx > donmullen: http://github.com/tomjakubowski/weasel -- provides a websocket transport for the clojurescript repl, as suggested by dnolen in this thread https://groups.google.com/forum/#!topic/clojure/lC8me2Gx_B4
09:22 <         dsrx > donmullen: I've not used CLJS for chrome extension development, but I faced a similar problem as the person in that thread connecting a CLJS repl to a spotify application (which is just a web page in an embedded chromium, served over a proprietary sp:// protocol)
09:31 <      dnolen_ > dsrx: donmullen: you all should ping ericnormand when he's around, he's done quite a bit of Chrome Extension ClojureScript dev
09:34 <         dsrx > dnolen_: good to know, thanks
09:41 <       echosa > Hey, #clojure. I'm having issues getting a number to always be two decimals places. Not just *display* two decimal places, but actually *be* two decimal places. I've been wroking with (with-precision) and a BigDecimal number, but I just can't quite get it right.
09:43 <       echosa > ,(with-precision 2 (* 100M (/ 3 72)))
09:43 <   clojurebot > 4.2M
09:43 <       echosa > ,(with-precision 3 (* 100M (/ 3 72)))
09:43 <   clojurebot > 4.17M
09:43 <       echosa > ,(with-precision 3 (* 100M (/ 40 72)))
09:43 <   clojurebot > 55.6M
09:45 <     hiredman > decimal places are an artifact of notation, and hence display
09:45 <     hiredman > you'll have to be clearer about what you want
09:46 <       echosa > except with-precision is supposed to round them off, but I'm having problems getting it to always have 2 decimal places. I'm showing percentage, so I can assume that (until I hit 100), I'll only ever have 1 or 2 digits before the decimal point.
09:46 <       echosa > So with 1 digit, I need a precision of 3 (1.23) while with 2 digits, I need a precision of 4 (12.34) it would seem.
09:47 <         bob2 > so you want it to work like money?
09:47 <       echosa > ,(with-precision 3 (* 100M (/ 1 72)))
09:47 <   clojurebot > 1.39M
09:47 <     hiredman > echosa: it certainly sounds like you are concerned with display to me
09:48 <     hiredman > in which case you want format
09:48 <       echosa > bob2: I suppose that's oen way to look at it.
09:49 <       echosa > hiredman: ok, suppose I'm not and treat this as an excersize. Take display out of it. I want the function return value to be the correct value. I can't see whre I'm goign wrong.
09:49 <       echosa > Through everythign I'm sending to clojurebot seems to be working-ish
09:49 <       echosa > I'll check my code for a fifth time
09:50 <  systemfault > Is the source for clojurebot somewhere?
09:50 <     hiredman > echosa: in what sense is it wrong?
09:50 <  systemfault > A IRC bot is usually the first thing I try to write when learning a language :)
09:50 <        muhoo > systemfault: irclj
09:51 <        muhoo > specifically https://github.com/Raynes/irclj
09:51 <     hiredman > clojurebot is perhaps the definition of a legacy software system
09:51 <     hiredman > ~clojurebot is perhaps the definition of a legacy software system
09:51 <   clojurebot > Alles klar
09:51 <  systemfault > Thank you
09:51 <        muhoo > i though clojurebot had a poetic soul
09:51 <       echosa > hiredman: I'm getting something reproducable. one moment
09:52 <  systemfault > Is clojurebot bad software or what? :P
09:53 <        muhoo > systemfault: read the source. it's got... quirks
09:53 <  systemfault > Now I'm scared of looking at its code because I don't want to learn bad pattern.s
09:53 <         dsrx > there's also lazybot
09:53 <        muhoo > systemfault: id suggest looking at irclj, and IIRC lazybot is built on it
09:53 <         dsrx > I can't speak for the relative quality of either of those projects :D
09:53 <  systemfault > Ok :)
09:54 <        muhoo > ok, i asked this, i think. i need to rebind clojure.tools.trace/tracer to a function, globally, that i define (hint: it'll use timbre to log the trace). but i don't reemember how to monkey around with private vars inside someone else's ns
09:55 <        muhoo > i'm pretty sure it's possible though.
09:55  *       muhoo looks at the source code of dire for clues
09:56 <     hiredman > ~clojurebot
09:56 <   clojurebot > clojurebot has a lot of features, most of which are broken
09:57 <     hiredman > ~botsnack
09:57 <   clojurebot > thanks; that was delicious. (nom nom nom)
09:57 <        muhoo > aw, why y'all hatin' on clojurebot.
09:57 <        muhoo > it's just different.
09:57 <  systemfault > clojurebot should be a synonym for awesome :'(
09:58 <        muhoo > don't listen, clojurebot. you're ok at what you do and we all appreciate you despite your issues.
09:59 <     hiredman > ~awesome
09:59 <   clojurebot > your assessment smacks of bias, thus undermining your credibility further. (http://wondermark.com/560/)
10:00 <       echosa > hiredman: I think it's a logic problem. Lack of sleep. :-/
10:00 <  systemfault > Oh god... nobody cares about the bot :P It hasn't been touched for 5 months now :P
10:03 <     hiredman > we have an instance of clojurebot running in our work irc channel, if you ask it about itsself it claims to be powered by neglect
10:04 <  systemfault > That's what I was saying... the source code of the bot looks neglect'ed
10:05 <     hiredman > it is mature software
10:05 <      amalloy > systemfault: what's to change? clojurebot works
10:05 <     hiredman > clojurebot: amalloy |claims| clojurebot works
10:05 <   clojurebot > In Ordnung
10:06 <      amalloy > that's what i get for skimping on the "mostly"
10:06 <  systemfault > amalloy: Just saying that nobody has committed to it in half a year :P Sorry
10:06 <  systemfault > And it's saying that it's a WIP...
10:14 <     voldyman > AeroNotix: i swtchied from jetty-adapter to http-kit and sqlite to mysql 500 concurrent connections have negligible overhead.
10:20 <       echosa > it's weird typing "true" instead of "t"
10:20 <        muhoo > hmm, i'm not seeing any clues in dire.  and google is failing me.
10:21  *       muhoo goes off to look in the source to leiningen
10:22 <        muhoo > aha, robert.hooke looks lively
10:23  *       muhoo and hones in on alter-var-root, at last. doh.
10:23 <  systemfault > Perhaps I'm just saying this because I'm a noob... but I love clojurebot's code :/
10:24 <        muhoo > it's got some funny stuff in it. and some really esoteric interesting stuff IIRC
10:35 <        muhoo > delightful! https://www.refheap.com/41829
10:44 <      dnolen_ > pushing out Om 0.5.0-rc1 so people can test against React 0.9.0-rc1
10:49 <      Tolstoy > dnolen_: Noticed that IWillUnmount isn't on the documentation page. File an issue?
10:49 <      dnolen_ > Tolstoy: better, feel free to add it :)
10:50 <     noprompt > dnolen_: whoops, sorry i pinged you on twitter. thought you were away.
10:51 <     noprompt > dnolen_: wrt using om.core/value
10:52 <      dnolen_ > noprompt: it's hooking a bit into implementation details but I don't forsee changes there in the near future
10:52 <      dnolen_ > noprompt: one thing to be concerned about is that om.core/value will return a "cached" value
10:52 <     noprompt > (vector? data) doesn't work properly but (vector? (om.core/value data)) works fine
10:52 <      dnolen_ > which may or may not reflect the application state
10:52 <     noprompt > ah ok
10:53 <      dnolen_ > noprompt: yes because we wrap IIndexed types, so it won't be a vector anymore, just IIndexed
10:53 <      dnolen_ > noprompt: that might change in the future, but I haven't felt a need to more specific yet
10:53 <     noprompt > dnolen_: so how would you suggest going about building a component based inspector?
10:54 <      dnolen_ > noprompt: I haven't put much thought into it honestly, though I'm pretty interested in that.
10:54 <      dnolen_ > noprompt: kovasb has been doing some interesting work here as well
10:54 <      dnolen_ > noprompt: you want to be able to inspect ClojureScript values right?
10:54 <     noprompt > dnolen_: awesome.
10:55 <     noprompt > dnolen_: right. and i need to known the type before i make a decision about class names, rendering etc.
10:55 <      dnolen_ > noprompt: honestly the best thing would be to really examine how Om works
10:56 <      dnolen_ > noprompt: and then tell me what you think you need that isn't already there
10:56 <      dnolen_ > and we can discuss
10:56 <     noprompt > dnolen_:  sure. that's how i came across om.core/value. i'm starting to dig through the source more.
10:57 <     noprompt > dnolen_: we successfully built a decent single page client side app with om/secretary at work.
10:57 <      dnolen_ > noprompt: awesome :)
10:57 <     noprompt > dnolen_: there's a template we started working on but haven't finished it yet.
11:01 <      dnolen_ > noprompt: kovasb is really working on exactly the same thing - ClojureScript value inspector
11:01 <      dnolen_ > I would love to see this as a generic reusable component
11:01 <      dnolen_ > super useful for everyone.
11:04 <     noprompt > dnolen_: i've got most of the pprint part working; just wanted to know what would be the safest route to ask vector? map? etc w/ cursors.
11:05 <     noprompt > dnolen_: this morning i noticed om.core/read is no longer a part of the API.
11:05 <      dnolen_ > noprompt: yep it's been gone for a while now
11:05 <      dnolen_ > noprompt: no longer needed
11:05 <      dnolen_ > noprompt: you can just deref
11:06 <      dnolen_ > noprompt: to deal w/ vectors you need to wrap in VectorCursor which of course I haven't implemented.
11:06 <      dnolen_ > the hook is -to-cursor
11:07 <     noprompt > dnolen_: but i'd have to implement all the protocols right?
11:07 <      dnolen_ > VectorCursor would need to support all the obvious ops, and implement the IVector marker protocol
11:07 <      dnolen_ > noprompt: yes you would.
11:07 <      dnolen_ > noprompt: but it's just boilerplate
11:08 <      dnolen_ > noprompt: another way is perhaps to do this via metadata?
11:08 <       mgaare > is anything going on with ritz? plans to get it up to date with the current state of things in emacs, cider, etc?
11:12 <     noprompt >  dnolen_: doesn't look like meta did it.
11:12 <     noprompt > dnolen_: i guess i could take a swing at the protocl implementation.
11:12 <     noprompt > dnolen_: it doesn't look to big. just wordy.
11:13 <      dnolen_ > noprompt: oh, right ... you can check type of value to if that's what you were thinking about
11:13 <      dnolen_ > noprompt: implementation detail for you that you can switch later
11:14 <     noprompt > dnolen_: yeah. basically that's all i'm doing is a cond with (type-fn? (value data))
11:14 <      dnolen_ > noprompt: ok that's fine for now, and you can do something cleaner later I think.
11:15 <     noprompt > dnolen_: heh, well now i'm looking at the protocol thing. :)
11:25 <     akurilin > Question: ok so let's say you use Migratus for DDL migrations. What do you use for when you also need to "migrate" the data itself as part of that schema change? For example, say you're splitting a table into two: you'd make the new table, move the data from the old one, and then apply schema changes to the old table, all within one transaction.l
11:26 <     akurilin > You can do it in Migratus as long as you can do the move 100% in sql statements, but it'd be cool to be able to plugin some jdbc/korma logic in there too.
11:26 <   logic_prog > is there a way to define a function that is called every time a namesapce is loaded?
11:26 <   logic_prog > I wnat my own tool to *sanity-check/lint* every namesapce that is loaded
11:26 <     akurilin > Right now I essentially do a partial migration, run a task from clojure, then complete the migration.
11:29 <     noprompt > ,(ns foo (:println "foo"))
11:29 <     noprompt >  
11:29 <   clojurebot > foo\n
11:29 <     noprompt > logic_prog: ^
11:29 <   logic_prog > noprompt ... hmm
11:29 <     noprompt > logic_prog: dunno, if that helps but when you load the file that code will run.
11:29 <   logic_prog > noprompt: my question was poorly phrased
11:29 <   logic_prog > noprompt: let me write it up, spam the clojure list, and point you to the clojure list
11:31 <     noprompt > how did i not know about specify?
11:32 <   logic_prog > noprompt: https://groups.google.com/forum/#!topic/clojure/wx-naQUqi4o
11:32 <   logic_prog > noprompt: is specify a clojure function?
11:33 <   logic_prog > noprompt: I'm not seeing it here: http://clojuredocs.org/search?x=0&y=0&q=specify
11:33 <     noprompt > looks like specify and specify! are clojurescript fns
11:33 <     noprompt > sorry, macros
11:35 <     noprompt > logic_prog: honestly, and this could be the wrong idea, but you might need a macro for that.
11:35 <   logic_prog > noprompt: I agree, I think macros = wrong idea. :-)
11:36 <   logic_prog > I don't want to do things like :my-require ...
11:36 <   logic_prog > or hack ns
11:36 <     noprompt > logic_prog: for instance (defmacro slurp [file] `(clojure.core/slurp ~file)) will work in clojurescript but only at compile-time.
11:36 <   logic_prog > worse yet, it won't be called every time a clj file is reloaded
11:36 <     noprompt > whoops drop the ` ~
11:38 <     noprompt > logic_prog: that would at least give you the ability to read the file so it would be available in cljs land as a string.
11:39 <     noprompt > logic_prog: in this case i'm not sure i would totally agree that macros are the wrong way to go because you may actually need *clojure* to do what you want.
11:44 <   logic_prog > (inc noprompt) ;; for effort :-)
11:44 <      lazybot > ⇒ 1
11:46  *        dsrx ponders the dynamically bound var *clojure*
11:47 <     sdegutis > ,*clojure*
11:47 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: *clojure* in this context, compiling:(NO_SOURCE_PATH:0:0)>
11:47 <     sdegutis > Nope.
11:48 <     noprompt > guess my points got reset. :/
11:51 <     sdegutis > $karma noprompt
11:51 <      lazybot > noprompt has karma 5.
11:51 <     sdegutis > noprompt: it's just an eager regex
11:51 <     sdegutis > (inc noprompt) one more paren for good measure)
11:51 <      lazybot > ⇒ 1
11:51 <     sdegutis > (inc noprompt) and another)
11:51 <      lazybot > ⇒ 1
11:51 <     sdegutis > :)
11:53 <     noprompt > logic_prog: here's the gist (ns foo.core
11:53 <     noprompt >   (:refer-clojure :exclude [slurp]))
11:53 <     noprompt > (defmacro slurp [file]
11:53 <     noprompt >   (clojure.core/slurp file))
11:53 <     noprompt > ;; In CLJS
11:53 <     noprompt > (ns bar.core
11:53 <     noprompt >   (:require [foo.core :include-macros true :refer [slurp]]))
11:53 <     noprompt > ;; This is possible because we can evaluate *Clojure* code at compile time.
11:53 <     noprompt > (def project-clj
11:53 <     noprompt >   (slurp "project.clj"))
11:53 <     noprompt > well shit. i meant to give you a link. ;_;
11:53 <     noprompt > https://gist.github.com/noprompt/9086232
11:54 <     noprompt > i'll post to the ML too for good measure. ;-_
11:54 <        _eric > does clojure have a string quoting notation like ruby's %{} or scala's """ """?
11:54 <        _eric > (to make it so you don't have to escape a double quote)
11:54 <   logic_prog > spammer!! :-)
11:54 <   logic_prog > (inc noprompt)
11:54 <      lazybot > ⇒ 6
11:55 <     noprompt > _eric: no
11:55 <        _eric > bummer
11:55 <     noprompt > _eric: you've got str though
11:55 <     noprompt > ;)
11:55 <        _eric > doesn't help me with \" though
11:56 <     noprompt > _eric: youre editor doesn't help you w/ that?
11:56 <        _eric > what do you mean by help?
11:56 <     noprompt > dammit i cannot type. :(
11:56 <     noprompt > _eric: ie. "foo | bar" (type "" at |) => "foo \" bar"
11:57 <     noprompt > the editor doesn't automatically escape it for you?
11:57 <        _eric > I guess not
11:57 <     noprompt > _eric: hmm. are you using paredit?
11:57 <        _eric > intellij/cursive is failing me
11:57 <        _eric > I guess
11:58 <     noprompt > _eric: ah, i think there's a paredit mode for it. i've used it just a tincy bit when pairing w/ folks but i don't recall if it does *that* automatically. ;_;
11:59 <        _eric > I have to say I can't understand how to use cursive's structural editing mode
12:00 <     noprompt > _eric: no worries, i usually end up breaking everything all together when i try to drive on it. i end up letting my pair just take over. ha!
12:00 <        _eric > hah
12:04 <     noprompt > dnolen_: did you see that nasty slurp hack? :-P
12:05 <     noprompt > ha, that's pretty neat. i should find some way to abuse that...
--- Log closed Wed Feb 19 12:22:55 2014
--- Log opened Wed Feb 19 12:23:16 2014
12:23 -!- Irssi: #clojure: Total of 728 nicks [1 ops, 0 halfops, 0 voices, 727 normal]
12:23 !hobana.freenode.net [freenode-info] if you're at a conference and other people are having trouble connecting, please mention it to staff: http://freenode.net/faq.shtml#gettinghelp
12:23 -!- Irssi: Join to #clojure was synced in 24 secs
12:26 <       echosa > 67% code coverage... not bad
12:34 <       jjttjj > anyone messing with game developement in clojurescript lately?
13:00 <   alandipert > ztellman, https://github.com/alandipert/hyperturbo#examples
13:00 <     ztellman > alandipert: wat
13:00 <   alandipert > ztellman, i tried to use proteus for the vars but i had some issues
13:01 <     ztellman > oh yeah? anything I can help with?
13:01 <   alandipert > digging around a little, not sure yet. does proteus walk fn*'s?
13:02 <     ztellman > only if you mark them as :local
13:02 <     ztellman > otherwise it doesn't let the container escape the local context
13:02 <     ztellman > otherwise it's anarchy
13:02 <     ztellman > you can have race conditions, dogs lying with cats, etc
13:03 <   alandipert > ok sweet, :local is exactly what i need
13:03 <     ztellman > readme explains it in more depth: https://github.com/ztellman/proteus
13:03 <   alandipert > i think it makes a lot of sense to use proteus with gotos
13:03 <     ztellman > sweet troll library, btw
13:04 <     ztellman > haha, I should reuse the core.async inversion of control code to implement gotos in clojure
13:04 <     ztellman > my new goal for 2014
13:04 <     noprompt > lol
13:04 <     noprompt > haha
13:04 <     noprompt > alandipert: this is rad.
13:04 <     ztellman > core.goto
13:04 <     noprompt > i need to stop doing serious shit.
13:04 < ponyprincess > I'm just getting into clojure, any good beginner resources?
13:05 <     noprompt > like generate haikus that pass the turing test.
13:05 <     noprompt > or rather the ginsberg test.
13:05 <     noprompt > as in, alan ginsberg.
13:05 <     noprompt > the alan ginsber test.
13:06 <     noprompt > ponyprincess: theres http://clojure-doc.org/
13:27 <         dsrx > there's also http://www.braveclojure.com/
13:30 <         dsrx > ,';
13:30 <   clojurebot > #<RuntimeException java.lang.RuntimeException: EOF while reading>
13:37 <    ponyprin_ > What's good noob clojure?
13:38 <         dsrx > ponyprin_: http://clojure-doc.org or http://www.braveclojure.com
13:39 <      amalloy > www.4clojure.com
13:39 <    ponyprin_ > woah neat
13:40 <    ponyprin_ > I want to be brave and true.
13:51 <  ddellacosta > ponyprin_: +1 on 4clojure.com.  I learned a lot by going through that at the beginning.  I should get back into it actually...still haven't gotten through all of it.
13:59 <    ponyprin_ > I went to a haskell meetup and they wanted me to join a cabal so I decided to learn clojure instead.
14:06 <      tuyenhm > Guys, good morning from russia
14:07 <        xuser > ponyprin_: but haskell is the ultimate lisp
14:10 <        Platz > what would joining a cabal entail?
14:10 <        Platz > is it like a fight club
14:14 <     minikomi > hiya
14:15 <       felher > Hey folks. :) I am currently reading 'Programming clojure' and it's written there that "(next seomthing)" ist equivalent to "(seq (rest something))". But it seems to me that "(rest something)" alraedy returns a seq, even if fed an array. Did I miss something, or ist "(seq (rest something))" just equivalent to "(rest something)"?
14:16 <     hiredman > ,(rest (lazy-seq ()))
14:16 <   clojurebot > ()
14:16 <     hiredman > ,(seq (rest (lazy-seq ())))
14:16 <   clojurebot > nil
14:16 <       felher > hiredman: ah, got it, thanks :)
15:14 <       quizdr > you guys working professionally with clojure (or anyone who could guess a good answer for this), how many lines of good clojure code do you strive to write on an average day?
15:14 <       quizdr > if I can write 100 effective lines, i consider that a good day, but i'm just a noob
15:28 <        locks > quizdr: I don’t, but that sounds like the wrong thing to worry about
15:28 <        locks > if those 100 lines are solving business problems I’d say that’s pretty good
15:29 <      nathan7 > on a good day in a pleasant language, I delete a hundred lines of code
15:29 <        locks > one year into this project I’ve deleted more than I’ve added
15:29 <     supersym > delete 1 char in the 'system' I work in and it dies
15:30 <      nathan7 > So, I'm trying to get ClojureScript stuff going
15:30 <      nathan7 > and I'm quite clueless about Leiningen and real-world Clojure (ie outside a REPL)
15:31 <      nathan7 > and… even trying to use the lein-cljsbuild example breaks
15:31 <      nathan7 >  ~/code/lein-cljsbuild/example-projects/simple ⮀ ⭠ master ⮀ lein cljsbuild once
15:31 <      nathan7 > Compiling ClojureScript.
15:31 <      nathan7 > java.lang.IllegalArgumentException: Duplicate key: org.clojure/clojure
15:31 <      nathan7 > which seems to be some kind of dep conflict
15:31 <      nathan7 > I have no idea how to debug a dep conflict like this, however
15:33 <     supersym > nathan7: https://github.com/magomimmo/modern-cljs
15:34 <     supersym > I believe some prefer to use that one for reasons I'm not sure but seems a lot was outdated on the web
15:34 <      nathan7 > Yeah
15:34 <      nathan7 > I can't find a lot of information at all
15:34 <     supersym > yeah I dont do CLJS besides a little in pedestal
15:36 <      nathan7 > I come from node-land, but I'm quite interested in bridging the client/server gap with a more powerful language
15:36 <      nathan7 > *** Warning: This project requires Leiningen 2.2.0, but you have 2.0.0 ***
15:36 <      nathan7 > …that may explain some things
15:38 <       quizdr > locks valid point just curious how much code typically is written in lisp on a given day; my output is much smaller, but i feel the end result is about the same as writing many more lines of code in other languages.
15:38 <     supersym > nathan7: yeah thats how I came here too
15:39 <      amalloy > quizdr: i don't think i've had many days of producing a hundred lines of clojure. more time thinking, condensing, planning, reducing
15:39 <     supersym > you'll probably never go back
15:39 <      nathan7 > supersym: It worries me
15:39 <      nathan7 > supersym: I like JS a lot
15:39 <     supersym > I was here for some temporary 'bridging' too :P
15:39 <        locks > quizdr: from my experience with clojure I’ve come to a similar conclusion
15:39 <     supersym > yeah well lucky for you then, stuff doesn't go *that* fast
15:40 <     supersym > that is with webframeworks and clj
15:41 <     supersym > then again, that might be exactly the problem I did have with Node.... every man and his dog poluting the ecosphere with projects :P
15:42 <     supersym > now a lot of people who suck at JS can write crappy code for the server too... yay
15:42 <      nathan7 > My JS leans strongly towards the functional
15:44 <       quizdr > amalloy any idea the lisp background of a lot of the major contributors to 4clojure? you think most are coming from years of lisp exposure?
15:44 <       quizdr > amalloy or how about yourself?
15:44 <      amalloy > no way
15:45 <      amalloy > i'm pretty sure clojure was the first serious lisp exposure any of the main contributors had
15:45 <       quizdr > smart guys, getting the idioms mastered so quickly. i see the answers of others at 4clojure and am always impressed at the creative and elegant solutions they come up with
15:45 <      amalloy > i'd been doing clojure for...what, just under a year? when i did most of my work on 4clojure
15:46 <      amalloy > wait, are you talking about the people who solve problems? i thought you meant writing 4clojure
15:46 <       quizdr > both, actually.
15:46 <      amalloy > i don't know about the history of people who answer the questions
15:47 <       quizdr > i've been at clojure for about 2 months and am making progress but when you see guys offering a 5-character solution on 4clojure where the average solution is like 30 characters, it is impressive
15:48 <      hhenkel > Hi all, I'm currently stuck in something completly simple...I got a multiple similar json data and now I need to create a new list with only part of those values.
15:49 <      hhenkel > What is the best way to do this?
15:53 <      hhenkel > I'm iterating over the data and now I'm stuck in appending those values to a list....
15:59 <     supersym > hhenkel: you are using cheshire?
16:22 <      hhenkel > supersym: yes
16:25 <      hhenkel > supersym: but the data is allready transformed to clojure datastructures so it doesn't matter as far as I know.
16:30 <     supersym > no thats why I asked. It kinda depends on your returned types
16:31 <         clgv > hhenkel: do you want something like `select-keys`?
16:32 <         clgv > ,(map #(select-keys % [:a :b]) [{:a 1 :b 2 :c 3} {:a 4 :c 5}])
16:32 <   clojurebot > ({:b 2, :a 1} {:a 4})
16:33 <      hhenkel > clgv: Yes, that looks like what I'm looking for...first I wasn't sure but with your example it looks good.
16:33 <     supersym > right... or dissoc
16:33 <      hhenkel > I'll give it a shot.
16:34 <     supersym > ,(dissoc {:a 1 :b 2 :c 3} :c :b)
16:34 <   clojurebot > {:a 1}
16:34 <     supersym > the other way around ;)
16:35 <         clgv > probably the "positive way" is the better documenting one here ;)
16:35 <     supersym > surely
16:36 <         clgv > but a while ago someone asked for the inverse of select-keys ;)
16:37 <         clgv > *opposite
16:54 <      hhenkel > clgv: I'm still struggling with this: https://www.refheap.com/41925
16:54 <      hhenkel > supersym: ^^
17:00 <     rurumate > hello, I've started using liberator and noticed that ring's :auto-reload option doesn't work. Is there a workaround or will I have to restart jetty after each change?
17:00 <         clgv > hhenkel: well you first have to get down to the level where you have the list of requests
17:02 <         clgv > hhenkel: (map #(select-keys % [:request]) (->> data vals first)) should work for the displayed data
17:02 <         clgv > hhenkel: but probably in that case you just want the content of the request
17:02 <         clgv > hhenkel: (map :request (->> data vals first))
17:03 <         clgv > well if we are threading already then: (->> data vals first (map :request))
17:18 <      hhenkel > clgv: I get an error regarding data...
17:19 <         clgv > hhenkel: "data" is the binding or var to the data you displayed in your gist
17:20 <      hhenkel > clgv: okay...
17:21 <      hhenkel > clgv: with the pure data I get: clojure.lang.Keyword cannot be cast to java.util.Map$Entry
17:22 <      hhenkel > clgv: with (val mydata) used I get: clojure.lang.PersistentArrayMap cannot be cast to java.util.Map$Entry
17:23 <         clgv > ,(->> {:30000 '({:request 1, :values 2}, {:request 2, :values 3})} vals first (map :request))
17:23 <   clojurebot > (1 2)
17:24 <         clgv > hhenkel: when you one of the exceptions you mentioned than the data layout is different from the one you provided in your gist
17:25 <Anderkent]awa > clgv: hhenkel: no, I think he's using 'val' instead of 'vals'
17:25 <Anderkent]awa > ,(doc val)
17:25 <   clojurebot > "([e]); Returns the value in the map entry."
17:25 <Anderkent]awa > ,(doc vals)
17:25 <   clojurebot > "([map]); Returns a sequence of the map's values."
17:26 <         clgv > hhenkel: the key idea here is (1) extract the list where the maps with the :request are contained (2) map over that list to extract the :request data
17:26 <         clgv > you can build up (1) incrementally on the REPL
17:28 <      hhenkel > clgv: I updated https://www.refheap.com/41925
17:29 <      hhenkel > clgv: It should now be more clear what the inital data is...as the data before was only the part I'm interested in.
17:50 <  ddellacosta > what do I need to have configured to ensure my ClojureScript macros (with same namespace, and file w/.clj extension) are picked up and available to my CLJS?
18:05 <          lvh > Hi
18:05 <          lvh > So I hear that clojure.contrib isn't a thing anymore? How do I get the << strint macro defined here: http://clojure.github.io/clojure-contrib/strint-api.html
18:05 <          lvh > maybe I am just confused :)
18:09 <      arcatan > yeah, the monolithic clojure-contrib isn't maintained anymore. i don't know if strint was migrated anywhere, though.
18:09 <  ddellacosta > lvh: http://dev.clojure.org/display/community/Where+Did+Clojure.Contrib+Go
18:10 <  ddellacosta > clojure.contrib.strint — Migrated to clojure.core.incubator - lead Rich Hickey. Status: latest build status, latest release on Maven, report bugs.
18:13 <          lvh > ddellacosta: Thanks!
18:14 <  ddellacosta > lvh: np
18:32 <         clgv > lvh: I think clojure.core.incubator has string interpolation
18:32 <         clgv > oh right. as above stated ;)
18:34 <        _bart > Hi
18:34 <        _bart > I' getting "Unable to resolve symbol: mk-pool", anything I'm missing?
18:37 <        _bart > I included overtone.live and overtone.live and overtone.inst.piano
18:37 <        _bart > which means that overtone.at-at is also already included I think (I'm not allowed to add it with (use 'overtone.at-at))
18:37 <          lvh > How do I chain seqs ([:a :b :c], [:d :e :f]) into one seq :a :b :c :d :e :f
18:37 <        _bart > because that creates an IllegalStateException interspaced already refers to: #'overtone.live/interspaced
18:38 <          lvh > I think flatten does that, but that seems kind of elephant-gunny.
18:38 <          lvh > concat!
18:38 <        _bart > lvh yeah concat
18:38 <      hhenkel > clgv: Had you time to have a look at the refheap stuff? I guess my problem once more is based on the interating.
18:38 <        _bart > (lvh, I usually check http://adambard.com/blog/clojure-in-15-minutes/ )
18:45 <         clgv > hhenkel: well, as hinted before. extract the list and map over it
18:53 <      hhenkel > clgv: Currently I'm failing to get your example working on the repl... :(
18:53 <      hhenkel > ,(->> {:30000 '({:request 1, :values 2}, {:request 2, :values 3})} vals first (map :request))
18:53 <   clojurebot > (1 2)
18:54 <      hhenkel > Same thing on the repl gives me: RuntimeException EOF while reading, starting at line 1  clojure.lang.Util.runtimeException (Util.java:219)
18:56 <      hhenkel > clgv: Full error on the repl: https://www.refheap.com/41964
18:58 <         clgv > hhenkel: thats because of a different data structure. in the example above there is one map whose only value contains the list of requests
18:59 <         clgv > oh you mean that example.
18:59 <      hhenkel > clgv: yes, the example you provided.
19:00 <         clgv > you probably have some copy&paste error there
19:00 <         clgv > since you see that it works with clojurebot ;)
19:09 <      hhenkel > clgv: nope, it's not a c&p problem...seems like it is something within my project resulting in problems.
19:12 <         clgv > hhenkel: try it on a fresh repl. you'll see it works there as well as in clojurebot
19:12 <      hhenkel > clgv: Yes, allready did that...currently trying to figure out what's wrong with my lein project.
19:13 <          lvh > So, I did added [:require [clojure.core.incubator :refer [<<]]] to my ns; but it doesn't work
19:14 <          lvh > I get java.lang.IllegalAccessError: << does not exist
19:16 <      hhenkel > clgv: I just created a complete new lein project, started the repl and I fail with that code...can you confirm that?
19:16 <      hhenkel > clgv: With a native clojure repl session your code works for me.
19:21 <          lvh > Can I require names from other test source files in a test?
19:27 <      hhenkel > clgv: looks like there is an issue with numbers as keywords when using leiningen?
19:30 <         dsrx > is it intended right now that js->cljs's keywordize-keys option does not apply recursively?
19:31 <         dsrx > er, js->clj
19:31 <      hhenkel > clgv: https://www.refheap.com/41965 => my test cases that seem to indicat a problem with leiningen.
19:31 <          lvh > is it normal that I can't destructure a #{:a :b} as [one two]?
19:35 <CookedGryphon > lvh: vector destructuring like that relies on nth
19:35 <CookedGryphon > sets have no order so nth doesn't make sense
19:35 <          lvh > CookedGryphon: That's how I'm interpreting the error message; but I don't care about order
19:36 <          lvh > I guess I should throw the set through seq first?
19:36 <         dsrx > what would you expect 'one two' to be bound to?
19:36 <         dsrx > er one and two
19:38 <          lvh > dsrx: the set has two elements; I would expect either element to be bound to one, and the other element to be bound to two.
19:38 <         clgv > hhenkel: hmm weird. in a "lein repl" I have the same problem. but not in counterclockwise....
19:40 <         dsrx > ,(let [[x y] (seq #{1 2})] (+ x y))
19:40 <   clojurebot > 3
19:40 <         clgv > hhenkel: it is the keyword starting with a digit in that case
19:41 <      hhenkel > clgv: yes, had an issue with that in my json config data and had to change that to "30000": to get it going...
19:42 <      hhenkel > clgv: It's kind of strange as it works in a pure repl.
19:42 <         clgv > hhenkel: it's either repl-y or leiningen
19:43 <      hhenkel > clgv: I'm currently thinking about my options - maybe I can fill up the data differently?
19:43 <         clgv > hhenkel: oh. replace the quoted list with a vector then it works
19:43 <         clgv > (->> {:30000 [{:request 1, :values 2}, {:request 2, :values 3}]} vals first (map :request))
19:43 <         clgv > ,(->> {:30000 [{:request 1, :values 2}, {:request 2, :values 3}]} vals first (map :request))
19:43 <   clojurebot > (1 2)
19:44 <         clgv > so it is definitely some reader (or eval) bug in leiningen or repl-y
19:46 <      hhenkel > clgv: hmm, the datastructure I get from parsing yaml (not json as I wrote before) - not sure if I'm able to change the behavior which datastructures are used.
19:47 <      hhenkel > clgv: Also good thing is, that it seems like it does not matter when used with lein run.
19:47 <    Anderkent > hhenkel: clgv: reply bug; lein run -m clojure.main works, lein run -m reply.main doesn't
19:49 <      hhenkel > Anderkent: okay...good to know that I'm not completly dumbthen.... ;)
19:51 <    Anderkent > one of you want to raise the ticket or should I?
19:52 <         clgv > Anderkent: go ahead
19:54 <      jonasen > I'm trying to use core.async pub/sub but I get "Uncaught Error: No protocol method Mux.muxch* defined for type null" if I have a topic that no subs are registered for. Is this expected? I'm probably missing something since I don't fully understand this stuff yet.
19:54 <         dsrx > blehh
19:54 <CookedGryphon > jonasen: refheap?
19:55 <CookedGryphon > sounds like your arguments are just in the wrong order or something and you're passing in nil instead of a channel somewhere
19:55 <      jonasen > I'll try to come up with a minimal example
20:01 <CookedGryphon > lvh: what happens if you pass in a bigger set though? You get two sort-of-but-not-always random elements from it
20:01 <CookedGryphon > lvh: destructuring like that doesn't make sense for sets. If you want to do something with all the elements, reduce over it or something
20:02 <CookedGryphon > allowing destructuring makes it very easy to do something which will break weirdly later on down the line
20:04 <      jonasen > CookedGryphon: https://www.refheap.com/42002
20:05 <    Anderkent > clgv: hhenkel: https://github.com/trptcolin/reply/issues/132
20:06 <      jonasen > CookedGryphon: this is in cljs. I have not tried the clojure version
20:08 <CookedGryphon > jonasen: I think you need to capture the returned channel from sub
20:08 <CookedGryphon > I don't quite get the reasoning behind it, but I think it'll work if you do let [c (async/sub my-pub :foo (async/chan))] ...
20:09 <      jonasen > CookedGryphon: thanks, that works too. But I still get the same error if noone is listening to :foo
20:10 <      jonasen > but maybe that is to be expected?
20:38 <      jonasen > CookedGryphon: I don't see the same behaviour in Clojure..
20:58 <      jonasen > CookedGryphon: I think it's a bug in the cljs source: the line at https://github.com/clojure/core.async/blob/master/src/main/clojure/clojure/core/async.clj#L869 is missing from the cljs version: https://github.com/clojure/core.async/blob/master/src/main/clojure/cljs/core/async.cljs#L646
21:18 <CookedGryphon > jonasen: that does look a little suspicious doesn't it...
21:19 <      jonasen > CookedGryphon: I opened a ticket on JIRA: http://dev.clojure.org/jira/browse/ASYNC-56
21:20 <    Anderkent > CookedGryphon: jonasen: yeah, compare https://github.com/clojure/core.async/commit/cf8dc1bf#diff-5c087e8e400be45f4d03e0a618ef9d46L855 and https://github.com/clojure/core.async/commit/76b25bf91c6#diff-eff29afee9dd0dffc6769d2702ff9eadL636
21:20 <    Anderkent > seems like a simple mistake
21:21 <    rkneufeld > Is there anyone who's read or worked on the Clojure Cookbook who would care to render a quote for the back cover? (Think: "Is this an important book for the community?" "Was their an aspect of its development you thought was novel?" "Is it a particularly good book you would recommend to others?")
21:22 <    rkneufeld > Looking for a quote today, with name and job title for attribute. Feel free to email me at ryan@cognitect.com if you'd rather share privately
21:24 <      dnolen_ > jonasen: fixed in master
21:24 <      jonasen > dnolen_: thanks
21:25 <    Anderkent > 26 minutes turnaround? Nice!
21:25 <        _bart > Hello, I'm getting this exception: ClassCastException overtone.sc.node.SynthNode cannot be cast to java.lang.Runnable  overtone.at-at/schedule-job
21:25 <        _bart > with this line: (overtone.at-at/every (/ 60 bpm) (kick) beats-pool :desc "kick")
21:26 < thesaskwatch > Hi, I tried to do git diff <(echo abc) <(echo def)  ... but it says unsuported file type
21:26 <      jonasen > dnolen_: when are new versions released to maven central?
21:26 <        _bart > It's probably the (kick) thing that's being cast, but why?
21:26 < thesaskwatch > is it possible to bypass it somehow?
21:26 <      dnolen_ > jonasen: I think tbaldrige usually pushes the button these days?
21:27 <      dnolen_ > jonasen: no specific schedule, just when some significant changes have landed
21:27 <        _bart > If I replace (kick) with #(println "I am cool!") I get: IllegalArgumentException   java.util.concurrent.ScheduledThreadPoolExecutor.scheduleAtFixedRate (ScheduledThreadPoolExecutor.java:420)
21:27 <      jonasen > dnolen_: ok. I can use a local version for now
21:27 <      jonasen > dnolen_: does 'lein install' work for core.async?
21:27 <      dnolen_ > jonasen: yep
21:27 <    Anderkent > _bart: in the first case, is kick a function or does it return a function?
21:27 < stuartsierra > You can always get latest -SNAPSHOT builds of Clojure artifacts dev.clojure.org/display/community/Maven+Settings+and+Repositories
21:27 <    Anderkent > _bart: in the second, what does (/ 60 bpm) return?
21:28 <        _bart > Anderkent: kick is: (def kick   (sample (freesound-path 171104)))
21:28 < stuartsierra > Hudson on build.clojure.org polls GitHub every 5 minutes, rebuilds and uploads -SNAPSHOTS to Sonatype.
21:28 <    Anderkent > right, so you probably want (every (/ 60 bpm) kick beats-pool :desc "kick")
21:29 <    Anderkent > I'd also check if your beats-pool is initialized properly!
21:29 <    Anderkent > because the second example should work
21:29 <      jonasen > stuartsierra: where are the docs on using contrib -SNAPSHOT? I remember reading about it somewhere...
21:30 <        _bart > Andorkent: yes now I get #<RecurringJob id: 1, created-at: Wed 03:29:30s, ms-period: 600, initial-delay: 0, desc: "kick", scheduled? true>
21:30 < stuartsierra > jonasen: ^^^ dev.clojure.org/display/community/Maven+Settings+and+Repositories
21:30 <        _bart > Anorkent: which is great, but I don't hear the kick. When I run (kick) I do hear it though
21:30 <      jonasen > stuartsierra: thanks
21:30 <    Anderkent > _bart: hm, make it #(do (println "Kicking") (kick)) instead and see if the print happens?
21:31 <        _bart > Anderkent: just did #(do (kick)) and it works, hearing the kicks :)
21:32 <    Anderkent > weird!
21:32 <    Anderkent > as in, really weird. You sure your speakers werent off? :P
21:33 <        _bart > Anderkent: now I don't know how to stop it though :p
21:33 <        _bart > Anderkent: (overtone.at-at/stop-and-reset-pool! beats/beats-pool) not working
21:34 <    Anderkent > do :strategy :kill, maybe
21:34 <        _bart > Anderkent: no difference, it just says 0 jobs but I'm definitely hearing the kicks
21:35 <        _bart > (this is all in REPL by the way)
21:35 <    Anderkent > I think you must have another job scheduled against a different pool then
21:36 <    Anderkent > just kill the repl :P
21:36 <        _bart > yeah :p I should start to use the vim fireplace thing, maybe that's better.
21:37 <    Anderkent > are you using the lein repl or vim-clojure?
21:37 <    Anderkent > I'd expect everything to work in the lein repl
21:37 <    Anderkent > if you're doing everything from vim then you might be getting weird behaviour if it reevaluates your file, for example
21:38 <    Anderkent > for example your current issue could be caused by you running a job against a pool, then reevaulating the file that creates the pool (thus replacing the reference)
21:38 <    Anderkent > now you try to shutdown-pool but it's a different pool than the one that actually runs your kick
21:38 <    Anderkent > (that can be fixed by using (defonce beats-pool) rather than (def beats-pool) btw)
21:39 <        _bart > Yes that's messy, but now I'm constantly switching tabs, :reload'ing the namespaces and then executing the functions
21:40 <    Anderkent > yrgh, yeah. At least use defonce in that case :
21:40 <    Anderkent > (for the pool)
21:40 <    Anderkent > having your files behave nicely when reevaluated is always nice
21:49 <        _bart > Anderkent: just tried to reset the pool, it works. maybe I reloaded stuff in between last time
21:50 <       lgs32a > wow, just switched over to cider. company-complete is really awesome. what a difference from ac-nrepl
21:51 <       lgs32a > how fast it interacts, and all that in emacs.
21:52 <      jonasen > stuartsierra: not sure which version I should be using? Is it "0.1.0-SNAPSHOT"? Also, I don't see any activity on http://build.clojure.org/builds
21:52 <       lgs32a > is something like popup integration planned for docstrings again?
21:53 < stuartsierra > jonasen: build.clojure.org polls the Git `master` branch periodically, I forget what interval. The SNAPSHOT version number is in the pom.xml file for the project.
21:54 < stuartsierra > Oh, drat. core.async isn't in the standard set of builds, because someone had to get clever with version strings.
21:54 < stuartsierra > So forget everything I just said.
21:55 <      jonasen > stuartsierra: heh.. ok
21:55 <      jonasen > stuartsierra: I'll try 'lein install' instead then
21:56 < stuartsierra > or `mvn install` if there's no project.clj file
21:56 <    Anderkent > there is in async; though until recently it didnt have the group name :p
22:01 <CookedGryphon > Does anybody else have issues AOT compiling macros that expand into other macros?
22:01 <CookedGryphon > I have had issues aot compiling core.match macros in combination with go blocks
22:01 <CookedGryphon > and have come across the same thing now with a macro that expands to a core.match
22:01 <    Anderkent > is that the <! not used in go block thing?
22:01 <    Anderkent > or just compiler barfing?
22:02 < stuartsierra > core.match does some weird things with &env I think
22:02 <    Anderkent > ah.
22:02 <CookedGryphon > where I get OrPattern not defined on first run, but then if i compile again without a clean it works
22:03 <      jonasen > 'lein install' worked fine. Thanks stuartsierra dnolen_ and CookedGryphon. Back to coding then!
22:05 < laurentpetit > Hi. Say I want the same feature as agents, but in java: like a producer / consumer process, guaranteed with one consumer, but no imperative loop in the consumption side. And reaching for clojure is not a solution in the current case. Any ideas?
22:07 <    mdrogalis > laurentpetit: j.u.c Blocking Queue?
22:07 <         clgv > laurentpetit: threadpoolexecutor
22:08 < laurentpetit > mdrogalis: I'm really not an expert in concurrent programming, so excuse my noob questions. With Blocking Queue, i'll need a single blocking thread, right ? So I'll have to do some cleanup when e.g. the webapp is reloaded (the app disposed) ? I'd like to avoid that, if possible.
22:09 <    mdrogalis > laurentpetit: I think GC should pick that off for you
22:09 <    mdrogalis > But yeah, one thread will block
22:10 < laurentpetit > clgv: a threadpoolexecutor and fixing the params so that I'm certain only one consumer thread can execute place anytime ?
22:10 < laurentpetit > s/place//
22:10 <      llasram > laurentpetit: Why can't you actually just use a Clojure agent?
22:11 <         clgv > laurentpetit: that would work, yes
22:11 < laurentpetit > llasram: because even if i'm a clojure afficionado, it's for a java-only project
22:11 <         clgv > laurentpetit: how is work with CCW going recently?
22:13 < laurentpetit > clgv: sorry, no time to develop on this this afternoon, lots of things on my plate. But in a nutshell, going well, even if some family events have cut a little bit of work time off recently. Nothing too bad, and I intend to catch up during the following weeks.
22:13 <         clgv > laurentpetit: good to hear :)
22:15 < laurentpetit > clgv: threadpoolexecutor seems like a big gun for my problem. Not even sure I'll set all the right parameters to use it correctly ...
22:16 <      llasram > laurentpetit: Do you just need a separate dedicated chewing through a linear queue of tasks?
22:16 <         tim_ > laurentpetit: I think if you start up the thread as a daemon thread you won't have to kill it at the end
22:16 <         clgv > laurentpetit: well, a thread and a blocking queue will work as well
22:17 <      llasram > s,dedicated,dedicated thread,
22:17 <      llasram > Like everyone else is suggesting :-)
22:17 <         clgv > laurentpetit: yeah you can set backgroundthread to true
22:17 <   tbaldridge > laurentpetit: that being said, use a fixed size thread pool
22:17 < laurentpetit > clgv: will it not create a memory leak if the application is restarted again and again from tomcat's manager interface without restarting the JVM ?
22:18 <   tbaldridge > laurentpetit: http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int) with the size set to 1
22:18 <   tbaldridge > laurentpetit: then you can just do execute(runnable) to queue new tasks.
22:19 < laurentpetit > tbaldridge: ok, so new tasks will be queued, and executed one at a time? Exactly what I want.
22:19 <   tbaldridge > yeah, assuming you use a size of 1.
22:20 <   tbaldridge > laurentpetit: executors also include .shutdown that allows you to flush the queue before shutting down the executor. That'll make sure that you won't end up throwing away work.
22:20 < laurentpetit > tbaldridge: yeah, I'll do that. I guess I'll have to hook a call to the shutdown method of the ExecutorService when the webapp is noticed that it is shut down
22:20 < laurentpetit > tbaldridge: ok
22:21 <          lvh > uh, is it normal that when I call functions something with -> in the name that the error message drops everything starting with the dash
22:21 <          lvh > I may be misdiagnosing but I appear to be getting this error: ArityException Wrong number of args (1) passed to: csv$pair  clojure.lang.AFn.throwArity (AFn.java:437)
22:21 <          lvh > about a function named pair->rows
22:21 <          lvh > (there is no function named pair)
22:21 < laurentpetit > tbaldridge tim_ clgv llasram mdrogalis thanks all for your help and your time
22:22 <    mdrogalis > :)
22:31 <       quizdr > is it possible to throw a custom string when an assert fails?
22:34 <       quizdr > ah, i was using assert, i see that clojure.test/is is a better choice for custom error messages
23:04 <btcNeverSleep > re everyone... In Emacs / cider is there an easy way and is it a good idea to do something like this: switch to the namespace of the buffer the cider-jack-in is called from and then call also (use 'clojure.repl) and (use 'clojure.pprint). Does this already exist in cider?
23:07 <btcNeverSleep > for example I take it I could set a hook (?) calling (cider-repl-set-ns) upon after running cider-jack-in? But then how do I do to execute (use 'clojure.repl) and (use 'clojure.pprint) inside the REPL? (I tend to do these two all the time after creating a new REPL)
23:13 <    AeroNotix > is https://github.com/technomancy/s3-wagon-private still what I should use for private jars?
23:13 <    AeroNotix > I have some artefacts I want to push out privately.
--- Log closed Wed Feb 19 23:16:26 2014
--- Log opened Tue Mar 25 23:34:38 2014
23:34 -!- Irssi: #clojure: Total of 763 nicks [1 ops, 0 halfops, 0 voices, 762 normal]
23:34 -!- Irssi: Join to #clojure was synced in 5 secs
23:56 <CookedGryphon > alexyakushev_: that doesn't look right...
23:56 <CookedGryphon > perhaps the recur is recurring to the wrong point?
23:58 <alexyakushev_ > CookedGryphon: Doesn't seem to be the case. The function works now that I reordered clauses, and it works correctly
23:59 <  nbeloglazov > alexyakushev_, I suggest to file a bug in this case.
--- Day changed Wed Mar 26 2014
00:00 <alexyakushev_ > nbeloglazov: I will, probably after I ask David whether he is aware of such problem
00:00 <CookedGryphon > alexyakushev_: I'm curious, what's your rewrite and what does it generate
00:02 <alexyakushev_ > CookedGryphon: Now it looks like this https://www.refheap.com/65502, and macroexpanded it yields 4k loc instead of 11k in the first case
00:02 <CookedGryphon > alexyakushev_: I got 790k lines when I macroexpanded and pprinted it...
00:04 <CookedGryphon > but yeah, either way it's too much !
00:05 <alexyakushev_ > Yes, definitely looks excessive :)
00:29 <AlwaysBCoding > Hey guys, I'm using datomic and getting an error message "Boot datoms cannot be altered" - I have absolutely no idea what this is supposed to mean and can't find a single resource on google. Anyone have any insight on what it means?
00:30 <          cbp > AlwaysBCoding: I don't know but you can also try asking in the #datomic channel
00:30 <       _Pate_ > how does the new cond-> macro work? https://github.com/clojure/clojure/blob/master/changes.md#24-new-threading-macros
00:30 <       _Pate_ > (cond-> 1, true inc, false (* 42), (= 2 2) (* 3)) => 6
00:31 <       _Pate_ > why does that output 6?
00:31 <          cbp > _Pate_: because 1 is true
00:31 <        gtrak > it gets inc'd then multiplied by 3
00:32 <          cbp > _Pate_: and also because 2 equals 2
00:32 <     hyPiRion > cbp: What do you mean by 1 is true?
00:32 <          cbp > so it first goes through the true clause and the result of that goes through the 2 == 2 clause
00:32 <       _Pate_ > I see, so it threads 1 through all the expr where the clause evals to true?
00:32 <     hyPiRion > _Pate_: yes
00:32 <          cbp > er I mean because true is true..
00:32 <     hyPiRion > ah
00:33 <          cbp > it's a pretty terrible example..
00:33 <       _Pate_ > so in this case: -> 1 inc (* 3) => 6
00:33  *         cbp nods
00:33 <       _Pate_ > coool
00:34 <       _Pate_ > I can't count the amount of verbose code I have written to conditionally execute stuff like that.
00:34 <AlwaysBCoding > cbp: Is there a #datomic channel?
00:34 <          cbp > AlwaysBCoding: yes
00:47 <     sdegutis > Hi. You have (def m {"a" "y", "b" "z"}) and you want to use it to turn "bad" into "zyd". How would you do this?
00:49 <          cbp > sdegutis: replace?
00:50 <     sdegutis > Ahh yes, great! Thanks!
00:50 <     sdegutis > Hmm no wait, that seems wrong, completely wrong.
00:51 <    ToxicFrog > ,(def m {"a" "y" "b" "z"}) (->> "bad" (map str) (replace m) (apply str))
00:51 <   clojurebot > #'sandbox/m
00:51 <     sdegutis > clojure.core/replace works on a collection, but I'm working with strings.
00:51 <    ToxicFrog > ,(->> "bad" (map str) (replace m) (apply str))
00:51 <   clojurebot > "zyd"
00:52 <    ToxicFrog > sdegutis: strings are ordered collections of chars.
00:52 <     sdegutis > Ah yes, I see what you mean.
00:52 <    ToxicFrog > There's probably a better way to do it than what I just did
00:52 <     sdegutis > Surely there is a name for the error I made by now.. I used too specific a dataset and didn't convey how general I meant it to be.
00:52 <    ToxicFrog > There definitely is if you can fill your map with chars rather than single-char strings; that lets you drop the (map str)
00:52 <     sdegutis > I'm dealing with any-length strings anywhere a string is mentioned here.
00:54 <    ToxicFrog > Oh, so m might be { "foo" "FOO" "bar" "
00:54 <    ToxicFrog > Oh, so m might be { "foo" "FOO" "bar" "BAR" }\
00:54 <    ToxicFrog > ?
00:54 <     sdegutis > Right.
00:54 <     sdegutis > Well, except that might imply that I only want capitalization ;)
00:54 <        TimMc > sdegutis: The question is still underspecified. What about conflicts?
00:54 <     sdegutis > Thus leading to another round of me clarifying :D
00:54 <        TimMc > (Overlaps.)
00:54 <        gtrak > now it's sounding like you want a lexer
00:54 <     sdegutis > TimMc: there won't be any
00:54 <        TimMc > sdegutis: Then use reduce and .replace
00:54 <     sdegutis > The pattern I've used before is to make a custom function for use with reduce, which takes [string [key val]] as its args, and does whatever work (this time being clojure.string/replace) to return a new [string] for use as the first argument in the next (reduce) call.
00:55 <       _Pate_ > I'm looking for a great image that depicts structural sharing in Clojure's memory model for an intro talk I'm doing, preferably vector-based image (like SVG). Any ideas?
00:55 <     sdegutis > I've just used that pattern enough times, and it's so strange looking, that I figure there surely must be a better way.
00:55 < justin_smith > _eric: Frozenlock: regarding something you guys were taling about a while back
00:55 < justin_smith > ,(apply + 1 '(2 3 4))
00:55 <   clojurebot > 10
00:56 < justin_smith > you don't need cons to use apply on a single element and a collection at the same time
00:56 <     sdegutis > erc-hl-nicks is great btw
00:56 <        gtrak > _Pate_: people always use this one: http://www.cs.uiuc.edu/~jeffe/teaching/datastructures/Fig/clojure-trees.png
00:57 <        gtrak > at least it seems really familiar
00:57 <       _Pate_ > thank you! I just had a crummy version of that. This is a better resolution.
00:57 <         clgv > _Pate_: easily replicatable via LaTeX/TikZ ;)
00:58 <   Frozenlock > justin_smith: *mind blown*
00:58 <          cbp > sdegutis: I would probably just use a loop, a stringbuilder (or two) and a replacements map
00:58 <       arrdem > -! is for stm. so why the hell does 1.6 have assoc! and soforth as part of the transient system.
00:59 <        gtrak > ! is for dangerous! or mutable!
00:59 <       arrdem > if -! is suddenly for side-effect annotation I'm gonna be moderately annoyed
00:59 <          cbp > I just used ! for ..
00:59 <          cbp > yeah
00:59 <        gtrak > arrdem: see: reset!
00:59 <     sdegutis > Great, this works, albeit a little unreadable: (reduce (fn [s [k v]] (str/replace s (format "[%s]" k) v)) url config)
00:59  *         cbp is actually very inconsistent with his bangs
00:59 <       arrdem > gtrak: but that's an STM op
00:59 <        gtrak > reset! works on atoms
00:59 <       arrdem > gtrak: so far all the -!s are stm ops
01:00 <        gtrak > which aren't stm?
01:00 <       Bronsa > arrdem: isn't ! used for ops that are not safe to be used inside a dosync?
01:00 <        gtrak > also set! works on vars and java fields
01:00 <      iwilcox > I've wondered about using ! for "I generate random numbers", but I'm super-new here.
01:00 <          cbp > oh yeah I remember Bronsa's statement now
01:00 <          cbp > for non
01:01 <        gtrak > set-validator! 'Sets the validator-fn for a var/ref/agent/atom'
01:01 <       arrdem > Bronsa: maybe. that's a more sane definition if that's the case
01:01 <         clgv > arrdem: assoc! is as old as transients and nothing new in 1.6 ;)
01:01 <       arrdem > brb flipping my desk
01:01 <         clgv > ,(meta #'assoc)
01:01 <       Bronsa > given that side-effecting ops are implicitly not safe to be used within a transaction that would make sense
01:01 <   clojurebot > {:ns #<Namespace clojure.core>, :name assoc, :arglists ([map key val] [map key val & kvs]), :column 1, :added "1.0", ...}
01:01 <         clgv > ,(meta #'assoc!)
01:01 <   clojurebot > {:ns #<Namespace clojure.core>, :name assoc!, :arglists ([coll key val] [coll key val & kvs]), :column 1, :added "1.1", ...}
01:02 <         clgv > ah clojure 1.1^^
01:02 <          cbp > I have a terrible memory..
01:02 <        gtrak > ! means that, * means a more primitive version of the non-*, ' means I don't know what.
01:03 < justin_smith > dsrx: regarding what you and scottj were talking about, there is string-edit-at-point which takes the current string the point is inside, and opens it in a secondary buffer for unescaped editing, and C-c C-c then insterts the edited version, escaped, back into the string
01:03 <        gtrak > if I'm doing math it would mean the next step, like x and x'
01:03  *      arrdem ┬─┬ノ( º _ ºノ)
01:03 <          cbp > idempotent that's the word
01:04 <          cbp > thank you based google
01:04 <        gtrak > one time I used | in place of a / and my coworkers flipped out
01:04 <       arrdem > gtrak: in a symbol name?
01:04 <        gtrak > heh, yes
01:04 <       arrdem > haha
01:05 <        gtrak > (def some-domainmodel-ns|Constructor)
01:05 <        gtrak > or maybe it was even (def some-domainmodel-ns|->Constructor)
01:05 <        gtrak > to mirror the records stuff
01:08 <        TimMc > ☃ on the end of a symbol means congratulations, you are probably using the correct character set on your computer!
01:10 < justin_smith > 🏂 <- slightly harder mode of the above
01:10 <       arrdem > TimMc: dat snowman...
01:10 <       arrdem > justin_smith: you broke emacs :c
01:11 < justin_smith > snowboarder
01:11 <       arrdem > justin_smith: correctly identified as snowboarder, but no glyph
01:11 < justin_smith > I was gonna say, M-x describe-char
01:12 < justin_smith > 💩 at the end of a name means "this is terrible and should not exist"
01:12 <       arrdem > I'll use λ in my comments... but utf8 fn names just don't buy a lot IMO
01:12 <       arrdem > some days I just have to break out vim and edit from not a real editor :c
01:15 <       Bronsa > gtrak: at some point in a tools.analzyer pass I had pass, pass*, -pass and pass'
01:15 <       Bronsa > I just suck at naming
01:15 <        gtrak > nice
01:16 <        gtrak > arbitrary-construct1,2,3
01:16 <       arrdem > Bronsa: so long as you don't have f, f', f'', f''' and soforth...
01:16 <       Bronsa > well now that you mention it.. https://github.com/clojure/tools.analyzer.jvm/blob/master/src/main/clojure/clojure/tools/analyzer/jvm/utils.clj#L216-L221
01:16  *      Bronsa hides 
01:17 <       arrdem > I suppose to go along with my bro encoding I should build a tools.analyzer pass to rewrite all symbols into ([bB]ro)*...
01:18 <       arrdem > Bronsa: haha... I've definitely done (let [a .., a₀ ..., a₁ ...] ..)
01:18 <       arrdem > subscripts++
01:18 < justin_smith > ,(let [x¹ 4 x² 1 x³ 2] (* x³ (+ x² x¹)))
01:18 <   clojurebot > 10
01:18 <       arrdem > (inc justin_smith)
01:18 <      lazybot > ⇒ 29
01:19 <       arrdem > I need to build a latex frontend for expresso...
01:20 <        TimMc > justin_smith: Was that  a non-BMP character?
01:20 < justin_smith > ¹ <- "SUPERSCRIPT ONE"
01:20 < justin_smith > works through "... NINE"
01:20 <        TimMc > No, 10 minutes ago.
01:20 < justin_smith > ⁰works two
01:21 < justin_smith > oh, the snowboarder? I dunno, depends on your font support I guess?
01:21  *      arrdem votes for latex markup everywhere
01:22 < justin_smith > TimMc: wait, I misunderstood that question
01:22 < justin_smith > yeah, I think that is definitely non-bmp
01:24 < justin_smith > TimMc: it is in the block "miscellaneous symbols and pictographs"
01:25 < justin_smith > inserted via M-x insert-char
01:39 <         mlb- > is there a well known way to shell out from Clojure, that work well on Windows? My google-fu has only revealed clojure.java.shell and clj-commons-exec
01:40 < justin_smith > conch is decent
01:40 < justin_smith > https://github.com/Raynes/conch
01:40 < justin_smith > it has a nicer API than the other stuff, using process-builder which is nice and very powerful
01:46 <         mlb- > thanks, will check out =]
01:48 <       pyrtsa > Do people have experiences with the Quartzite library here? Any idea why it requires a specific type (created e.g. with the defjob macro) to define jobs? Why not just an IFn?
01:50 <     sdegutis > What's that site that lets you search for Clojure code snippets? I looked and looked and can't find it.
01:50 < justin_smith > pyrtsa: I'd blame the underlying java lib http://quartz-scheduler.org/
01:52 <       pyrtsa > justin_smith: I can believe that. But why wouldn't Quartzite just define a generic subtype of org.quartz.Job that helds a user-defined Clojure function?
01:52 <       pyrtsa > http://clojurequartz.info/articles/jobs.html
01:53 < justin_smith > from that page "Unfortunately, due to certain Quartz implementation details and the way Clojure loads generated classes, many approaches to using functions do not work."
01:54 <       pyrtsa > Incredible.
01:54 <       pyrtsa > Okay, thanks.
01:55 <     sdegutis > Ah yes! It's http://getclojure.org/
01:57 < justin_smith > sdegutis: (fn [] (loop [i (int 0)] (recur nil))) -- what is this supposed to be exemplary of? cargo cult spin loop?
02:00 <          cbp > hahah (loop [] (let [recur 5] recur))
02:01 < justin_smith > at least that demonstrates something useful about clojure's binding rules
02:19 <         alew > pyrtsa: Immutant uses quartz underneath for scheduling and actually allows you to specify arbitrary functions
02:19 <         alew > pyrtsa: without doing that record stuff
02:19 <         alew > pyrtsa: http://immutant.org/tutorials/jobs/index.html
02:21 <         alew > pyrtsa: Not that you would want to pull all of immutant in for just scheduling, but it shows that it's possible
03:02 < clojure-user > a
03:03 < clojure-user > test
03:03 <          asd > Hi clojure user
03:05 <         clgv > what are the common pitfalls when you use a LinkedBlockingQueue in a multi producer single consumer scenario?
03:05 <         clgv > I seem to be loosing items in that queue
03:05  *     llasram is skeptical 
03:06 <         clgv > llasram: to what I said?
03:06 <      llasram > That you'd be losing items
03:06 <      llasram > Only pitfall I can think of is that it's unbounded unless you provide one
03:09 <         clgv > well running the whole thing in log level trace now
03:09 <        TimMc > I wonder what happens if you create 2 queues, fill one with stuff, and then try to drain each to the other.
03:11 <       Raynes > TimMc: http://i.imgur.com/5sQO8hJ.jpg
03:11 <       Raynes > WARNING: Snake ^
03:11 <     tcrawley > pyrtsa: Immutant 2 will let you use quartz outside of the container, so you can just bring in that lib
03:11 <        TimMc > hee
03:12 <     tcrawley > and using functions with quartz means you can't use a JobStore
03:13 < clojure-user > hello
03:15 <         clgv > llasram: I use a combination of "take" and "poll" to block until there are elements in the queue and then take as much as there are
03:16 <         clgv > and I do not think that I observed that problem in the past...
03:21 <          edw > Has anyone yet written an EDN parser in elisp? It's beginning to look like the world needs such a thing, and I may heed the call...
03:22 <        TimMc > Raynes: I think it's "smart" enough to only drain the number of elements that were in the queue when draining started.
03:23 <        TimMc > https://www.refheap.com/65637
04:00 <     sdegutis > I just realized that you can't do further destructuring inside {:keys [...]}
04:02 <     sdegutis > I just kind of expected it allowed you to destructure infinitely deep.
04:02 <      brehaut > really?
04:03 < justin_smith > sdegutis: but of course :keys is redundant, just more concise
04:03 <      brehaut > that would just make the keys, syms, strs shorthands a more complicated way of not usign those shorthands
04:03 < justin_smith > regular destructuring goes very deep (arbitrarily deep?)
04:03 <      brehaut > yes
04:04 <          abp > sdegutis: how should that work? maps aren't positiional so you need some names to bind.. would basically be like what you can always do
04:05 <        TimMc > sdegutis: You don't have to list everything in :keys anyhow.
04:09 <        TimMc > &(let [{:keys [a b], [c] :c} {:a 1, :b 2, :c [3 4 5]}] [a b c])
04:09 <      lazybot > ⇒ [1 2 3]
04:10 <    trap_exit > is (into {} (map side-effect lst)) lazy or not lazy ?
04:11 <       Bronsa > not lazy
04:11 <      brehaut > easy way to check ;)
04:11 <      brehaut > ,(into {} (range))
04:11 <    trap_exit > how do I test?
04:11 <   clojurebot > #<ExceptionInfo clojure.lang.ExceptionInfo: Don't know how to create ISeq from: java.lang.Long {:instance 0}>
04:11 <      brehaut > ,(into {} (map + (range)))
04:11 <    trap_exit > ,(into {} (map (fn [x] x) (range)))
04:11 <   clojurebot > #<ExceptionInfo clojure.lang.ExceptionInfo: Don't know how to create ISeq from: java.lang.Long {:instance 0}>
04:11 <   clojurebot > #<ExceptionInfo clojure.lang.ExceptionInfo: Don't know how to create ISeq from: java.lang.Long {:instance 0}>
04:11 <      brehaut > oh duh
04:11 <      brehaut > ,(into [] (range))
04:11 <   clojurebot > #<OutOfMemoryError java.lang.OutOfMemoryError: Java heap space>
04:11 <    trap_exit > well wait
04:12 <    trap_exit > ,( ... ) forces it to be printed, which is what causes it to be not lazy
04:12 <   clojurebot > #<IllegalArgumentException java.lang.IllegalArgumentException: Malformed member expression, expecting (.member target ...)>
04:12 <    trap_exit > ,(range)
04:12 <   clojurebot > (0 1 2 3 4 ...)
04:12 <       Bronsa > trap_exit: no, into is not lazy
04:12 <    trap_exit > ,(let [a (into {} (map vector (range) (range)))] 23)
04:12 <      brehaut > trap_exit: as you can see above, clojurebot has its print vars set so that it wont print an infinite sequence so no, it wont realize it all
04:13 <        TimMc > trap_exit: into walks the entire collection eagerly
04:13 <   clojurebot > Execution Timed Out
04:13 <     sdegutis > TimMc: fantabulous
04:14 <    trap_exit > Bronsa, brehaut, TimMc: I believe you now
04:14 <    trap_exit > thanks!
04:15 <    trap_exit > if we were in dogecoin, I'd tip you 10 dogecoins
04:16 <      brehaut > trap_exit: the other thing to think about is that into is filling a strict datastructure; those structures have no way of representing laziness so its intrinsicly going to be a strict operation
04:16 <       Bronsa > trap_exit: another way to notice that that was eager: the only sequences that preserve lazyness are lazyseqs and cons, there's no lazy map/vector/set in clojure
04:16 <        TimMc > trap_exit: One of the bots has a karma module. :-P
04:16 <       Bronsa > trap_exit: also, if the docstring doesn't say "returns a lazy sequence" then the operation is not lazy :)
04:17 <    trap_exit > hmm, wait, so are assoc/dissoc both eager ?
04:17 <       Bronsa > yes
04:17 <    trap_exit > hmm, for some dumbass reason, all these years I thought maps were lazy as were assoc/dissoc
04:17 <    trap_exit > I'm glad we clarified this up
04:27 <       arrdem > Bronsa: hum... how is infinite determined then...
04:27 <       arrdem > Bronsa: I know there are techniques for doing print bounding, but it seems like proving the infinite property of a lazy sequence is hard
04:28 <       Bronsa > arrdem: what do you mean? there's no way in clojure to determine if a non-realized lazy-seq is infinite
04:29 <       arrdem > oh. sorry. that was brehaut not you.
04:29 <       Bronsa > np
04:29 <       arrdem > "clojurebot has its print vars set so that it wont print an infinite sequence ..."
04:30 < justin_smith > arrdem: all that means is that he only prints the first N elements
04:30 < justin_smith > thus never attempting to realize an infinite sequence
04:30 < justin_smith > ,(clojure.repl/doc *print-length*)
04:31 <       Bronsa > he was talking about *print-lenght*/*print-level*
04:31 <       arrdem > justin_smith: yeah I knew about that
04:31 <       Bronsa > print-lenght alone shouldn't suffice. suppose you have a vector with one element of infinitely nested vectors
04:33 <   clojurebot > "; *print-length* controls how many items of each collection the printer will print. If it is bound to logical false, there is no limit. Otherwise, it must be bound to an integer indicating the maximum number of items of each collection to print. If a collection contains more items, the printer will print items up to the limit followed by '...' to represent the remaining items. The root binding is...
04:33 < justin_smith > ,(clojure.repl/doc *print-level*)
04:33 <   clojurebot > "; *print-level* controls how many levels deep the printer will print nested objects. If it is bound to logical false, there is no limit. Otherwise, it must be bound to an integer indicating the maximum level to print. Each argument to print is at level 0; if an argument is a collection, its items are at level 1; and so on. If an object is a collection and is at a level greater than or equal to th...
04:33 <       Bronsa > that was about time clojurebot
04:34 <          cbp > you can just (doc ..) :P
04:34 <          cbp > (doc inc)
04:34 <   clojurebot > "([x]); Returns a number one greater than num. Does not auto-promote longs, will throw on overflow. See also: inc'"
04:35 <        TimMc > ,(let [v [1 2 3 4 5 6 7 8]] (aset (.tail v) 0 v) v)
04:35 <   clojurebot > [[[[[[[[[[# 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...] 2 3 4 5 ...]
04:35 <       arrdem > lolz
04:35 <        TimMc > ^ That demonstrates both print-length and print-level.
04:35 <       Bronsa > TimMc: don't do that ever again plz
04:35 <        TimMc > haha
04:36 <       arrdem > (inc TimMc)
04:36 <      lazybot > ⇒ 56
04:36 <    trap_exit > (inc TimMc)
04:36 <      lazybot > ⇒ 57
04:36 <    trap_exit > (int ardem)
04:36 <        TimMc > I can't believe .tail got exposed in 1.6. Just awful.
04:37 <       arrdem > TimMc: why?
04:37 <        TimMc > Shenanigans.
04:37 <       arrdem > clearly demonstrated above, got it...
04:38 <       arrdem > that you can do silly things with it I don't consider much of a STL bug tho.
04:38 <        TimMc > Although... I guess it's not like you could trust PV before.
04:39 <        TimMc > &(let [a (object-array 1) v (vec a)] (aset a 0 v) v)
04:39 <      lazybot > java.lang.StackOverflowError
04:39 <        TimMc > hum
04:39 <       arrdem > you've also got the self-referential promise...
04:40 <        TimMc > I don't have a problem with that, actually.
04:40 <       Bronsa > ,(let [a (object-array 1) v (vec a)] (aset a 0 v) v)
04:40 <   clojurebot > [[[[[[[[[[#]]]]]]]]]]
04:40 <       Bronsa > looks like lazybot forgot about *print-level*
04:41 <     rasmusto > ,[[[[[#]]]]]
04:41 <       Bronsa > TimMc: there's to be said that the doc for `vec` explicitely states that the array should not be modified
04:45 <   clojurebot > #<RuntimeException java.lang.RuntimeException: Unmatched delimiter: ]>
04:45 <     rasmusto > (inc clojurebot)
04:45 <      lazybot > ⇒ 36
04:52 <        TimMc > Bronsa: Huh! Looks like that warning came in on 1.5.0.
04:56 <     hyPiRion > TimMc: I love it, that feature is the best thing ever
04:57 <     hyPiRion > I don't know if I can use it in Swearjure though
05:02 <        TimMc > ,(let [v [0 0]] (aset (.tail v) 0 v) (aset (.tail v) 1 v) v) ;; sorry Bronsa
05:02 <   clojurebot > [[[[[[[[[[# #] [# #]] [[# #] [# #]]] [[[# #] [# #]] [[# #] [# #]]]] [[[[# #] [# #]] [[# #] [# #]]] [[[# #] [# #]] [[# #] [# #]]]]] [[[[[# #] [# #]] [[# #] [# #]]] [[[# #] [# #]] [[# #] [# #]]]] [[[[# #] [# #]] [[# #] [# #]]] [[[# #] [# #]] [[# #] [# #]]]]]] [[[[[[# #] [# #]] [[# #] [# #]]] [[[# #] [# #]] [[# #] [# #]]]] [[[[# #] [# #]] [[# #] [# #]]] [[[# #] [# #]] [[# #] [# #]]]]] [[[[[# #] [# #]...
05:03 <       Bronsa > :(
05:08 <        TimMc > Bronsa: I couldn't take you seriously after you used aset up there as well. :-P
05:08 <        TimMc > and isn't it a thing of beauty?
05:09 <    Anderkent > Bronsa: missed an opportunity to use [# #] as the emote there
05:10 <     rasmusto > ''[# #]
05:10 <       Bronsa > I was just thinkint that there must be a way to use this to make some cool ascii art
05:22 <    TEttinger > Bronsa: heh.  just / and \, screenshotted and areas filled: https://dl.dropboxusercontent.com/u/11914692/AngleMazeColorful.png
05:26 <         dsrx > oh whoa, 1.6.0 was released?
05:26 < justin_smith > is it stable? if so time to update the room topic
05:27 <      Averell > there needs to be consensus by top analysts
05:27 <      brehaut > justin_smith: it is stable, but uh, probably all the ops are at clojure/west :P
05:31 <          rlb > assume I'm missing something obvious -- "lein new app foo; cd foo; lein uberjar; java -jar target/uberjar/foo-0.1.0-SNAPSHOT.jar" fails with NoClassDefFoundError, but the project.clj has a :main, and core.clj has a gen-class.
05:45 <      mikerod > Can a Symbol only `resolve` to nil, a Var, or a Class?
05:45 <       Pupeno > I seem to able to run lein new luminus myapp and it works... how do I make sure I have the latest version of that luminus plug in or whatever it is that makes that possible?
05:46 < justin_smith > lein new should find the latest
05:48 <       Pupeno > justin_smith: so, everytime I run lein new it checks for updates?
05:49 <  technomancy > Pupeno: it checks once every 24h
05:49 <       Pupeno > Cool.
05:56 <       storme > hi #clojure, I'm new an learning... what's the best way to iterate over a vector, pull out data from it, and add each iteration of data to a new vector?
05:56 <       storme > would a recursive loop work?
05:57 < justin_smith > mapv?
05:57 < justin_smith > ,(mapv + [0 1 2 44])
05:57 <   clojurebot > [0 1 2 44]
05:57 < justin_smith > ,(mapv inc [0 1 2 44]) ; better example
05:57 <   clojurebot > [1 2 3 45]
05:58 <       storme > justin_smith: that just might work
05:58 <       storme > thanks!
05:59 < justin_smith > mind you if the output doesn't need to be a vector, and may benefit from laziness, then map is better than mapv
05:59 <       Pupeno > (map inc [1 2 3])
05:59 <       Pupeno > ,(map inc [1 2 3])
05:59 <   clojurebot > (2 3 4)
05:59 <       Pupeno > Ah.
05:59 <       Pupeno > Of course.
06:00 <       storme > nice
06:00 < justin_smith > mapv is not lazy, it really depends on which data structure is better
06:00 <       storme > but I plan on iterating over the new vector for something else
06:00 < justin_smith > well, that's neither here nor there as far as laziness is concerned
06:00 < justin_smith > in fact laziness can speed that up by doing both maps in one go
06:01 <       storme > sorry still new to clojure coming from ruby, could you eli5 laziness?
06:01 < justin_smith > ,(do (mapv print (range 5)))
06:01 <   clojurebot > 01234[nil nil nil nil nil]
06:01 <     rasmusto > ,(take 10 (range))
06:01 <   clojurebot > (0 1 2 3 4 ...)
06:01 < justin_smith > ,(do (map print (range 5)))
06:01 <   clojurebot > (01234nil nil nil nil nil)
06:01 < justin_smith > hmm, that will show a difference with a larger range argument in your repl
06:02 < justin_smith > oh wait
06:02 < justin_smith > ,(do (map print (range 5)) nil)
06:02 <   clojurebot > nil
06:02 < justin_smith > ,(do (mapv print (range 5)) nil)
06:02 <   clojurebot > 01234
06:02 < justin_smith > that's the difference
06:02 < justin_smith > the printing of the result of print was forcing it :)
06:03 < justin_smith > with laziness, if you don't use the result, no calculations are made
06:03 <       storme > ah
06:03 <       storme > id like to return the result
06:03 <  gfredericks > Bronsa: ping
06:03 < justin_smith > and once you use it, it is calculated (it is slightly more complex than this given chunking for example, but that's the basic)
06:03 <       storme > so another function can evaluate over it
06:03 < justin_smith > right, but that can be lazy or non lazy
06:03 <       Bronsa > mikerod: I can't think of anything else
06:03 <       Bronsa > gfredericks: pong
06:04 < justin_smith > the question is does it need to be evaluated immediately, or can you wait until the value is used
06:04 <       Bronsa > technomancy: time to update the topic :)
06:04 < justin_smith > if you can wait, laziness means the map need only walk the input once, applying both functions
06:04 <      mikerod > Bronsa: me neither
06:05 <  gfredericks > Bronsa: I'm sitting here w/ tbaldridge trying to debug an NPE thrown by tools.analyzer.jvm when using my lib on a codebase with a deftype
06:05 <  gfredericks > github.com/fredericksgary/clj-usage-graph
06:05 < justin_smith > storme: also, it allows a style of programming where you describe how a long (or even infinite) lazy sequence is constructed, and use as much of it as you need at runtime
06:05 < justin_smith > this can often replace a mutable state with walking over a lazy structure
06:06 <       Bronsa > gfredericks: one sec
06:08 <       Bronsa > gfredericks: I see one obvious problem with that code but I don't know if that's the culprit for this bug
06:08 <       storme > justin_smith: okay I think I understand
06:08 <       storme > thanks :)
06:08 < justin_smith > np
06:08 <       Bronsa > gfredericks: actually two problems
06:09 <       Bronsa > gfredericks: 1- you're using the same env for every analyze
06:09 < justin_smith > storme: example of state / lazy seq: a lazy seq of the lines in a file, you get the "next line" as the next element in the lazy seq, and you simple stop taking new items in order to stop reading (instead of putting *current-line* in some stateful container that mutates)
06:09 <       Bronsa > gfredericks:  unfortunately that won't do it, you need to use a new empty-env for every top-level form since namespaces might mutate at runtime
06:10 <  gfredericks > Bronsa: oh interesting
06:10 <  gfredericks > I assumed since it was a PHM it was a value
06:10 <       Bronsa > gfredericks: the other problem is that you're analyzing the whole file but not evaluating the form you're evaluating as you go
06:10 <       Bronsa > you're analyzing*
06:10 <       Bronsa > jvm.tools.analyzer did that implicitely I believe
06:10 <  gfredericks > so I should evaluate each form before or after analying?
06:11 <       Bronsa > gfredericks: I helped ambrosebs writing an analyze-ns function, one sec
06:12 <       Bronsa > gfredericks: https://github.com/clojure/core.typed/blob/tools-analyzer/src/main/clojure/clojure/core/typed/analyze_clj.clj
06:12 <       Bronsa > gfredericks: the env *is* a value, but empty-env recreates it every time you invoke it
06:13 <  gfredericks > Bronsa: why would a value need to be recreated?
06:14 <       Bronsa > gfredericks: suppose you are analyzing (do (intern 'foo) foo)
06:15 <       Bronsa > if you 1- don't eval the first form after analysis
06:15 <       Bronsa > 2- don't refresh the environment to include the newly created var in the :namespaces atom
06:15 <       Bronsa > analyzing the second form will fail
06:19 <       Bronsa > gfredericks: this is a limitation inherent of how clojure works, cljs doesn't have this problems since it lacks runtime reified namespaces & "proper" macros
06:19 <  gfredericks > Bronsa: okay, thanks; my battery's dying so I have to go, but I'll come back to this
06:19 <       Bronsa > gfredericks: I will put an analyze-ns function in t.a.j in the next days btw
06:23 <       Bronsa > gfredericks: also c.t.a.ast already has a lazy `nodes`
06:40 <       Pupeno > Is there a way for lein to show which jars can be upgraded to a new version?
06:41 <        bob2_ > Pupeno, lein ancient?
06:42 <       Pupeno > bob2_: I got "'ancient' is not a task. See 'lein help'."
06:44 <        bob2_ > Pupeno, you'd need to install the lein ancient plugin, I mean
07:02 <       Bronsa > gfredericks: I just added analyze+eval that does the right thing for you, no need to rebuild the env https://github.com/clojure/tools.analyzer.jvm/blob/master/src/main/clojure/clojure/tools/analyzer/jvm.clj#L462-L485
07:32 <         ivan > very pleasantly surprised to see all the talks up this early https://www.youtube.com/playlist?list=PLZdCLR02grLp__wRg5OTavVj4wefg69hM&feature=c4-feed-u
07:32 <          cbp > ^
07:35  *     elarson will be checking out the pig pen vid
07:35 <   Frozenlock > There goes my productivity. Thanks ivan :p
07:36 <       hfaafb > best clojure web app cloud hosting go
07:37 <         ivan > any linux server?
07:37 <         ivan > at which point you're trading off normal bandwidth/cpu/memory/disk requirements
07:38 <         ivan > and network reliability and price
07:40 <         bob2 > heroku is pretty convenient
07:45 <         kras > ivan: glad to see instaparse video in the list
08:03 <         kras > Any traditional Lex/Yacc implementation in clojure? like PLY in python?
08:05 <      brehaut > i dont think anyone has been particularly keen; things like instaparse or perhaps the antlr bindings are more popular
08:05 <      brehaut > you can of course just use the java lex and yacc
08:07 <         kras > I have been using antlr but found it difficult since I don't completely understand Java
08:07 <         kras > probably I am the only one using clojure without a background in Java :-)
08:07 <      brehaut > unlikely
08:08 <      brehaut > a lot of people have come to clojure from python and ruby
08:08 <      brehaut > but it is worth learning at least the basics of java
08:08 <         kras > Thats good to know
08:08 <      brehaut > as interop is idiomatic
08:08 <   Frozenlock > kras: My only background before clojure was emacs lisp :-p
08:14 <         kras > Java seems to be very verbose unfortunately :-(
08:15 <         kras > Found a clojure wrapper for antlr called clj-antlr but again its a work in progress
08:15 <         hons > kras: if you already know a language wich C-ish syntax and some OOP language then Java is very easy to pick up
08:15 <      brehaut > looking at clj-antlr it doesnt seem like you need much java knowledge at all
08:16 <       arrdem > Why use clj-antlr.. we have instaparse...
08:16 <      brehaut > arrdem: speeeeed
08:16 <      brehaut > arrdem: and existing grammers
08:16 <         kras > yes speed
08:16  *      arrdem raises an eyebrow
08:16 <         kras > antlr from my initial experiments seems to be atleast 10 times faster
08:17 <       arrdem > not totally shocking... but are your inputs large enough that parse time is significant?
08:17 <      brehaut > personally i would reach for instaparse for most small parsing tasks, and antlr for the bigger ones (larger files, or hot paths)
08:18 <       arrdem > brehaut: Agreed. Hence why I'm not using instaparse for my modular tools.reader rework.
08:18 <         kras > Yeah I have some very big files to parse and the grammar I have has several rules
08:18 <      brehaut > oh yeah arrdem re yesterdays discussion: seniority can shove it; interesting ideas and engaging your brain are what is important
08:18 <       arrdem > kras: define several....
08:19 <         kras > The only issue I have with clj-antlr is I do not know how to take some actions if a rule is triggered
08:20 <         kras > and there is not documentation yet which explains this
08:20 <       arrdem > brehaut: lolz. I think `Bronsa and `Raynes are the only people younger than me in here.. and both of them out experience me. I'm over it.
08:22 <      brehaut > arrdem: i still dont think its important
08:23 <      brehaut > you can be old as the hills and worked in software all your life and still be as ignorant as someone who has never seen a line of code before
08:24 <    patchwork > Hmm… how do I use js `===` from cljs?
08:24 <      brehaut > patchwork: = i think?
08:24 <    patchwork > Or rather, how do I test js object equality from cljs?
08:25 <    patchwork > I don't want to test value equality, I want reference equality
08:25 <    patchwork > the dirty js kind of equality
08:25 <  technomancy > arrdem: did you just backquote their nicks in order to fully qualify them?
08:26 <    patchwork > I have two references to potentially the same js object, does regular (= obj1 obj2) work for that?
08:26 <         kras > request to clj-antlr developers, please put some documentation in place. Its a great project and I am guessing there are lot of people like me without java background who wnat to use this
08:26 <       arrdem > technomancy: I backquoted in the hope of not notifying them :P
08:26 <      brehaut > patchwork: do you know about https://himera.herokuapp.com/synonym.html ?
08:26 <  technomancy > arrdem: oh, I thought maybe you intended to resolve to bronsa.it and raynes.me or something
08:26 <      brehaut > (not that i know if its there or note but handy)
08:27 <    patchwork > brehaut:  Yeah that has a lot of good comparisons
08:27 <    patchwork > In there equality is not the same between cljs and js
08:27  *      arrdem should get a cool domain like .me or .us
08:27 <      brehaut > patchwork: maybe it doesnt want you to ;)
08:27 <  technomancy > .us is overrated
08:28 <      brehaut > not as overated as .shirts
08:28 <      brehaut > or .drycleaning
08:31 <    patchwork > brehaut:  That is probably true, though annoying in this case
08:31 <       arrdem > technomancy: says the only person I know with a .us domain :P
08:34 <      brehaut > that sounds like a qualification to me
08:36 <  ddellacosta > .to is cool
08:40 <       Raynes > I own raynes.sexy.
08:41 <       Raynes > I'm working on setting up a new blog, wanted to point that at it, but it'll inevitably be deemed inappropriate.
08:41 <       Raynes > Need to find some use for it that can't be turned into a Thing™.
09:17 <    dissipate > i figured it out
09:18 <    dissipate > ,(and)
09:18 <   clojurebot > true
09:18 <    dissipate > ,(or)
09:18 <   clojurebot > nil
09:18 <    dissipate > i figured out why (and) is true, but i still don't get why (or) is nil. i think it should be false.
09:20 <    dissipate > does anyone here know why (and) evals to 'true'? :D
09:22 <      brehaut > presumably the same reason (*) evaluates to 1; its the identity of true
09:22 <      brehaut > err, of and
09:22 <      brehaut > variadic and ~= (reduce binary-and identity-value args)
09:22 <    dissipate > brehaut, right. but why does (or) evaluate to 'nil'?
09:23 <      brehaut > for the same reason
09:23 <    dissipate > brehaut, right, but why is it 'nil' and not 'false'?
09:23 <      brehaut > nil and false are both falsey
09:23 <      brehaut > and nil punning with or is an idiomatic language thing
09:24 <      brehaut > or is a true and falsy operation, not a true and false op.
09:24 <      brehaut > it would lose its defaulting behaviour otherwise
09:25 <    dissipate > brehaut, i see. well, mystery solved then
09:27 <      brehaut > the real question is why
09:27 <      brehaut > ,(and 1 2)
09:27 <   clojurebot > 2
09:27 <      brehaut > ,(and 1)
09:27 <   clojurebot > 1
09:27 <      brehaut > ,(and)
09:27 <   clojurebot > true
09:27 <      brehaut > or is actually the more consistent version
09:28 <    dissipate > ,(or 1 2
09:28 <   clojurebot > #<RuntimeException java.lang.RuntimeException: EOF while reading>
09:28 <    dissipate > ,(or 1 2)
09:28 <   clojurebot > 1
09:29 <      brehaut > or returns the first truthy thing, or nil (nothing)
09:29 <      brehaut > except in the circumstance where a false is present and no truthy thing is present
09:29 <    dissipate > brehaut, where is the inconsistency?
09:30 <      brehaut > or will return nil if all its expressions evaluate to nil
09:30 <      brehaut > and returns the last expression if they are all truthy
09:31 <    dissipate > brehaut, you mean if all the expressions evaluate to nill or false?
09:31 <      brehaut > correct
09:31 <    dissipate > ,(or false false true)
09:31 <   clojurebot > true
09:31 <    dissipate > ,(or false false)
09:31 <   clojurebot > false
09:31 <    dissipate > hmm, that's somewhat inconsistent
09:31 <    dissipate > why not nil?
09:31 <      brehaut > sort of
09:32 <      brehaut > because and and or are both weird in the presence of actual true and false
09:32 <      brehaut > ,(and 1 2 false)
09:32 <   clojurebot > false
09:32 <      brehaut > ,(and 1 2 3)
09:32 <   clojurebot > 3
09:32 <      brehaut > ,(and 1 2 nil)
09:32 <    dissipate > brehaut, why?
09:32 <   clojurebot > nil
09:32 <      brehaut > i presume its some kind of weird polymorphism
09:32 <      brehaut > if you are dealing with truth values you probably want truth values back
09:33 <      brehaut > otherwise you are dealing with objects and want objects back
09:33 <      brehaut > (and nil is the absense of an object)
09:33 <    dissipate > brehaut, is it the case that only predicate functions should return 'true' or 'false'?
09:33 <    dissipate > oh heck no. i don't want objects. maybe data structures, not objects
09:33 <      brehaut > its the case that predicates should return only true or false, but other functions that are not predicates may reasonably return them too
09:34 <      brehaut > what do you think a datastructure is?
09:34 <    dissipate > brehaut, are you referring to what it is in Java or in the theoretical sense?
09:34 <      brehaut > both
09:34 <    dissipate > brehaut, what non-predicate function should return true or false?
09:35 <      brehaut > how about get
09:35 <      brehaut > or first
09:35 <      brehaut > ,(first (repeat true))
09:35 <   clojurebot > true
09:35 <    dissipate > brehaut, yeah, i see your point there. if you are iterating over true or false themselves
09:35 <  technomancy > https://lein-survey-2014.herokuapp.com <- this year's edition of the lein survey is out
09:36 <  technomancy > please fill it in if you use leiningen
09:36 <      brehaut > technomancy: are you not westing this year?
09:36 <    dissipate > brehaut, a data structure is definitely not an object though. an object bundles functions with data. a data structure is just data.
09:36 <  technomancy > brehaut: sadly not
09:36 <      brehaut > technomancy: sorry to hear
09:37 <      brehaut > dissipate: a closure bundles function and data
09:37 <      brehaut > is that an object?
09:38 <       hfaafb > a map can have keys that point to both data and functions
09:39 <    dissipate > brehaut, no, a closure is a function that has access to data
09:39 <      brehaut > dissipate: you need to get your zen on then
09:39 <      brehaut > closures and objects are isomorphic to each other
09:39 <      brehaut > there is nothing inherently evil about objects
09:40 <      brehaut > merely the default statefulness people use in objects
09:40 <      brehaut > (let [a (atom 1)] (fn [] (swap! a inc)))
09:41 <    dissipate > brehaut, you do have a point. in Python, an object is just a dictionary with special stuff in it.
09:41 <      brehaut > is exactly as dangerous and problematic as any other object with statefulness
09:42 <    dissipate > brehaut, i'm thinking more along the lines of classes with inheritance, polymorphism and encapsulation. the biggest fail in software ever.
09:42 <      brehaut > inheritance sure, encapsulation reasonable case. polymorphism definately not a fail
09:43 <      brehaut > in spite of technomancy’s best efforts polymorphism is a fundamental part of clojure
09:43 <  technomancy > I don't mind a good polymorphic function
09:44 <  technomancy > (as long as it's part of clojure.core)
09:44 <      brehaut > :)
09:44 <      brehaut > a little, well considered, polymorphism goes a very long way
09:44 <      brehaut > not to mention higher order functions are polymorphic
09:44 <       talios > brehaut++
09:45 <      brehaut > hi
09:45 <  technomancy > transitive polymorphism??
09:45 <      lazybot > technomancy: Uh, no. Why would you even ask?
09:45  *      talios keeps saying breavehaut in his head
09:45 <      brehaut > haha
09:45 <       talios > brehaut - if you don't use lein, what are you using?
09:46 <      brehaut >  /ˈbriːəʊ/
09:46 <      brehaut > haha were did you get the idea i wasnt using lein?
09:46 <       talios > please not be saying Make :)
09:46 <      brehaut > Make‽ Make!!
09:46 <      brehaut > make is for kids
09:46 <  technomancy > I wrote a makefile the other day
09:46 <      brehaut > real developers use batch
09:46 <       talios > ewps - misread the scrollbuffer :)
09:46 <      brehaut > are you going to recinde my ++ now?
09:46 <       talios > technomancy - did it just call lein? :)
09:46 <  technomancy > talios: nah, it was for forth
09:47 <  technomancy >  
09:47 <       talios > good lord :)
09:47 <  technomancy > well, for a program that implements forth
09:47 <       talios > I'm not sure thats much better :) hah
09:47 <      brehaut > technomancy: apparently i have been using lein for too long “What annoys you about Leiningen?” nothing to check; have i become innerred to the problems?
09:47 <       talios > more hardcore for sure
09:48 <    dissipate > brehaut, well then clojure is doomed. might as well join the Haskellers pursuing purity at all cost.
09:48 <  technomancy > brehaut: I left out the "spoils me for other stuff" check, sorry
09:48 <       talios > dissipate: idris!!
09:48 <      brehaut > technomancy: lol indeed :)
09:48 <      brehaut > technomancy: seriously though, its been in public since 2009?
09:49 <  technomancy > brehaut: 1.0.0 was that december
09:49 <  technomancy > I think the `git init` happened on halloween
09:49 <      brehaut > it seems like it shouldnt be that long ago
09:49 <       talios > <oldname> i remember a time before leiningen - and that time was clojure-maven-plugin :)  oh wait, still is.
09:50 <       talios > s/name/man/
09:50  *      talios kicks his typing
09:50 <      brehaut > i scrabbled stuff together with bash scripts :P
09:50 <       arrdem > talios: typically kicking your hands doesn't improve your touch typing
09:50 <      brehaut > none of this maven nonsense
09:51 <       talios > arrdem - true true. maybe that's the problem.
09:52 <    dissipate > brehaut, i want none of this Java nonsense. i'm switching to Arc
09:53 <      brehaut > if you wanted non of java, clojure was the wrong choice
09:57 <    dissipate > brehaut, how about clojure on the GHC?
09:57 <      brehaut > technomancy: this forth, did you day its running _on_ your keyboard?
09:58 <      brehaut > s/day/say/
09:58 <      brehaut > apparently talios isnt the only one who cant type today. i blame the late hour
09:58 <  technomancy > brehaut: not yet
09:58 <  technomancy > brehaut: I don't have conditionals implemented yet
09:58 <      brehaut > yet
09:58 <  technomancy > well
09:58 <      brehaut > hah
09:58 <  technomancy > I have if, but not endif
09:59 <       talios > dissipate - how about newlisp?
09:59 <  technomancy > which makes things awkward
09:59 <    dissipate > technomancy, why are you implementing Forth?
09:59 <  technomancy > dissipate: because my keyboard firmware is currently written in C
10:00 <  technomancy > I want to hack it, but I don't like programming in languages that aren't interactive
10:00 <    dissipate > technomancy, interesting
10:00 <  technomancy > https://github.com/technomancy/orestes https://github.com/technomancy/atreus
10:01 <    dissipate > talios, how big is the library for newlisp? i'm guessing it is pretty small.
10:01 <      brehaut > technomancy: every time you name a project i feel like i am underread
10:01 <  technomancy > brehaut: you're in luck; these are both named from the same book
10:02 <      brehaut > i feel like i should recognise this; the former is some relation to agamemmnon right?
10:02 <       talios > dissipate - no idea, small I think.  I only came across it a few months back and only briefly looked at it.
10:02 <  technomancy > brehaut: yeah
10:02 <  technomancy > both are, actually
10:02 <      brehaut > both parents?
10:02 <  technomancy > no, son and grandfather
10:02 <      brehaut > ah
10:02 <  technomancy > atreus is where we get atriedes from Dune
10:02  *     brehaut fails at myth
10:03 <      brehaut > oh true
10:03 <      brehaut > presumably also atreus from myst
10:03 <  technomancy > oh yeah
10:03 <  technomancy > the father?
10:03 <      brehaut > i think so yeah
10:04 <  technomancy > cool; I had forgotten that
10:04 <      brehaut > acenar and something are the sons?
10:04 <  technomancy > sirrius
10:04 <      brehaut > thats right
10:04 <      brehaut > i need to play riven
10:04 <  technomancy > it's pretty good
10:04 <  technomancy > I didn't get into the third one, but I didn't give it much of a chance
10:05 <       arrdem > technomancy: so what you're telling me is that when I try and do an embedded Clojure compiler, it's gonna be codenamed Corrino....
10:05 <      tmciver > I just finisehd playing realMyst. Not bad but the 3D graphics look like they're from 10 years ago.
10:05 <    dissipate > talios, same problem that Graham has with his Arc language: not enough libs
10:05 <      brehaut > tmciver: yeah i only played realMyst a couple of years ago and frankly only look 10  years old is an improvement ;)
10:05 <      tmciver > I think the names were Atrus, Sirrus and Achenar.
10:05 <  technomancy > arrdem: you could do Ordos
10:06 <  technomancy > tmciver: oh, right. close enough.
10:06 <      brehaut > dissipate: i wonder how clojure got all libs so quickly? surely its not all this java stuff we can leverage for free…
10:07 <      tmciver > I was dissappointed by the 'new' Rime age.
10:07 <      brehaut > tmciver: the little snow place ?
10:07 <      tmciver > brehaut: yup
10:07 <      brehaut > i wasnt expecting a real age so i wasnt too disappointed
10:07 <      brehaut > but i had hoped it would have a bit more story in it
10:08 <    dissipate > brehaut, but there is actually a big cost there. there is little incentive to write enough native libs to ever escape the JVM.
10:08 <      tmciver > Now I'm going to have to play Riven . . . again . . . for like the fourth time.
10:08 <      brehaut > tmciver: sorry man
10:09 <      brehaut > dissipate: every tradeoff comes with costs and benefits. news at 11?
10:09 <    dissipate > brehaut, the goal is to eventually ditch the JVM, right?
10:09 <      brehaut > no
10:10 <      brehaut > the jvm is a serious advantage
10:10 <      brehaut > its not suitedto every task but when it is it kicks a lot of arse
10:11 <    dissipate > brehaut, we need a lighter weight VM written in clojure itself
10:11 <      brehaut > dissipate: perhaps you need to go aquaint yourself with the strengths of the JVM before you make such comments
10:12 <    dissipate > brehaut, the startup time is horrendous. that's problem enough.
10:12 <  technomancy > dissipate: so target racket or something
10:12 <  technomancy > starting from scratch is a waste of time
10:13 <    dissipate > technomancy, actually, clojurescript might start dominating in the future.
10:13 <       arrdem > dissipate: .... or not.
10:13 <      brehaut > lol
10:13 <  technomancy > heh
10:14 <    dissipate > brehaut, are you saying the JVM is better than the javascript VMs?
10:14 <      brehaut > for all tasks? no. for many tasks? yes
10:14 <  technomancy > not having integers or standardized file IO is kind of a deal killer for most people
10:15 <      brehaut > and having a memory model designed to handle concurrency is nice to have too
10:15 <    dissipate > brehaut, what about Parrot VM?
10:16 <      brehaut > rhymes with pipe dream
10:16 <    dissipate > brehaut, good enough for Perl 6, right?
10:28 <    seangrove > ~bbloom
10:28 <   clojurebot > bbloom is a dendrologist
10:28 <    seangrove > boom
10:28 <      brehaut > O_o
10:30 <      brehaut > ooooh
10:30 <      brehaut > ~gfredericks
10:30 <   clojurebot > gfredericks is polluting your memory and must be destroyed
10:30 <    dissipate > inc clojurebot
10:31 <    dissipate > ,(inc clojurebot)
10:31 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: clojurebot in this context, compiling:(NO_SOURCE_PATH:0:0)>
10:40 <    TEttinger > (inc clojurebot)
10:40 <      lazybot > ⇒ 37
10:41 <     zspencer > (swap! lazybot 5)
10:41 <       Raynes > lol
10:41 <     zspencer > I... I think I broke it?
10:42 <    dissipate > (inc clojurebot)
10:42 <      lazybot > ⇒ 38
10:42 <       Raynes > zspencer: (inc ..) entirely fake.
10:42 <       Raynes > is entirely fake*
10:42 <    dissipate > ,(slurp 'http://www.www.com')
10:42 <   clojurebot > #<IllegalArgumentException java.lang.IllegalArgumentException: Cannot open <http://www.www.com'> as an InputStream.>
10:42 <       Raynes > It's parsed manually. The formatting is more of a joke than anything. No actual code is excuted there. :P
10:43 <     zspencer > Raynes: I figured; I was oping that maybe; just maybe....
10:45 <   skelternet > I've encountered something I do not understand.  I cannot seem to pprint an instance of java.util.GregorianCalendar
10:45 <   skelternet > I get an arityException
10:46 <       beamso > same
10:47 <       beamso > print works though
10:48 <   skelternet > nice to have company.  think it's a bug?
10:49 <   skelternet > do I need to write a new writer function?
--- Log closed Wed Mar 26 12:01:01 2014
--- Log opened Wed Mar 26 12:01:23 2014
12:01 -!- Irssi: #clojure: Total of 672 nicks [1 ops, 0 halfops, 0 voices, 671 normal]
12:01 -!- Irssi: Join to #clojure was synced in 26 secs
12:21 <    startling > It seems like rebindings of dynamic variables don't persist past protocol method calls, is that true? why? can it be avoided?
12:25 <    startling > oh, no, I'm wrong. I see why, though.
12:27 <    startling > I pass a function that uses a dynamic variable to 'map'; when this function gets called, it sees the original value of the bound variable. Can this be avoided?
12:30 <    startling > example: https://gist.github.com/startling/9777360
12:32 <    startling > I suspect the answer is "make a pull request that judiciously eliminates all use of dynamic variables".
12:35 <       arrdem > startling: yep, dynamic vars tend to be a major code smell
12:37 <  ddellacosta > startling: as arrdem says...I have rarely found a situation where a dynamic var was the right choice.  More to the point, using pure functions as much as possible helps being able to reason about your code, tremendously.
12:37 <    startling > ddellacosta: I agree 100%
12:37 <    startling > alas, I'm using other peoples' code.
12:37 <  ddellacosta > startling: ah, gotcha
12:37 <       arrdem > startling: yeah PR that shit when you get time to fix it
12:38 <       arrdem > startling: that's one thing I've been bad about lately, use a lib, don't like its design, spend the first two days rewriting it and then do a "fixed yo shitz" pr
12:40 <  ddellacosta > arrdem: that's kind of problematic though, 'cause I hate spending time on a pull request before I've had a chance to hash it out with the lib author. If they don't accept your fix for any reason it may be a waste...
12:40 <  ddellacosta > arrdem: I mean, still a good thing to do generally speaking
12:40 <       arrdem > ddellacosta: sure.
12:40 <       arrdem > ddellacosta: if I ever do finish cloutjure one thing I wanted to get to was library clout
12:40 <    startling > well, this is a pretty clear-cut bug, so I'm not that worried about it.
12:41 <    startling > I *am* worried about the author being MIA, considering the last commit is 2 years old.
12:41 <       arrdem > startling: which lib?
12:41 <    startling > https://github.com/lancepantz/clj-yaml
12:41 <    startling > lancepantz: hey
13:09 <    startling > lancepantz, I PR'ed a fix to clj-yaml; if you don't want to deal with it I'd be happy to take over maintenance.
13:21 <    TEttinger > SnakeYAML wasn't exactly a high-performance library last I heard.  someone mentioned taking 10 seconds to parse config files (he was using scala with no wrapper around SnakeYAML IIRC), but he had a fairly old computer
13:22 <    TEttinger > (we're talking under 1 MB config I think)
13:23 <    startling > TEttinger: do you have a recommendation?
13:24 <    TEttinger > unfortunately no, other than use EDN...
13:25 <    startling > TEttinger: that's not an option for us, unfortunately.
13:25 <    TEttinger > I helped the guy I'm talking about look for a replacement and couldn't find anything
13:25 <    TEttinger > YAML's grammar isn't exactly simple is it...
13:25 <       socksy > so in clojure, what's the idiomatic way for doing something like mean squared error? In an imperative language I would have a mutable variable and keep adding to it. This feels like bad practice in clojure
13:26 <    startling > TEttinger: heh
13:26 <       arrdem > socksy: map and reduce are gonna be your friends
13:26 <  gfredericks > ,(def square #(* % %))
13:26 <   clojurebot > #'sandbox/square
13:27 <  gfredericks > ,(->> (map - [1 2 3] [4 5 6]) (map square) (reduce +))
13:27 <   clojurebot > 27
13:27 <       arrdem > gfredericks: you're missing a (/ (count))
13:27 <  gfredericks > yep
13:29 <       socksy > there's a confounding problem, in that this is being passed as a function to a map. So effectively I already have a function acting as map, called "read-and-do", which is a convenience function around with-open, which takes a function to do to each line
13:30 <       arrdem > socksy: there's your problem
13:30 <       socksy > indeed
13:30 <       arrdem > socksy: you want to read _all_ your input and build one datastructure
13:30 <       arrdem > socksy: then you take _all_ that data and transform it
13:30 <       arrdem > socksy: iterate until you've got the result you want
13:30 <       socksy > that's nice and all, but my data is generally bigger than my RAM
13:31 <       socksy > though I suppose I could load it up on to a large AWS instance
13:31 <       arrdem > then you need to leverage lazy evaluation to achieve streaming computation.
13:31 <       arrdem > which in many cases you'll just get magically if you write idiomatic code.
13:32 <  gfredericks > well
13:32 <  gfredericks > resource management isn't magical
13:32 <       socksy > i don't see how idiomatic code gets around the fact that "slurp" puts everything into a string?
13:32 <  gfredericks > right
13:32 <  gfredericks > you don't use slurp
13:32 <  gfredericks > you use line-seq
13:33 <  gfredericks > or something
13:33 <  gfredericks > you just have to be sure that you've consumed the whole thing before your with-open finishes
13:34 <       socksy > my read-and-do is a very basic wrapper around line-seq because i found myself typing that code out repeatedly :)
13:34 <  gfredericks > sure
13:35 <  gfredericks > is there something still unclear about this? I've lost track of the question
13:36 <       arrdem > gfredericks: resource management to not blow ram
13:36 <  gfredericks > (with-open [r ...] (->> (line-seq r) (map parse-somehow) (map ...) (reduce ...)))
13:36 <       socksy > well, more just an idiomatic way to make this into a map function
13:37 <  gfredericks > I wrote most of MSE as map/reduce above
13:38 <       socksy > indeed, thanks! But what does your code mean when you say "map parse"? line-seq is lazy, and map is doing it lazily, and then you map that into a different map?
13:38 <       socksy > wait, scrap the last bit
13:39 <  gfredericks > the mapping is lazy, the reduce forces the whole thing; but neither the whole original seq nor the intermediates are ever in memory at once
13:40 <  gfredericks > which is of course exactly what laziness is buying you
13:40 <       socksy > aha, so it's still a lazy construct by the time of the second map
13:41 <       socksy > and hopefully the reduce will cause it to execute before closing the file
13:41 <       socksy > right, I'll play around with that, thanks for the help!
13:48 <    startling > lancepantz, another PR; this one's a security issue.
13:51 <         bob2 > <3 clojuring
13:56 <       nwolfe > Anybody working with Omchaya or is there a more appropriate place to ask this?
13:57 <       nwolfe > Ha I bet the clojurescript channel would be the better place.... :D
13:58 <      amalloy > startling: i don't think lancepantz really reads IRC much. he'll just notice the github notification probably
13:58 <      amalloy > gfredericks: you're on irc at clojure/west? or went home already? (that's what i did)
13:58 <    startling > amalloy, there are a number of other open PRs, I mentioned it here on the off chance he was around.
14:01 <  gfredericks > amalloy: I'm did not go home already
14:32 <   Frozenlock > I think the cljs advanced compilation is screwing up something here... https://www.refheap.com/65821
14:33 <   Frozenlock > Any advice?
14:37 <      amalloy > Frozenlock: if you don't have externs defined for the jquery plugin or whatever you're using, the closure compiler will rename all dot-interop methods to save characters. but since it's not actually rewriting the jquery code itself, the chosen name doesn't exist there
14:37 <   Frozenlock > Ah right.... that's the aget/aset thing, correct?
14:37 <      amalloy > so i think you either need externs, or to use something like (.apply (aget foo "modal") foo "show")
14:38 <      amalloy > i don't recall the details, since i don't use cljs, but i presume that's enough to make sense to you
14:38 <   Frozenlock > It does, thank you very much.
14:49 <      luxbock > I'd like to define a couple of helper functions in my profiles.clj and then inject them into clojure.core with vinyasa. does anyone know if there's a way for me to do this without having to define the functions in their own separate namespace/library of their own
14:50 <      luxbock > at first I tried defining them as normal in :injections, and then using vinyasa.inject/inject to inject those functions from the user namespace but that didn't work
15:08 <       beamso > i didn't realise there was a lein survey out
15:12 <   zachmassia > I'm working on converting some js code over to cljs, and wondering if there is a better / cleaner way to write this: https://gist.github.com/ZachMassia/0cc4675b1ce7bbe6746c
15:18 <       beamso > maybe inc and dec instead of + and -?
15:20 <   zachmassia > beamso: Good call, that will clean it up a bit. Apart from that it's fine though? Fairly new to clojure and functional programming
15:22 <       beamso > looks okay to me
15:22 <       beamso > from a weird perspective i hate the change from > to < and back again
15:23 <       beamso > but i also hate the .js file leaving off curly brackets for the if cases so :/
15:25 <   Frozenlock > What's the difference between using an atom and transcient/persistent?
15:25 <   zachmassia > Heh, didn't write the js :P, but now that you mention it I think I might move that last when up with the first one to keep it symmetrical
15:26 <       beamso > zachmassia: it's more that it jumps back and forth between less and more
15:26 <       beamso > not the ordering of the tests
15:27 <       beamso > Frozenlock: http://stackoverflow.com/a/15722398
15:27 <   Frozenlock > Thanks
15:32 <   zachmassia > Would this be a case where a transient is appropriate? I didn't really use it for the performance gains here
15:36 <   Frozenlock > ,(let [[i j] [4 5] size 5] (for [x [-1 1] y [-1 1] :let [new-x (+ i x) new-y (+ j y)] :when (every? #(< % size) [new-x new-y])] [new-x new-y]))
15:36 <   clojurebot > ([3 4])
15:36 <   Frozenlock > https://www.refheap.com/65834
15:37 <   Frozenlock > (or something like that...)
15:41 <   zachmassia > Hmm, initially that seems harder to read
15:42 <   Frozenlock > Really? o_O
15:44 <   zachmassia > lol, I'm still getting used to the lisp way of doing things
15:46 <   zachmassia > I'm attempting to port http://cjlarose.com/2014/01/09/react-board-game-tutorial.html over to om
15:47 <   Frozenlock > zachmassia: You might want to give reagent a try (especially if you are beginning with clojure) http://holmsand.github.io/reagent/
15:51 <       mpenet > zachmassia: atoms vs transients: one is a mutable ref the other is just an optimisation for performance (that you should never bash in place, which is what you were probably thinking of doing)
15:51 <       mpenet > http://clojure.org/transients
15:53 <   zachmassia > Frozenlock: I came across Reagent last week I believe. Any reason you suggest it over om?
15:54 <   zachmassia > mpenet: Ya, I think I'm probably focusing too much on directly porting the logic from the js code instead of the overall result
16:00 <        locks > zachmassia: https://github.com/levand/quiescent#rationale
16:07 <   zachmassia > locks: Interesting read, thanks for the link :) I'll make sure to bookmark that one
16:08 <        locks > yeah, it’s a nice overview of the three libraries
16:12 <   zachmassia > Frozenlock: Your snippet is giving me different results than the original fn: https://gist.github.com/ZachMassia/0cc4675b1ce7bbe6746c
16:18 <    vmarcinko > hello, noob question, i guess around data readers
16:18 <    vmarcinko > i try to read datomic scehma.edn from my file
16:18 <    vmarcinko > (read-string (slurp (io/resource "datomic/schema.edn"))) works OK
16:18 <    vmarcinko > but when Iuse EDN reader
16:18 <    vmarcinko > via
16:19 <    vmarcinko > (edn/read-string (slurp (io/resource "datomic/schema.edn")))
16:19 <    vmarcinko > i get error: No reader function for tag db/id
16:20 <    vmarcinko > i thought reader functions are same for both clojrue reader and edn reader, no? and datomic jar has these readers registered for both, no?
16:21 <    vmarcinko > reader function i meant for datomic jar
16:22 <    trap_exit > is there a way, in clojure, to forward declare variables _across_ namespaces ?
16:22 <    trap_exit > i.e. foo/cat and bar/dog mutualy call each other
16:22 <    trap_exit > is there a way to make this work?
16:22 <    trap_exit > (foo + bar are namespaces, cat +dog are functions)
16:23 <        noidi > if they're so closely intertwined, they probably belong to the same namespace
16:28 <        Pate_ > what's the minimum code I need to "run" a fn in a .clj file?
16:28 <        Pate_ > do I have to have a -main fn?
16:28 <         xsyn > nope
16:28 <         xsyn > you can execute from top down without lein boilerplating
16:31 <        Pate_ > so (defn foo ...) (foo)  in my-file.clj?
16:35 <        Pate_ > what's the shortest way to run a clojure file from the command line without using lein?
16:38 <        Pate_ > is there any help on installing cake on Windows?
16:38 <         clgv > Pate_: why not lein, the defacto standard build tool for clojure?
16:38 <        Pate_ > does lein have a persistent jvm in the bg?
16:38 <         clgv > no. does cake?
16:39 <         clgv > Pate_: do I remember correctly that you are the one that wants to use clojure CLR in the powershell for devops?
16:39 <    dissipate > how do you get lein to load dependencies from outside a project folder?
16:40 <        mengu > would it make sense to have a clojurescript talk in a frontend conference?
16:40 <        Pate_ > nope, not me. but that sounds like a cool idea!
16:41 <        Pate_ > apparently cake tries to keep a jvm around: https://github.com/ninjudd/cake/wiki/Persistent-JVM
16:41 <         clgv > dissipate: you usually need to specify everything as dependencies in the project.clj so that leiningen automatically adds the jars to the classpath. but there might be an option to specify classpath additions
16:41 <        Pate_ > mengu, absolutely, esp. if you show Om.
16:42 <    dissipate > clgv, then what is the point of the ~/.m2 directory?
16:42 <        Pate_ > I also found Drip, which supposedly works with lein to keep a JVM around for faster startup: https://github.com/flatland/drip
16:42 <         clgv > dissipate: ah thats the maven cache. anything in there is found when you add its maven coordinates to the dependencies declaration in yourproject.clj
16:43 <         clgv > Pate_: yeah and technomancy had some project for that as well. but I did not try any of them, so I can't recommend any ;)
16:44 <    dissipate > Pate_, have you tried POM?
16:44 <        Pate_ > not familiar with pom
16:44 <        Pate_ > (clojure noob)
16:44 <    dissipate > Pate_, sorry, i meant Pomegranate. https://github.com/cemerick/pomegranate
16:45 <         clgv > pomegranate is just for adding dependencies on the fly to a running repl
16:45 <    dissipate > supposedly it allows you to load depedencies on the REPL so you don't have to reload the REPL
16:45 <        Pate_ > that's cool
16:45 <         clgv > and is used in leiningen afaik
16:45 <         clgv > Pate_: but mind the warning in the readme "Please note that there are a number of scenarios in which add-dependencies will not work, or will not work as you'd expect."
16:46 <        Pate_ > ok. so how do I get a persistent jvm running on windows for faster clj startup?
16:46 <    dissipate > clgv, so lein acts as a 'virtual environment' for a project as well?
16:47 <         clgv > dissipate: I am not entirely sure what you mean with 'virtual environment'
16:47 <    dissipate > i guess i'm a bit confused because in the python world 'pip' and 'virtualenv' are two different tools
16:48 <    AeroNotix > dissipate: dependencies are much better in the JVM world than they are in Python
16:48 <        Pate_ > does Drip work on Windows? https://github.com/flatland/drip
16:48 <    AeroNotix > dissipate: maven allows you to have a myriad of the same library in your "site-packages"
16:48 <    AeroNotix > when lein runs, it creates the JVM's version of PYTHONPATH each time
16:48 <        Pate_ > drip keeps a fresh jvm around, instead of using a persistent jvm around, which can cause problems over time.
16:48 <         clgv > well a project should depend on a concrete version of the library it uses and leiningen pulls them in for you
16:48 <    AeroNotix > thus giving your library a "virtualenv"
16:49 <    AeroNotix > dissipate: it works properly, unlike the hacks venv has to do to work.
16:49 <    dissipate > AeroNotix, i see. i'm starting to understand that lein is what are separate tools in other language ecosystems. :O
16:49 <         clgv > it is funny how you get the urge to run away screaming when someone explains you how dependencies and libraries work in GNU R
16:50 <    AeroNotix > dissipate: there's no downside to them being the same tool, in fact it works better
16:50 <         clgv > dissipate: well as AeroNotix pointed out the dependency approach is different
16:50 <        Pate_ > (canonical Drip repo: https://github.com/ninjudd/drip)
16:50 <    dissipate > AeroNotix, yeah, it's pretty nifty. can't wait to publish my first project to clojars. :P
16:51 <         clgv > Pate_: drip seems very *nix-only from its readme
16:51 <        Pate_ > :(
16:51 <    dissipate > i'm working on a RNG library that uses different sources of entropy and will have a better 'shuffle' function
16:52 <        Pate_ > there's not a lot of C code, so could probably be ported to Windows.
16:52 <        Pate_ > or made cross-platform.
16:53 <    dissipate > my god, someone is porting AIXI to clojure!
16:59 <        Pate_ > how do I write to stdout when I'm in a REPL?
16:59 <        Pate_ > (prn "test") ?
17:00 <         clgv > print/println
17:00 <         clgv > ,(println "Hello!")
17:00 <   clojurebot > Hello!\n
17:00 <         clgv > ,(prn "Hello!")
17:00 <   clojurebot > "Hello!"\n
17:00 <         clgv > prn/pr is for serialization to text
17:02 <        Pate_ > how do I tell lein where to load Clojure from, after I downloaded and unzipped Clojure 1.6?
17:02 <        Pate_ > or do I just add it as a dependency to any project.clj and run?
17:02 <      Morgawr > Pate_: Lein uses its own Clojure, you don't need to download/unzip clojure yourself
17:03 <      Morgawr > just list clojure as a dependency of a project and it will be downloaded automatically
17:03 <      Morgawr > aka :dependencies [[org.clojure/clojure "1.6.0"]] in theproject.clj
17:03 <      Morgawr > the project*
17:05 <   BalkyDwarf > completely off topic(s) but I just came across this blog post and found it very well done and nicely simple: http://www.clojured.com/2013/04/writing-clojureclojurescript-web.html
17:06 <        Pate_ > BalkyDwarf, nice post.
17:12 <   BalkyDwarf > Pate_: yeah it makes me feel like pedestal is not really needed... pedestal is too rails-like and springfuse-like for me...
17:12 <        Pate_ > Pedestal is too big. It expounds on its simplicity, but it is too complex.
17:13 <        Pate_ > I suspect that Om combined with sente/http-kit will win the common Clojure real-time story.
17:15 <   BalkyDwarf > Pate_: oh ok, never heard of those... do they allow to make clojure + clojurescript webapps ?
17:16 <        Pate_ > yes. Om is a ClojureScript integration on top of React. It blows away anything MV*: swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/
17:17 <        Pate_ > the immutable Cljs memory model makes React's virtual DOM diffs near O(1), as far as I can tell.
17:17 <        Pate_ > so you always re-render the whole "scene" or page, but the actual DOM changes are heavily batched and optimized. This lets you forget about state in the DOM.
17:18 <   BalkyDwarf > Pate_: thanks, sounds interesting. Does it provide some tools for client/server communication via ajax/websocket?
17:18 <        Pate_ > no, that's where sente comes in
17:18 <      Morgawr > I personally prefer quiescent over Om, it's simpler and for my use cases (aka very simple web apps) it feels much easier to reason about, check it out if you don't know it :)
17:18 <        Pate_ > sente lets you do realtime over core.async channels
17:18 <        Pate_ > Morgawr, had not heard of Quiescent.
17:19 <      Morgawr > https://github.com/levand/quiescent
17:19 <   BalkyDwarf > thank you guys
17:19 <      Morgawr > it's similar to Om in some ways but very different in others
17:19 <        Pate_ > BalkyDwarf, and with an additional 13 lines, swannodette added undo to the "todo" example: http://swannodette.github.io/todomvc/labs/architecture-examples/om-undo/index.html
17:21 <        Pate_ > Morgawr, Quiescent looks really interesting. Also hadn't heard of reagent: http://holmsand.github.io/reagent/
17:32 <     deobalds > We're attempting to use clojure.java.jdbc without any libs on top of it. We're writing some tests which hit the db (just using clojure.test). We've written a fixture which wraps the test in a transaction so we roll back our changes to the test db, but clojure.test/use-fixtures doesn't seem to run if we run a test individually (M-c M-, in our case). Does anyone have any advice in this area?
17:35 <   BalkyDwarf > Morgawr: what do you use, if anything, alongside  quiescent, for ajax / websockets? sense or core.async or something else?
17:37 <      Morgawr > BalkyDwarf: heh, I'm not much of a webdev, I just played around with quiescent (still a WIP to remake my site but exams have been slowing me down)
17:37 <      Morgawr > I know quiescent is pretty much made to work with core.async for channels
17:37 <      Morgawr > and that's what I'm going to use to propagate events
17:37 <      Morgawr > but that's it, really
17:38 <   BalkyDwarf > Morgawr: thanks!
17:53 <   BalkyDwarf > random ranting: from devops perspective, I wonder which is a lesser evil - something extremely young like http-kit, or a dinosaur like tomcat. I guess ring+jetty is a good middle ground, but that feels too organically grown for some reason...
18:31 <        noidi > deobalds, I've just run (my-fixture my-test) in the REPL
18:32 <        noidi > I'm sure you can write a bit of elisp to do that for you. personally I wouldn't bother, given that recalling the previous entry in the REPL takes only a couple of keystrokes.
18:35 <      xyproto > When building clojure from source, with the intent of packaging it for a linux distro, is it better to use ./antsetup.sh + ant or mvn package?
18:36 <      xyproto > readme.txt on github mentions both methods, but I don't know which method would be preferrable
18:36 <      xyproto > *preferable
18:36 <       beamso > for a silly comparison, homebrew on mac os x distributes leiningen instead of clojure
18:36 <      xyproto > And is the topic correct, is it not 1.6.0 that is the latest release version?
18:37 <       beamso > it is 1.6.0 but i haven't seen anyone with ops
18:38 <      xyproto > beamso: all programming languages wants to use their own language-specific package manager. This looks like the best solution from the point of view from the respective languages. From the perspective of packaging packages for a distro, they should be all be packaged in a somewhat similar way. (Until someone does something sensible, like making a package manager where the language-related package managers
18:38 <      xyproto > are included as plugins).
18:39 <      xyproto > beamso: that's why I just can't package leiningen and call it a day, for now :/
18:41 <       beamso > yes and no
18:42 <      xyproto > how does one run maven in order to only perform the tests, after having built clojure?
18:43 <       beamso > mvn clean package should run the tests
18:43 <      xyproto > beamso: yes, but I only wish to run the tests
18:43 <       beamso > mvn test
18:43 <      xyproto > beamso: first build, then test
18:43 <      xyproto > beamso: ok, thanks!
18:43 <      xyproto > beamso: (in two separate functions in the package description)
18:44 <       beamso > in mvn, package depends on test
18:44 <       beamso > compile doesn't depend on test
18:44 <      xyproto > beamso: great!
18:44 <      xyproto > beamso: testing it now
18:45 <       beamso > it looks like mvn calls out to ant anyway
18:46 <      xyproto > beamso: when run with "mvn test" it tries to compile clojure even though it has already been compiled with "mvn package -Dmaven.test.skip=true"
18:47 <       beamso > if the timestamps aren't being checked i can see that happening
18:47 <      xyproto > ok, but your answer didn't work
18:48 <       beamso > a) i've never compiled clojure before
18:48 <       beamso > b) i believe you're asking me why maven isn't working as you'd expect
18:49 <      xyproto > beamso: a) then why are you answering like you know the answer and b) it's not only maven, but the build system + configuration chosen by clojure
18:49 <    AeroNotix > Guys, chill
18:49 <      xyproto > AeroNotix: am chill :)
18:49 <       beamso > i'm simply using my knowledge of maven and looking at what i see in the github repo
18:50 <      xyproto > I blame myself for asking before researching. Thanks for the help.
18:52 <       beamso > TIL clojure is distributed compiled in debian
18:54 <      reQunix > Should someone update the topic since 1.6.0 has been released?
18:56 <     hyPiRion > reQunix: yeah
18:56 <     hyPiRion > technomancy: you know what you have to do
19:08 <       mskoud > Topic need change :-)
19:14 <         clgv > does someone fill out a tally sheet of how often the topic remark occurs? :P
19:16 <      Averell > only 6 times since yesterday.
19:17 <      reQunix > It'll stop once the topic is updated... Consider it added motivation. : )
19:31 <        sm0ke > ,(java.util.Date. Long/MAX_VALUE)
19:31 <   clojurebot > #inst "292278994-08-17T07:12:55.807-00:00"
19:31 <        sm0ke > wish some one lives to face the end of timestamp problem
19:32 <     hyPiRion > That is not the timestamp problem
19:33 <     hyPiRion > sm0ke: http://www.youtube.com/watch?v=-5wpm-gesOY is the "timestamp" problem
19:37 <       beamso > i thought the time problem was in 2037.
19:37 <        sm0ke > ,(java.util.Date. Integer/MAX_VALUE)
19:37 <   clojurebot > #inst "1970-01-25T20:31:23.647-00:00"
19:38 <        sm0ke > ,(java.util.Date. 0)
19:38 <   clojurebot > #inst "1970-01-01T00:00:00.000-00:00"
19:38 <       beamso > something like that one
19:39 <        sm0ke > ,(java.util.Date. -1000000000000)
19:39 <   clojurebot > #inst "1938-04-24T22:13:20.000-00:00"
19:39 <       beamso > oops.  2038.
19:39 <       beamso > http://en.wikipedia.org/wiki/Year_2038_problem
19:39 <        sm0ke > ,(java.util.Date. Long/MIN_VALUE)
19:39 <   clojurebot > #inst "292269055-12-02T16:47:04.192-00:00"
19:39 <        sm0ke > hmm look weird
19:41 <         ned- > does anyone know why this exception is being thrown ? http://pastie.org/8970117
19:48 <       beamso > for the earlier one, should it be (use 'clojure.contrib.duck-streams)
19:48 <       beamso > ?
19:50 <       beamso > and for the second, (:require [clojure.contrib.duck-streams :refer spit])
19:50 <       beamso > ?
19:50 <         clgv > yay apparently I build a dead lock when on my first attempt to build a thread-safe "require"
19:51 <       beamso > actually, (:require [clojure.contrib.duck-streams :refer [spit]])
19:53 <     hyPiRion > beamso: spit was integrated into Clojure core in 1.3.0 I believe
19:53 <         clgv > ,(meta #'spit)
19:53 <   clojurebot > {:ns #<Namespace clojure.core>, :name spit, :arglists ([f content & options]), :column 1, :added "1.2", ...}
19:53 <     hyPiRion > oh, even earlier
19:53 <         clgv > pretty close ;)
19:53 <     hyPiRion > I just remember that clojure.contrib was abandoned in 1.3
19:54 <      AimHere > I dread any language that doesn't just let me spit and slurp files as and when needed now
19:54 <         ned- > welp that explains it
19:54 <       beamso > oh.  maybe that answer's ned-'s questions better.
19:54 <         ned- > wheres duck-streams now
19:54 <     hyPiRion > ned-: you can just use `spit` without requiring anything these days :)
19:54 <         ned- > hyPiRion: ooh thank you sir.
19:54 <     hyPiRion > I believe everything in duck-streams is in clojure.core
19:54 <     hyPiRion > or in clojure.java.io
19:55 <     hyPiRion > at least spit and slurp is in clojure core
19:56 <         clgv > I have an immediate mental image of "duck-streams", anyone else?
19:57 <     hyPiRion > clgv: http://i.imgur.com/FsxIVgT.jpg
19:57 <         clgv > hyPiRion: almost ,)
19:57 <         clgv > I'd imagine several ducks on the water^^
19:58 <         atyz > clgv: This? http://image.shutterstock.com/display_pic_with_logo/410935/410935,1278271292,5/stock-photo-a-pair-of-ducks-in-a-gushing-stream-56501821.jpg
19:59 <         clgv > atyz: :D
20:52 <     lnostdal > what's the difference between fn and fn*     ?
20:52 <CookedGryphon > fn* is an internal implementation detail, don't use it unless you're tweaking the language
20:53 <     lnostdal > yeah, i'm curious about what it does internally compared to fn
20:53 <     hyPiRion > lnostdal: ##(macroexpand-1 '(fn [[a b]] (+ a b)))
20:53 <      lazybot > ⇒ (fn* ([p__17884] (clojure.core/let [[a b] p__17884] (+ a b))))
20:53 <     lnostdal > i'm not using it directly; code like   #(if % :x :y)   will generate it
20:53 <CookedGryphon > well for a start, I think it's defined in java
20:53 <     hyPiRion > one of the details
20:56 <         clgv > do we have a specialized string compare in clojure that compares strings starting with a number by that number?
20:56 <         clgv > I'd guess someone wanted that behavior already ;)
20:57 <         clgv > otherwise I'd hack it together via regex and parseLong
20:58 <     hyPiRion > clgv: what would happen if the string doesn't start with a number?
20:59 <     hyPiRion > ,*clojure-version*
20:59 <   clojurebot > {:interim true, :major 1, :minor 6, :incremental 0, :qualifier "master"}
21:00 <         clgv > hyPiRion: that's definition, either lesser or greater than then ones with a number
21:00 <     hyPiRion > alright
21:01 <         clgv > hyPiRion: somehow similar to when I use (sort-by :id data-coll) and there might be no :id in some items
21:05 <     hyPiRion > ,(sort-by #(some-> (re-find #"^-?\d+" %) Long/parseLong) ["100 ten" "void" "103 foo" "-40 40"])
21:05 <   clojurebot > ("void" "-40 40" "100 ten" "103 foo")
21:05 <     hyPiRion > clgv: ^?
21:07 <         clgv > hyPiRion: looks good :D - guess it is to specialized for clojure.core.* namespaces ;)
21:07 <CookedGryphon > is there a looping construct like this: https://www.refheap.com/66001
21:08 <        TimMc > clgv: As opposed to version number comparison?
21:08 <CookedGryphon > i find myself writing loop, when-let, recur so often in this basic format with core async
21:08 <         clgv > TimMc: pardon?
21:08 <     hyPiRion > clgv: yeah, seems probably a bit too specialised. It's not hard to make yourself though :)
21:08 <         clgv > CookedGryphon: write yourself a "while" macro
21:08 <        TimMc > Well, numerical sorting in a file listing shares some properties with version number sorting, but it's not the same.
21:09 <         clgv > ,(doc while)
21:09 <   clojurebot > "([test & body]); Repeatedly executes body while test expression is true. Presumes some side-effect will cause test to become false/nil. Returns nil"
21:09 <        TimMc > and I was wondering which you wanted
21:09 <     hyPiRion > I just pad stuff with zeroes and use ISO 8601, then sort alphanumerically
21:09 <         clgv > ah ok. just plain numerical sorting. I have items with ids that usually start with numbers that have chronological information
21:29 <CookedGryphon > Is there anything falsey in clojure to which I can attach metadata?
21:30 <CookedGryphon > I have a function in my api which currently returns true or false depending on the success or failure of the requested operation
21:31 <    ambrosebs > CookedGryphon: no
21:31 <CookedGryphon > it's nice and clean doing (when (operation ...) ...) but now I want to in some cases query the cause of the false answer, and exceptions completely complicate the flow of the functions using this api
21:32 <         clgv > CookedGryphon: you can invert the meaning as they do in C/C++ by returning error reasons (e.g. clojure maps) or nil on success
21:32 <CookedGryphon > ugh, that's not nice or obvious to look at though...
21:33 <CookedGryphon > perhaps if I had an appropriately named function... but still
21:33 <         clgv > well you only need a when-success macro
21:34 <CookedGryphon > I wish you could attach meta to nils, it feels like you should be able to do some really nice error handling with current nil-punning behaviour, but if anything wants to examine the root cause of the nil being passed down they examine the metadata
21:34 <         clgv > btw. in the case of when you won't be able to look at the reasons of the error anyway ;)
21:34 <CookedGryphon > then you get the stack benefits of exceptions and the ease of use of nil-punning
21:35 <CookedGryphon > clgv: good point, but you could still use when for the trivial case, and then let out the value if you wanted to examine more closely
21:37 <         clgv > CookedGryphon: in SBCL you could do that with multiple return values. as long as you do not care you get only the first value and you have to do something special to get the other values...
21:39 <CookedGryphon > clgv: what I'm talking about would go a little further than that, your caller doesn't need to care about your error directly, as long as it deals with nils nicely and passes on the same nil on a nil input it can't do anything with
21:39 <CookedGryphon > but there's probably some major drawbacks I haven't considered
21:41 <         clgv > a pity there is no to-boolean protocol method ;)
21:41 <         clgv > you could have your metadata nil with it^^
21:49 <    ambrosebs > CookedGryphon: I don't think nil-punning is really worth worrying about.
21:49 <    ambrosebs > CookedGryphon: I just make a predicate function and move on
21:49 <    ambrosebs > if your solution works with nil-punning, great.
21:50 <    ambrosebs > but meh
22:07 <      Morgawr > https://hackworth.be/2014/03/26/clojure-web-security-is-worse-than-you-think/ anybody read this?
22:22 <          cbp > Morgawr: yea
22:25 <       arrdem > Morgawr: yea
22:25 <         jph- > Morgawr, i wrote it
22:25 <         jph- > :P
22:25 <      Morgawr > jph-: good one :P
22:25 <      Morgawr > I'm watching the video talk now
22:25 <         jph- > i was really worried about how it'd be received
22:25 <      Morgawr > just felt the need to spread it around :P
22:25 <         jph- > i didnt want it to come across as shitting on clojure
22:26 <         jph- > and it's really just a few of my notes from aarons talk
22:26 <      Morgawr > when I read the title I was a bit taken aback but both the article and the talk on which the article is based on raise valid and solid points
22:26 <         jph- > but i figured it needed calling out
22:27 <     hyPiRion > jph-: Valid criticism is not shitting, it's important
22:28 <         jph- > if we hit rails-like popularity, we dont want rails-like security issues with it
22:28 <      Morgawr > or php-like (in)security :P
22:28 <         jph- > yep
22:29 <   BalkyDwarf > I wonder if these security concerns apply to pedestal
22:30 <         jph- > web security issues are fairly well understood
22:30 <         jph- > but if the controls aren't built in to address them
22:30 <         jph- > then by default, they're vulnerable
22:30 <      Morgawr > yeah
22:30 <      Morgawr > that's the problem, sane defaults
22:30 <         jph- > i link to the owasp testing guide and top 10 in the post, ask your web framework developers how the protect against them
22:31 <         jph- > s/the/they/
22:44 <     sdegutis > What's a good way to create some functions (representing third party services) that you will override with lightweight implementations during testing, and which you have to explicitly set to the real functions in production?
22:45 <       Bronsa > sdegutis: just use with-redefs when testing
22:46 <      mikerod > is there anything "easy" available to allow Clojure to .clj source from somethiing like a JarInputStream.  :)
22:46 <      mikerod > allow Clojure to compile .clj *
22:46 <     sdegutis > Bronsa: So use dynamic vars to hold all the functions related to this service, and alter-root-var them in production, and with-redefs them in testing?
22:47 <     sdegutis > Although if they're just going to be alter-root-var'd, I probably don't need them to be ^:dynamic.
22:47 <       Bronsa > why do you need to alter-var-root them?
22:48 <     sdegutis > I don't want them to be set to the real or fake services until I explicitly set them so during production.
22:48 <     sdegutis > This is to avoid accidentally forgetting to override them in tests, and ending up using the real services by accident.
22:48 <       Bronsa > oh ok
23:01 <  technomancy > jph-: did aaron's talk mention read-eval?
23:01 <   rkneufeld_ > technomancy: He didn't mention it specifically, but he did touch briefly on injection attacks.
23:01 <         jph- > technomancy, i don't believe so
23:01 <         jph- > he kinda sped over injection imo
23:02 <         jph- > i almost included a section on what he said re injection
23:02 <         jph- > but in reality, it boiled down to "we have korma, but it isn't abstract enough, but we dont need an ORM"
23:02 <         jph- > so i was left scratching my head
23:02 <         jph- > and it didnt really get to nitty gritty re injection
23:03 <  technomancy > too bad; IMO the fact that you're just supposed to figure out that the reader isn't safe for user-provided data is trouble just waiting to happen
23:03 <         jph- > it did make me wonder how a user-input would be processed all the way into korma
23:03 <         jph- > ie if the old yaml issues with ruby applied to maps
23:03 <         jph- > compojure routes into functions into korma
23:05 <  technomancy > jph-: they do apply to the reader
23:05 <  technomancy > older versions of ring used to use the reader for cookie storage
23:05 <         jph- > i haven't yet done much testing in that space... i'm still getting my head around the higher-level compojure architecture
23:05 <  technomancy > if people get that wrong even in ring, you can just imagine what actual apps in the wild are like
23:06 <         jph- > the other thing is that unlike ruby, there isn't really a 'security team' for clojure
23:06 <         jph- > since ownership of libraries is spread far and wide
23:07 <        TimMc > jph-: The HTML templating thing is my personal rant-in-a-can.
23:07 <         jph- > TimMc, in what sense?
23:07 <         jph- > too many?
23:07 <         jph- > or the security side?
23:07 <        TimMc > The security side.
23:08 <        TimMc > Most of them are usnafe by default.
23:08 <          cbp > selmer is good against xss
23:08 <         xeqi > TimMc: hmm, I thought it was just hiccup
23:08 <        TimMc > Not just hiccup.
23:08 <         jph- > this is the kind of discussion i think the clojure community needs more of
23:09 <         jph- > otherwise clojure web apps will end up a ticking time bomb
23:09 <         jph- > ppl blindly assuming someone else has done the right stuff for us
23:09 <          cbp > But a lot of people like their templates to be vectors :-D
23:09 <        TimMc > cbp: You can have that and ahve it be secure as well.
23:10 <        TimMc > check out the patch clojars uses on Hiccup
23:10 <         xeqi > TimMc: thats actually not 100% secure, someone found a bug in it :(
23:11 <         xeqi > well, an unexpected interaction between nested params and it
23:12 <         xeqi > I'd love to find time to take hiccup out of clojars entirely
23:12 <         xeqi > and replace it with something safe
23:12 <        TimMc > xeqi: Oh, I'd like to see the bug and patch!
23:12 <         xeqi > along with many other things that take time ....
23:13 <     hyPiRion > xeqi: hey let's implement a Clojure version with fast startup time, port leiningen to it and all its plugins
23:13 <         xeqi > TimMc: my quick solution for clojars was to remove nested params, since we don't ever use it
23:13 <     hyPiRion > Takes a weekend tops
23:13 <          cbp > hyPiRion: arrdem was gonna implement "lean clojure" for GSoC
23:14 <         xeqi > hyPiRion: haha, are you making fun of satvvik's talk?
23:14 <     hyPiRion > xeqi: I'm not at west, so no =(
23:14 <     rasmusto > lean-clojure-nrepl-cider.el
23:14 <     sdegutis > I've been taking Clojure's vars and destructuring for granted, they're each pretty great.
23:15 <       felher > Hey folks. Would one sooner use '-' in longer namespace-names or '_'?
23:15 <         xeqi > hyPiRion: there are people that want to pursue this, rhickey, satvvik, and tbaldridge had a discussion around the gsoc plans for that
23:15 <     sdegutis > felher: - in the name, _ in the file
23:15 <     rasmusto > felher: - in the name-space, _ in name_space.clj
23:15 <       Bronsa > xeqi: hear hear
23:15 <     sdegutis > i won
23:15 <       felher > hehe :D
23:16 <     rasmusto > sdegutis: my answer had both examples
23:16 <     hyPiRion > xeqi: leaner as in on the jvm?
23:16 <     sdegutis > rasmusto: touche
23:16 <       felher > Thanks folks. :)
23:17 <         xeqi > hyPiRion: yep, think more static compiled for production stuff where you don't need to redef and such
23:17 <     hyPiRion > Ah, right
23:23 <CookedGryphon > I have a proxy-super call in a proxy implementation, and it's eating 70% of my processing time in reflection
23:23 <CookedGryphon > does anyone have a clue how to type hint it? It looks like (proxy-super onTouchEvent event)
23:24 <CookedGryphon > so I have no idea where to hint the implicit this...
23:24 <     sdegutis > Leiningen handles -h placed after an alias, intercepting it from the function itself.
23:24 <     sdegutis > This was not expected behavior.
23:25 <     hyPiRion > sdegutis: yeah, it's a known issue
23:25 <     hyPiRion > I think it's scheduled for 2.4
23:25 <     sdegutis > Oh.
23:25 <  technomancy > it's fixed in master
23:25 <  technomancy > well
23:25 <  technomancy > it still does that by default, but you can opt out
23:25 <     sdegutis > Ah.
23:26 <     sdegutis > I liked that feature all the way up until last night when I used an alias to shorten a command line utility I'm writing.
23:32 <     hyPiRion > technomancy: while you're here, you better do something like `TOPIC=$(echo $TOPIC | sed 's|1.5.1|1.6.0|g')` before people complain about the outdated topic in this channel again
23:32 <  technomancy > oh yeah
23:32 -!- mode/#clojure [+o technomancy] by ChanServ
23:33 <     rasmusto > ,*clojure-version*
23:33 <   clojurebot > {:interim true, :major 1, :minor 6, :incremental 0, :qualifier "master"}
23:33 <         clgv > :D
23:33 -!- technomancy changed the topic of #clojure to: Clojure, the language http://clojure.org | Currently at 1.6.0; top analysts expect this to be followed by newer versions with still higher numbers: https://github.com/clojure/clojure/blob/master/changes.md | discussion: http://groups.google.com/group/clojure
23:33 <    seangrove > Has anyone else noticed that the topic is outdated?
23:33 <     rasmusto > ##*clojure-version*
23:33 -!- mode/#clojure [-o technomancy] by ChanServ
23:33 <    seangrove > Ahhhh, damn
23:33 <         clgv > :P
23:33  *   seangrove wanted to be the last one to complain before it was changed
23:33  *   seangrove pulls out mavis beacon... "Better luck next time"
23:34 <         clgv > maybe it needs a rewrite as well. since 1.7/2.0 is not that near ;)
23:34 <      AmandaC > technomancy: I demand balanced news! I want the not-so-top analysis’s opposing opinion on the matter!
23:34 <   jcromartie > the penultimate analyst?
23:34 <     rasmusto > ##(prn *clojure-version* 'hmmm)
23:34 <      lazybot > ⇒ {:major 1, :minor 4, :incremental 0, :qualifier nil} hmmm nil
23:35 <  technomancy > AmandaC: depends, are you qualified as a not-so-top analyst?
23:36 <      Averell > the number exploitation must end. I predict versions will run out in the next 30 years.
23:36 < justin_smith > ,*clojure-version*
23:36 <   clojurebot > {:interim true, :major 1, :minor 6, :incremental 0, :qualifier "master"}
23:36 <     rasmusto > justin_smith: why's lazybot on 1.4 still?
23:36 <     hyPiRion > clgv: 2.0 is not that near? I'm not sure, but I would've expected some news on that on the clojure-dev mailing list
23:37 <     hyPiRion > Apologies for not understanding jokes
23:37 < justin_smith > rasmusto: I think they intentionally leave them on the most recent two versions, but they have been *erherm* lazy in updating one of htem
23:37 <     rasmusto > justin_smith: was waiting for that :)
23:38 <      AmandaC > technomancy: nah, I’m a number denier. I refuse to accept numbers even exist.
23:38 <    AeroNotix > AmandaC: yo
23:38 < justin_smith > clgv: hyPiRion: I like Knuth's versioning for TeX, where each release gets it incrementally closer to PI
23:38 <    AeroNotix > AmandaC: doing Clojure these days?
23:39 <      AmandaC > AeroNotix: and several other languages, yes
23:39 <    AeroNotix > AmandaC: cool!
23:40 <    patchwork > AmandaC:  numbers don't exist, but they are useful
23:41 <     rasmusto > math has no applications outside of SAT testing
23:41  *    rasmusto hides
23:45 < justin_smith > rasmusto: nonsense! just the other day I proved there was a 1:1 and onto mapping from my monthly budget (idealized as a continuous income stream) and the sum prices of the inventory of the local musical equipment store
23:46 <     rasmusto > are you saying you bought everything in a music shop?
23:47 < justin_smith > rasmusto: I justified doing so in theory, that was good enough :)
23:48 <     rasmusto > money is just a placeholder anyways, may as well replace it with guitar picks and midi keyboards
23:48 < justin_smith > true enough
23:49 < justin_smith > they are isomorphic at least
23:50 <     rasmusto > speaking of investing, am I the only one who isn't freaking out and cancelling my order RE that facebook/oculus thing?
23:51 <   jcromartie > rasmusto: it is really shocking
23:51 < justin_smith > http://weareinstrument.com/labs/open-source/oculus-bridge my company may have played a small part in facebook finding the oculus rift useful :(
23:52 <   jcromartie > Facebook is just not where promising new technology goes to thrive.
23:52 <    patchwork > I am becoming increasingly weary of giant companies acquiring awesome things and destroying them
23:53 <    patchwork > I heard that right after I heard about the demise of OpenNI
23:53 <    patchwork > and primesense
23:53 < justin_smith > patchwork: oh, that is sad
23:53 <     rasmusto > does it help that oculus is hardware+software and is so different from what facebook normally buys?
23:53 <    patchwork > glad I got my asus xtion when I did, you can't even find one anymore
23:54 <   jcromartie > rasmusto: it might help mitigate the awfulness
23:54 <    patchwork > Very curious to see what the result is… any way oculus can come out of this unscathed?  I can't imagine it being used for anything awesome at this point
23:56 <     rasmusto > I went in for a ue4 subscription, I'm still damn excited about the new hardware
23:56 <   jcromartie > patchwork: well, if it's still a device that people can buy and develop for, with Carmack at the helm, it might be OK
23:57 <   jcromartie > but if Facebook steers the dev experience AT ALL, then I'd imagine it will pretty much be the beginning of the end of Oculus
23:57 <    patchwork > jcromartie:  I will hold some measure of hope
--- Day changed Thu Mar 27 2014
00:01 <    S11001001 > the Oculus team thanks you for going on this incredible journey with them
00:01 <   jcromartie > S11001001: stop it you are making me sad
00:01 <    mdrogalis > lol
00:10 <     rasmusto > any clojure/west must-see talk videos? I watched (and loved) the instaparse one
00:13 <         jph- > rasmusto, the security one
00:13 <     rasmusto > jph-: with-security? I'll queue it up
00:13 <         jph- > rasmusto, yep, that one
00:13 <     rasmusto > cool, thanks
00:21 <          pyr > hi clojure ! just dropping by because i'm really happy to release http://pithos.io today, an S3 compatible object store server written in clojure
00:25 <          cbp > (inc pyr)
00:25 <      lazybot > ⇒ 2
00:26 <       Raynes > (inc pyr)
00:26 <      lazybot > ⇒ 3
00:32 <          pyr > (btw if anyone deems it interesting, i'd love a few upvotes here: https://news.ycombinator.com/item?id=7474817
00:33 <      Jahkeup > very nice pyr!
00:33 <      Jahkeup > (inc pyr)
00:33 <      lazybot > ⇒ 4
00:34 <  nickmbailey > cool stuff
00:35 <  nickmbailey > pyr: what version of cassandra?
00:35 <          pyr > 2.0+
00:35 <   jcromartie > Neat
00:36 <  nickmbailey > pyr: which clojure client did you use?
00:36 <          pyr > alia, from mpenet
00:46 <      r1chard > http://www.youtube.com/watch?v=CBL59w7fXw4 <-- have you seen this "clojure.web/with-security"
00:46 <      r1chard > I feel like there's some BS in that talk.
00:46 <      r1chard > Not just feel, know.
00:58 <         jph- > good, call them out
00:58 <         jph- > i kinda think the speaker rushed through most of it, didnt really go into specifics for several areas
01:00 <         jph- > but i didn't spot anything obviously wrong, i just think some parts were glossed over
01:01 <      r1chard > Well first, you don't selectively escape or "strip" HTML tags in user input. That's a recipe for disaster.
01:01 <      r1chard > Either you escape HTML entities, or you don't.
01:01 <      r1chard > If you need selective support for, say, bold and italic, you need to go through a string DSL allowing only that.
01:02 <      r1chard > HTML is full of edge cases, if you try to parse it, attackers will abuse the edge cases.
01:02 <         jph- > yep
01:02 <         jph- > like... what is it, there's 90+ ways of representing <
01:02 <         jph- > encoding
01:02 <      r1chard > Second, he's complaining that pass hashing libraries don't offer HMAC.
01:03 <      r1chard > HMAC is for message origin codes, not for password hashes. Vastly different attacks. Vastly different approaches.
01:03 <        TimMc > ++
01:03 <      r1chard > Tacking on HMAC for password hashes feels like he has no idea why HMAC is used.
01:04 <         jph- > yes, i would have liked him to elaborate more on that point
01:04 <      r1chard > Third: "there are too many template engines and db vendors you guys. Let's just stop. Let's just stop." Uhmm okay? You go make people just "stop" their projects, what kind of a solutions is this?
01:04 <  technomancy > sounds like ryah
01:04 <         jph- > my recollection is he was complaining about multiple template libraries within projects
01:05 <      r1chard > jph-, I don't know. It's very arbitrary to just put a limit on a project what it'll use. Any bigger project is done in separate components, and one has to pick the right tools for the job.
01:05 <  technomancy > http://shitryandahlsays.tumblr.com/post/33834861831/but-who-decides
01:05 <         jph- > r1chard, well, the speaker is entitled to his opinion, as are you :)
01:05 <    shep-home > I've got this one hash, and it has a lot of data in it. When I print it to the REPL, it's big and slows down emacs. What are some options to customize the printing of that hash alone?
01:07 <      r1chard > jph- :D
01:07 <         jph- > r1chard, btw, i wrote the writeup of that vid that hit hn
01:07 <         jph- > :P
01:07 <      r1chard > jph- :D
01:07 <      r1chard > Also the fact he's promoting ORM as better for DB security is making my heart bleed.
01:07 <         jph- > to me it sounded like a former ruby guy wanting better security in his new favourite language
01:07 <         jph- > well
01:07 <         jph- > the injection section was rushed as well
01:07 <      r1chard > ORM may speed up development, but that's hardly the only way to fix DB security.
01:07 <         jph- > "korma is ok, but it isnt enough but we dont need ORM but we need more abstraction"
01:07 <         jph- > hence why i left it out of my post
01:07 <      r1chard > :)
01:07 <         jph- > i didnt really have any takeaways
01:07 <  technomancy > aren't most of the rails DB issues stemming from the fact that people don't bother to learn SQL precisely because of ORMs?
01:08  *        jph- yawns
01:08 <         jph- > well its 2am here, i shall bid you all adieu
01:08 <  technomancy > "learn how your database works" is better advice, not that people will follow it
01:08 <   jcromartie > technomancy++
01:08 <   jcromartie > oh sorry
01:08 <   jcromartie > (inc technomancy)
01:08 <      lazybot > ⇒ 101
01:09 <         tuft > 5 minutes into the talk and he hasn't said anything yet...
01:10 <       Bronsa > shep-home: *print-lenght* and *print-level*
01:14 <    shep-home > Bronsa: thanks! won't that truncate my output at some arbitrary position though?
01:14 <       Bronsa > yes it will
01:15 <  gfredericks > Bronsa: me and a few guys are at the clojurewest hackfest thinking about extending codeq to have usage analysis stuff (similar to the code I sent earlier)
01:15 <  gfredericks > and the major hitch compared to my earlier approach is that it might not be reasonable to actually eval the code
01:15 <  gfredericks > my guess is that this more or less precludes using tools.analyzer in a serious way -- can you confirm that's the case
01:16 <       Bronsa > gfredericks: there's no way to evaluate a whole file/namespace without evaluating each form as you go
01:16 <       Bronsa > how would you be able to macroexpand?
01:16 <  gfredericks > right but I'm thinking it's not possible to eval _at all_
01:16 <  gfredericks > at least if you want the analysis to go over the whole history of the project, because then you have lots of changing dependency sets
01:17 <       Bronsa > yeah I see where the problem lies
01:18 <        TimMc > shep-home: So, you can do things like (keys foo) and then select-keys
01:18 <  gfredericks > Bronsa: so should I give up trying to do something general and maybe have it start a separate jvm for each commit we want to analyze?
01:18 <     hiredman > gfredericks: it seems like that would be better built as a service a long side/on top of codeq
01:19 <       Bronsa > gfredericks: I honestly don't see why you would need tools.analyzer at all for this
01:19 <  gfredericks > hiredman: the first thought was to write a library that just interacts with the codeq db, adding usage info
01:19 <  gfredericks > hiredman: is that what you're thinking of?
01:19 <     hiredman > codeq indexes the codebase, then you can pick shas to feed in to this other service that checks out the sha and enrichs the data codeq has
01:19 <     hiredman > yeah
01:20 <  gfredericks > Bronsa: the main thing we need is, given pieces of code, figuring out what vars it uses
01:21 <       Bronsa > gfredericks: I see. whichever way you want to do it, I don't think you're going to be able to go anywhere without evaluating the forms for macroexpansion
01:21 <  gfredericks > Bronsa: okay, that's what I was imagining
01:21 <       Bronsa > (defmacro x [a] (if (do-something-with a) `some-var `some-other-var))
01:21 <       Bronsa > there's no way to know statically if you're going to be using some-var, some-other-var or both
01:22 <  gfredericks > sure
01:22 <    shep-home > TimMc: To use those, I would need to know that /this/ is the big hash, right? And I have a big vector too, not just a hash :-)
01:22 <  gfredericks > hiredman: okay, so one commit at a time sounds reasonable to you too?
01:23 <    shep-home > I'd love to be able to "override to toString" for a single hash when I create it
01:23 <       Bronsa > gfredericks: btw I don't know if you were logging yesterday but I added analyze+eval to t.a.j which doesn't require you to do any eval manually && doesn't require you to generate a new env everytime
01:24 <  gfredericks > Bronsa: yeah, I saw that; thanks
01:28 <     hiredman > gfredericks: I think it would have to be
01:30 <       Bronsa > gfredericks: also, if you decide to use t.a, this seems like a good place to use datomic's datalog to query the ASTs, example https://github.com/clojure/tools.analyzer/blob/master/src/test/clojure/clojure/tools/analyzer/query_test.clj#L17
01:31 <        wei__ > is there such thing as reduce-while?
01:31 <     rasmusto > (doc reduced)
01:31 <   clojurebot > "([x]); Wraps x in a way such that a reduce will terminate with the value x"
01:31 <        wei__ > e.g. taking from a collection until the sum is a certain amount
01:32 <     rasmusto > wei__: ^^
01:32 <        TimMc > shep-home: Yeah. So you should bug gfredericks to write his giant datastructure visualizer. :-P
01:32 <        wei__ > rasmusto: nice. does that also work with core.reducers?
01:33 <     rasmusto > wei__: I believe so? Though it may be a 1.6 patch that allows that
01:34 <      amalloy > reduced was added in 1.5
01:34 <      amalloy > along with reducers
01:35 <      amalloy > wei__: although really you don't need reduced for use cases like reduce-while - you can use reductions and take-while
01:35 <        wei__ > rasmusto: mind pointing me to an an example usage?
01:35 <        wei__ > oh yeah, reductions is lazy too right
01:35 < andrzejsliwa > Hi guys, anyone using smartparens on emacs for clojure development? any sane defaults (to be more like paredit)
01:35 < andrzejsliwa > ?
01:36 <     rasmusto > wei__: ah, nvm about the 1.6 thing. This is what I was remembering http://dev.clojure.org/jira/browse/CLJ-1160
01:36 <     rasmusto > reductions + take-while is probably a better answer
01:36 <      amalloy > huh. what's better about smartparens than paredit, andrzejsliwa?
01:37 < andrzejsliwa > I have it as default in my Emacs Prelude bundle
01:37 <  gfredericks > TimMc: do you solicit buggings on this issue every month or so?
01:38 <      amalloy > andrzejsliwa: well, reading over the docs, i'd suggest at least turning on smartparens-strict-mode
01:39 < andrzejsliwa > and then use it with paredit?
01:39 <      amalloy > well, i think you're supposed to use one or the other
01:39 < andrzejsliwa > some people mixing them... but I want to avoid it
01:40 <      amalloy > i'd just install paredit, because it's well known and has worked for decades(?). but if you're using smartparens, strict-mode will get you a behavior that i've found useful in paredit
01:43 <     rasmusto > wei__: some examples
01:43 <     rasmusto > ,(last (take-while #(<= % 10) (reductions + (range 30))))
01:43 <   clojurebot > 10
01:43 <     rasmusto > ,(reduce (fn [a b] (if (>= a 10) (reduced a) (+ a b))) (range))
01:43 <   clojurebot > 10
01:44 < andrzejsliwa > thx for advice amalloy
01:44 <        wei__ > so that's how you use reduced, thank
01:46 <        TimMc > gfredericks: Something like that yeah. *I* want that tool! :-P
01:47 <        TimMc > $mail xeqi nested params appears to be a ring thing -- how was it causing a problem with hiccup?
01:47 <      lazybot > Message saved.
01:48 <      arohner > I'm having trouble googling for the alan dipert gherkin video mentioned in the mal video. Any suggestions?
01:49 <        gtrak > arohner: it's in the lightning talks
01:50 <        gtrak > http://www.youtube.com/watch?v=bmHTFo2Rf2w
01:50 <      arohner > ty
01:54 <      aaelony > anyone using Kovasb's session (https://github.com/kovasb/session/tree/master/src/cljs/session) ?  It looks beautiful, but shift-enter isn't evaluating expressions for me...
01:55 <      aaelony > sorry, better link was : https://github.com/kovasb/session
02:04 <  gfredericks > TimMc: I've mitigated a small amount of the pain via my bg macro in my repl-utils
02:06 <       futile > Anyone here have experience embedding REPLy into a Clojure app?
02:10 <        TimMc > gfredericks: OWow does that help?
02:14 <        TimMc > *How
02:15 <    DaReaper_ > Is there any working plugin for clojure development on NetBeans?
02:16 <    DaReaper_ > or at least an editor?
02:18 <       hfaafb > there's counterclockwise for eclipse
02:18 <       hfaafb > nightcode
02:18 <       hfaafb > emacs
02:18 <       hfaafb > a few sublime text plugins
02:18 <       hfaafb > lighttable
02:20 <      yogthos > also cursive with intellij works pretty well
02:21 <    Anderkent > futile: kind of. What's your issue?
02:21 <       futile > I'm trying to figure out how to change the namespace when you call reply.main/launch-nrepl directly from within Clojure.
02:21 <       futile > So far I have this, but it fails: (launch-nrepl {:skip-default-init true :custom-init (in-ns 'billow.core)})
02:22 <      amalloy > futile: you probably want to quote that custom-init form
02:22 <       futile > amalloy: I'll try that, although it looks like REPLy is pretty macro-heavy code. See https://github.com/trptcolin/reply/blob/master/src/clj/reply/conversions.clj
02:23 <       futile > amalloy: Yes, that worked perfectly.
02:23 <       futile > Thank you both.
02:23 <    Anderkent > no prob, next time I recommend just asking your question immediately, amalloy could have probably helped you even before I got here :P
02:24 <       futile > Yes, yes, very good ideas all around.
02:25 <       futile > Next time I will ask my question directly. Also I will try suggestions before doubting them.
02:25 <      aaelony > quick update: shift-enter works for me in Chrome but not in Firefox...
02:27 <    DaReaper_ > hfaafb: any for netbeans?>
02:33 <       futile > It appears that if you use REPLy with another namespace like that, you no longer have access to (doc). How would you get access back?
02:33 <        tpope > clojure.repl/doc
02:33 <        tpope > (use 'clojure.repl)
02:34 <       futile > Ah yes, thank you.
02:44 <  technomancy > amalloy: afaict smartparens' main advantage is that it can work with multi-char delimiter sets
02:44 <  technomancy > which is neat for html, but pointless for clojure
02:45 <      dakrone > technomancy: well, useful for strings and maps in clojure
02:45 <      amalloy > technomancy: might be useful if it supports #{...} and #(...), i guess
02:45 <  technomancy > dakrone: hm; how so?
02:46 <      dakrone > technomancy: ah nevermind, I forgot clojure-mode adds paredit support for "" and {}
02:46 <      amalloy > dakrone: that's all in paredit, i'm pretty sure, not clojure mode
02:46 <      dakrone > in-sexp highlighting is a nice feature smartparens has that paredit doesn't
02:46 <  technomancy > strings work for any lisp already
02:46 <      amalloy > in-sexp highlighting?
02:47 <      dakrone > amalloy: background highlighting the body of an expression the first time it's typed, it's difficult to explain :)
02:48 <      amalloy > mmmm. so that's instead of bouncing the cursor/point?
02:48 <         Blkt > what's the best way to handle configuration (files) in a Clojure webapp?
02:49 <  technomancy > so like show-paren-mode except for the body instead of just the delimiters?
02:49 <  technomancy > seems weird to tie that to smartparens instead of creating something orthogonal
02:49 <     hyPiRion > I'm fine with highlight-parentheses really.
02:49 <      dakrone > amalloy: technomancy: yes, except it's more "while-you-type-the-expression" than after the fact
02:49 <      dakrone > it is useful when typing JSON
02:50 <      amalloy > technomancy: show-paren-mode will show the body if you ask
02:50 <  technomancy > oh, cool
02:50 <       futile > Ah there is a clojure.test emacs plugin isn't there..
02:50 <  technomancy > ooh, mixed. I like the sound of that
02:50 <  technomancy > futile: yeah but it's kinda lame
02:57 <       futile > Would it be better to just get the clojure.test autorunner?
02:58 <  technomancy > it should be replaced with nrepl-discover
02:58 <       futile > Ah.
02:58 <        gtrak > technomancy: I thought it was funny/odd that bbatsov wanted to wait for nrepl-discover to mature..
02:59 <        gtrak > since there's few emacs-related nrepl projects besides cider.
02:59 <  technomancy > gtrak: yeah, I don't really understand his project management style
02:59 <        gtrak > like.. not gonna mature unless we use it, dude.
03:03 <       futile > All programming seems to be just finding new ways to call functions with arguments...
03:03 <  technomancy > futile: except forth
03:03 <        gtrak > I just tried to explain my understanding of monads to a haskeller like that
03:04 <        gtrak > fancy parameter-passing
03:04 <       futile > technomancy: I call shenanigans.
03:04 <  technomancy > gtrak: http://p.hagelb.org/mrfp.gif
03:04 <  technomancy > futile: it's true
03:09 <     eraserhd > I'm having a weird bug that I can reproduce, but having trouble isolating small code that does it.
03:09 <    tgoossens > When I have a class with methods. If I change the representation of the object, my compiler tells me what methods don't work anymore.  In clojure if i create function to work with a certain data structure and I change it, I don't automaticlly find what functions that must be changed.
03:09 <     eraserhd > It seems to be about making a lazy list a key in a meta map in a macro, then accessing it at run time.
03:09 <     eraserhd > Does this ring any bells?
03:11 <     eraserhd > Oh, value. not key.
03:17 <         devn > whoa. clojure/west talks are up already: http://www.youtube.com/watch?v=wVXjExRiFy0
03:18 <zerokarmaleft > yea, somebody's cracking the whip in SF
03:18 <  technomancy > devn: there was an incredible amount of whining around this last year
03:18 <       futile > What are the great new ways to enhance our clojure.test experiences?
03:18 <        klang > .. there goes sleep tonight ..
03:19 <         devn > technomancy: oh i remember! :)
03:25 <        gtrak > last year it was all Alex, now it's cognitect and friends
03:35 <   jcromartie > yeesh now I feel like my app is insecure?
03:35 <   jcromartie > I thought I had a pretty good handle on it :|
03:39 <      amalloy > eraserhd: metadata probably gets evaluated
03:48 <   jcromartie > how often do you end up writing code that checks argument or return types?
03:49 <   jcromartie > like, :pre and :post maps, or asserts, or code that throws IllegalArgumentException?
03:49 <        gtrak > jcromartie: schema's been really nice for this
03:52 <         tuft > tgoossens: true, but the flip side is that they can continue doing what they did before, as they aren't coupled to the type you changed.
03:53 <      amalloy > jcromartie: super rarely. i occasionally throw IAE; never use pre/post; and very rarely use assert
03:53 <         tuft > tgoossens: .. and your tests should be able to provide the same checklist.
03:53 <     hiredman > assertions and pre/post are great
03:54 <     hiredman > I have only ever regretted not having them
03:54 <     hiredman > (not to say I use them a lot, I just regret not having them in places a lot)
03:54 <     akurilin > So if I want to share a bunch of business logic pure functions across multiple projects, what should determine if the :source-paths approach is good enough or if I should go the separate .jar route?
03:54 <         tuft > anyone using schema in their project?
03:55 <       futile > I have been using preconditions for this utility I'm writing.
03:55 <     hiredman > not having a custom message :pre/:post is a pain though
03:55 <    AeroNotix > tuft: schema?
03:56 <     rasmusto > AeroNotix: prismatic's thing for runtime type checking
03:56 <         tuft > AeroNotix: yes that ^^ =)
03:57 <         tuft > seems useful for when things get really nested
03:57 <    AeroNotix > oh ok
03:57 <         tuft > .. or when accepting input to the system from outside.
03:57 <       futile > What's a good way of pulling in data from a non-compile-time-loaded file?
03:58 <     hiredman > the cloud is a vast roiling sea where devops are prone to mad acts of maintaince and chatops, best not to assume anything
03:58 <   jcromartie > futile: EDN/Clojure data?
03:58 <    AeroNotix > hiredman: chatops?
03:58 <     rasmusto > futile: slurp it from resources?
03:58 <       futile > My users pass "my.config.namespace" which contains defs which may execute some code.
03:58 <       futile > And I need to access their defs.. and there's a lot of ways.
03:59 <   jcromartie > futile: I'd say the right way to get at the vars in a namespace is ns-publics
03:59 <       futile > I could have them hook into a function of mine which redefs some defs I can access. Or I can have them (in-ns) into my namespace and do their defs, and I just access them at runtime.
03:59 <     hiredman > (for example changing the character encoding on a database in a way that some how twiddles the bits in your gzipped blobs)
03:59 <       futile > jcromartie: ah so the second one?
03:59 <   jcromartie > futile: this sounds… weird
03:59 <   jcromartie > :-/
03:59 <       futile > Alternatively I could just make this file return a map that I def right into a def in my own namespace, and just use known keys.
04:00 <       futile > I'm going to great lengths to avoid the trouble of writing a leiningen plugin.
04:01 <       futile > I've used the map solution before to good effect.. very little runtime magic needed except (load the-file).
04:01 <       futile > (def my-map (load their-file)) ... (do-something-with (:some-key my-map))
04:02 <       futile > That's simplest, I'll just do that.
04:06 <   jcromartie > futile: why can't they just pass you data?
04:07 <   jcromartie > instead of giving you something you'll turn around and load?
04:07 <   jcromartie > I don't know what you're building
04:08 <    shep-home > Does Mark Engelberg hang around here? Or anyone associated with instaparse?
04:09 <       futile > jcromartie: I'm building a lib that you install and then do `lein run -m mylib.main your-config-namespace`
04:09 <       futile > jcromartie: I control the entry-point of the lib, since it's a command-line util.
04:09 <       futile > jcromartie: Of course, that whole invocation will be hidden away in a lein-alias for good measure.
04:11 <     akurilin > shep-home: I don't remember seeing him on here but I had a really easy time getting hold of him on Instaparse's google groups
04:12 <     akurilin > guy's extremely reponsive and helpful
04:12 <    shep-home > akurilin: thank you. I wanted to give that team a big thank you. They made this (https://github.com/shepmaster/clojure-ruby) fun to write
04:12 <       futile > Wow.
04:16 <     rasmusto > shep-home: did you watch the clojure/west talk on instaparse?
04:17 <    shep-home > rasmusto: nope - is it worth watching?
04:18 <     rasmusto > Yep: http://www.youtube.com/watch?v=b2AUW6psVcE
04:18 <     rasmusto > you'll learn a bit more about the "team" :D
04:18 <    shep-home > rasmusto: excellent, thank you. I think I can find 40 minutes to watch this during funployment :-)
04:19 <     rasmusto > I found his mini-dive into the implementation to be really cool
04:19 <     rasmusto > it's all async + pseudo pubsub
04:20 <    Anderkent > it was nice, but I wish there was more info about why the algorithm is correct, it's not obvious (at least to me)
04:20 <     rasmusto > Anderkent: yeah, hence "mini-dive"
04:21 <     rasmusto > I don't mind the aabababa examples though, I'd get confused otherwise
04:21 <    Anderkent > yeah that was nice
04:26 <        verma > anyone here uses lien-npm? can't get it to generate a package.json
04:28 <        verma > os is it not persistent? in the sense that it would be removed when the task is done executing?
04:28 <        verma > oh, it does remove it https://github.com/bodil/lein-npm/blob/master/src/leiningen/npm.clj#L74
04:33 <        verma > lein run seems to run my script, but its not generating package.json when running the file, I need it for node-webkit
04:44 <      TravisD > Is there a way to query how much memory is available in the JVM?
04:46 < justin_smith > (.freeMemory (Runtime/getRuntime))
04:46 <       znurgl > How can you convince your boss about using Clojure in one sentence? (theoretical question)
04:47 <     nightfly > It's new and cool
04:47 < justin_smith > TravisD: depending what you mean by "how much memory is available" other methods may have better answers
04:47 <        gtrak > znurgl: 'it's a concurrency library'
04:48 <  technomancy > znurgl: "if I have to write any more java I'll quit."
04:48 < justin_smith > TravisD: but you probably want the info returned by some method of (Runtime/getRuntime) http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html
04:48 <      TravisD > justin_smith:  Ah, I really just wanted to know how much space was reserved for the heap or something. I was running out of space and I was curious how much there is
04:48 < justin_smith > maxMemory is likely what you want
04:48 <      TravisD > ah, yes, just saw it in the docs
04:49 <      Averell > "this will be more cost-effective than our current cobol code"
04:49 < justin_smith > (.maxMemory (Runtime/getRuntime))
04:49 <      TravisD > ,(.maxMemory (Runtime/getRuntime))
04:49 <   clojurebot > #<CompilerException java.lang.SecurityException: Reference To Runtime is not allowed, compiling:(NO_SOURCE_PATH:0:0)>
04:49 < justin_smith > also, you may want to compare that to the amount of mem currently allocated
04:49 <        gtrak > znurgl: 'we can't do feature x in a timely manner without it'
04:50 <     sdegutis > gtrak: boom got em
04:50 <      TravisD > justin_smith: cool, thank s:)
04:52 <     sdegutis > did I do that right?
04:54 < justin_smith > sdegutis: http://www.urbandictionary.com/define.php?term=Got%20Em&defid=1716329
04:54 <       znurgl > I have another strange question. I've never used (def variable-name value) in Clojure. And I checked some project on GitHub and I can't find def, so is it a common thing in Clojure not using variables just dealing with data flow?
04:54 <        gtrak > def's usually for constants
04:55 <        gtrak > or things that aren't functions, generally it's bad to hold state in a var
04:55 < justin_smith > znurgl: well, technically defn is just a wrapper on def
04:55 < justin_smith > def + fn = defn
04:55 <       znurgl > justin_smith: sure, I know
04:56 <        gtrak > znurgl: you shouldn't call def within a function unless you know what you're doing
04:56 <       znurgl > but I did't use it for defining a variable
04:56 <          cbp > def for global constants and also closures as i think a def inside a let is a little ugly :-P
04:56 <          cbp > a defn inside a let}
04:56 <          cbp > *
04:57 <          bja > there's a letfn for that
04:57 <       znurgl > so the good practice is stay away from def a variable as much as I can, isn't it?
04:58 <        gtrak > znurgl: def is to create a var, vars have their own semantics.
04:58 <          cbp > znurgl: no, you just wont use them much naturally
04:58 <        gtrak > http://clojure.org/vars
04:58 <     sdegutis > I am using vars like crazy today.
04:58 <          cbp > bja: but i want a closure in a var
04:58 <     sdegutis > So many vars.
04:58 <          cbp > also for holding stuff like atoms/refs/etc..
04:58 <        gtrak > not just a 'variable', to be precise it's a Var.
04:59 <     sdegutis > I even def a def within a def https://github.com/sdegutis/Billow/blob/master/src/billow/config.clj#L5-L7
04:59 <  technomancy > znurgl: clojure doesn't have variables
04:59 <        gtrak > clojure doesn't have local variables either, those are usually called bindings
04:59 <     sdegutis > To be fair, there's like so little distinction.
05:00 <          cbp > sdegutis: i usually do that kind of thing with alter-var-root
05:00 <     sdegutis > I've found using Clojure to be nearly identical to using Ruby, except for the super-powers Clojure gives you.
05:00 <        gtrak > it's important to not use a term that means something in other languages :-)
05:00 <       znurgl > thanks guys, I should check it again :-)
05:00 <     sdegutis > cbp: I wonder, what's the difference between the two approaches?
05:00 <     sdegutis > (def ...) vs (alter-var-root ...)
05:01 <  technomancy > sdegutis: alter-var-root requires it to already exist
05:01 <        gtrak > cbp: well, for one, the var gets created at compile-time, alter-var-root won't do that.
05:01 <        gtrak > when your defn is eval'd the var gets created.
05:01 <          cbp > sdegutis: the namespace
05:01 <          cbp > All sorts of scary business
05:01 <        gtrak > It would probably cause concurrency problems to use def.
05:01 <        gtrak > potentially.
05:02 <     sdegutis > I am doing so programming right now.
05:02 <  technomancy > so programming. much def. very excite.
05:02 <          bja > sdegutis, is that a doge thing?
05:02 <          bja > technomancy beat me to it
05:02 <     sdegutis > Hmm, I didn't realize the connection but yeah, basically the style I was going for.
05:03 <     sdegutis > Except a little less formal to the meme.
05:03 <     sdegutis > So I have this really weird library/utility design..
05:03 <        gtrak > ,(do (defn a [] (def b)) b)
05:03 <   clojurebot > #<Unbound Unbound: #'sandbox/b>
05:03 <        gtrak > see the problem?
05:04 <     sdegutis > You put the ugly stuff into an alias, then run `lein billow`, and it shoves you into a REPL, and gives you access to a few commands like (list-servers), (create-server ...) etc
05:04 <        gtrak > ,b
05:04 <   clojurebot > #<Unbound Unbound: #'sandbox/b>
05:04 <        gtrak > ,c
05:04 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: c in this context, compiling:(NO_SOURCE_PATH:0:0)>
05:04 <       pyrtsa > gtrak: It will probably cause concurrency problems to use alter-var-root as well.
05:04 <     sdegutis > It's not conventional, but it gives you a little more flexibility and avoids lein-reloads when you wanna do multiple things in a row.
05:04 <       pyrtsa > Just a different kind of such.
05:05 <        gtrak > pyrtsa: I would imagine it wouldn't kill current bindings on the var, and the def would.
05:05 <          cbp > you also cant require that function
05:05 <        gtrak > maybe..
05:05 <          cbp > or you can do it with weird consequences..
05:05 <        gtrak > just don't do it :-)
05:06 <        gtrak > altervarRoot calls a method on the var, def might wholly replace it.
05:06 <        gtrak > not sure exactly when.
05:07 <        gtrak > alter-var-root notifies watches..
05:07 <          cbp > ,(do (ns a) (defn f [] (def x 1)) (ns b) (require 'a) a/x)
05:07 <   clojurebot > #<Unbound Unbound: #'a/x>
05:07 <        gtrak > and takes a validator
05:07 <        gtrak > so that's one difference
05:07 <          cbp > er i got a different result..
05:07 <          cbp > oh well
05:08 <       pyrtsa > gtrak: If you alter-var-root a var while another thread is using it, its value will just suddenly be different, during the computation.
05:08 <      amalloy > sdegutis: https://github.com/sdegutis/Billow/blob/master/src/billow/config.clj#L5-L7 shouldn't work at all
05:08 <        gtrak > pyrtsa: I don't believe it
05:08 <        gtrak > that's only the case if that thread is using the root binding
05:08 <  technomancy > ~tias
05:08 <   clojurebot > Try it and see! You'll get results faster than asking someone in #clojure to evaluate it for you, and you'll get that warm, fuzzy feeling of self-reliance.
05:09 <      amalloy > alter-var-root doesn't take a value, it takes a function and applies it to the old value
05:09 <        gtrak > https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Var.java#L188
05:09 <       pyrtsa > gtrak: Easy to test: create two threads, one calling alter-var-root after a timeout, the other using that var repeatedly, sleeping in between.
05:09 <        gtrak > pyrtsa: bindings
05:09 <  technomancy > amalloy: the question is whether the root is replaced with a CAS or just a set
05:09 <        gtrak > know what I mean?
05:09 <  technomancy > I don't think it's CAS
05:10 <        gtrak > technomancy: i'm looking at it, it's a volatile
05:10 <      amalloy > technomancy: that's the conversation y'all are having; i'm making a different point which is that sdegutis's use of alter-var-root is bogus regardless of your discussion
05:10 <  technomancy > oh, gotcha
05:10 <     sdegutis > amalloy: how so?
05:10 <      amalloy > and it's not CAS
05:10 <      amalloy > (03:08:22 PM) amalloy: alter-var-root doesn't take a value, it takes a function and applies it to the old value
05:11 <     sdegutis > Oops.
05:11 <       pyrtsa > gtrak: Sorry, I think I'm missing the point. Can you educate me? (In private if considered noise here.)
05:11 <          cbp > Oh he updated it
05:11 <     sdegutis > Fixed.
05:11 <          cbp > the speed rivals dnolen's
05:12 <     sdegutis > https://github.com/sdegutis/Billow/blob/master/src/billow/config.clj#L5-L7
05:12 <        gtrak > ah, sure.  your example is correct, but that's not the point.  vars support a thread-local stack of bindings. if there's something bound, then the change to root wouldn't matter on that thread.
05:12 <        gtrak > pyrtsa: ^
05:12 <          cbp > I got confused for a second (he's not using alter-var-root at all!)
05:12 <       pyrtsa > gtrak: Okay, cool. Now we agree.
05:12 <     sdegutis > Thanks amalloy :)
05:13 <     sdegutis > amalloy: here's a pie to show my gratitute: \_/
05:13 <      amalloy > hah
05:13 <     sdegutis > No wait sorry that's an upside-down lampshade.
05:14 <     sdegutis > Here's the pie: ___
05:15 <   stcredzero > sdegutis: \_/ looks like a standard grey alien glaring at you. Or the victory gesture guy beheaded \o/
05:16 <     sdegutis > quite
05:17 <   stcredzero > Actually, they are one and the same. (Now go off and read all of Grant Morrison's Doom Patrol)
05:19 <     sdegutis > ~guards
05:19 <   clojurebot > SEIZE HIM!
05:19 <   stcredzero > Who me?
05:21 <     sdegutis > Hey clojurebot said it not me
05:22 <     sdegutis > I am not good at designing APIs and I get really tired out easily from it which wears down my concentration and I end up in here saying ~guards...
05:22 <   stcredzero > Why would you sic the guards on me?
05:22 <     shalicke > ~gourds
05:22 <   clojurebot > SQUEEZE HIM!
05:22  *    shalicke takes a bow.
05:22 <   stcredzero > ~gads
05:22 <   clojurebot > Pardon?
05:22 <     sdegutis > shalicke: one of the few times I can literally say LOL
05:22 <   stcredzero > ~girds
05:22 <   clojurebot > excusez-moi
05:22 <   stcredzero > ~gauds
05:22 <   clojurebot > Titim gan éirí ort.
05:22 <  technomancy > ~praetorian guards
05:22 <   clojurebot > CAESE HIM!!!
05:23 <      amalloy > niiiice
05:23 <     shalicke > (inc technomancy)
05:23 <      lazybot > ⇒ 102
05:23 <     sdegutis > (dec technomancy)
05:23 <  technomancy > can't take the credit; stole it from #emacs
05:23 <      lazybot > ⇒ 101
05:23 <     sdegutis > Just tryin to balance things out
05:23  *    shalicke feels like gourds came from there too
05:23 <   stcredzero > So this is the Lispy version of Hogwarts?
05:23 <     sdegutis > (inc sdegutis)
05:23 <      lazybot > You can't adjust your own karma.
05:23 <     sdegutis > :(
05:23 <    AeroNotix > (inc sdegutis)
05:23 <      lazybot > ⇒ 6
05:23 <    AeroNotix > spread the love
05:23 <     sdegutis > (inc shalicke)
05:23 <      lazybot > ⇒ 1
05:24 <     sdegutis > (inc stcredzero)
05:24 <      lazybot > ⇒ 1
05:24 <  technomancy > (dec slytherin)
05:24 <      lazybot > ⇒ -1
05:24 <    AeroNotix > ,(prn AeroNotix)
05:24 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: AeroNotix in this context, compiling:(NO_SOURCE_PATH:0:0)>
05:24 <     sdegutis > ok $karma has got to go
05:24 <  technomancy > stcredzero: basically, yeah
05:24 <   stcredzero > stcredzero gets love? What did y'all do with the *real* clojure community?
05:24 <     sdegutis > Nobody wants #clojure to turn into a popularity contest, and also I have a way low $karma.
05:24 <     rasmusto > ~clojure
05:24 <   clojurebot > clojure is the king of the Sinatra-esque all-in-one-file webapp.
05:25 <   stcredzero > Lies!
05:25 <   stcredzero > ~Lies!
05:25 <   clojurebot > Pardon?
05:25 <   stcredzero > Clojurebot has the makings of a politician!
05:26 <         wink > I disagree with clojurebot's penultimate statement though
05:26 <   stcredzero > (pr-src stcredzero)
05:26 <         wink > because, just today, I wrote a sinatra app
05:26 <         wink > and because of a certain gem it would have taken me ages (probably) in clojure
05:27 <   stcredzero > wink: a good and big community counts for a lot
05:27 <         wink > plus I don't even want to think about inline templates in my clojure code :P
05:27 <     sdegutis > wink: what gem, you?
05:28 <         wink > sdegutis: github-flavored markdown :P
05:28 <     sdegutis > wink: re: templates, looked at hiccup?
05:28 <         wink > sdegutis: yeah, used it for a while, but that's not really like sinatra inline templates. not worse, but definitely different
05:29 <     sdegutis > Right, Clojure definitely needs to be used differently than Sinatra.
05:29 <     sdegutis > Hmm yeah, we're missing a GFM lib..
05:29 <     sdegutis > I've been using github.com/yogthos/markdown-clj
05:29 <         wink > I would have never thought I'd "defend" ruby against clojure. ever
05:29 <         wink > but in this case, as github is a ruby shop, anything else makes less sense
05:29 <     sdegutis > wink: Great, because in this channel, we admit and confess that Clojure is the best language.
05:29 <   stcredzero > wink: wish to accept the truth
05:30 <         wink > as I am *exactly* rendering github wiki links
05:30 <         wink > s,links,pages,
05:30 <     sdegutis > wink: In #haskell though we know for a *fact* that Haskell is better than Clojure.
05:30 <     sdegutis > wink: Granted, in #ruby-lang we know that Ruby is actually the best.
05:30 <   stcredzero > sdegutis: In this channel, I hope that we also realize: best language != best environment
05:30 <      brehaut > you are all wrong. idris is the future
05:30 <  technomancy > gfm from jruby. boom.
05:30 <         wink > sdegutis: see, in the php channels I am no one even claims it's the best language. we just get shit done :P
05:30 <     sdegutis > stcredzero: chruby + bundler ftw
05:31 <  technomancy > wink: same with elisp =)
05:31 <      brehaut > wink: emphasis on the shit ;)
05:31 <   stcredzero > chruby? I would be disturbed by programmers telling me they have a chruby for me
05:31 <     sdegutis > wink: that's because PHP is the best language, no need to tout it.
05:31 <     sdegutis > technomancy: yeah, elisp is so simple..
05:31 <  technomancy > ...yet powerful
05:32 <     sdegutis > (dinc technomancy)
05:32 <     sdegutis > aww not a real thing
05:32 <   stcredzero > "double income no closures"
05:32 <      brehaut > double income no cat?
05:32 <         wink > I'm allergic to income
05:32 <         wink > no, wait
05:32 <   stcredzero > ~scheme
05:32 <         wink > I'm allergic to cats
05:32 <   clojurebot > scheme is Scheme is like a ball of snow. You can add any amount of snow to it and it still looks like snow. Moreover, snow is cleaner than mud.
05:33 <   stcredzero > ~Haskell
05:33 <   clojurebot > It's greek to me.
05:33 <   stcredzero > ~Lua
05:33 <   clojurebot > Pardon?
05:33 <         wink > ~curry
05:33 <   clojurebot > Excuse me?
05:33 <   stcredzero > ~coc
05:33 <   clojurebot > I don't understand.
05:33 <         wink > clojurebot: Lua is awesome
05:33 <   clojurebot > Ok.
05:33 <   stcredzero > ~coq
05:33 <   clojurebot > Cool story bro.
05:33 <     sdegutis > stcredzero: boom got em
05:34 <     sdegutis > ~Lua
05:34 <   clojurebot > Lua is awesome
05:34 <   stcredzero > sdegutis: boom?
05:34 <      brehaut > gfredericks has some work to do apparently
05:34 <         wink > I was literally bursing out laughing when someone recently mentioned a problem with coq and the solution was "you forgot Qed. in the end"
05:34 <     sdegutis > stcredzero: yes.
05:34 <   stcredzero > sdegutis: yes?
05:34 <     sdegutis > right
05:34 <   stcredzero > ~greek
05:34 <   clojurebot > greek is it to me
05:35 <   stcredzero > ~me
05:35 <   clojurebot > It's greek to me.
05:35 <         wink > stop breaking it
05:35 <         wink > its feeble mind has suffered enough
05:35 <   stcredzero > ~Smalltalk
05:35 <   clojurebot > It's greek to me.
05:35 <     sdegutis > I cannot take it.
05:36 <     hiredman > I really should put a throttle in the bot so it automatically will ignore people when they excessively do this kind of thing
05:36 <         hons > ~scala
05:36 <   clojurebot > Scala often gets in the way when trying to write neat code -- seen in #scala
05:36 <   stcredzero > hiredman: sorry, I just got curious
05:37 <         hons > ~java
05:37 <   clojurebot > ☕
05:37 <         hons > ;)
05:37 <         wink > that entry should've been more verbose
05:38 <   stcredzero > True story: Smalltalker is told by boss he should change to Java. So he changes all the app icons to coffee cups and gets to code in Smalltalk for an additional 6 months. Later, he came to work for the Smalltalk vendor. (Where I was working)
05:38 <  technomancy > stcredzero: I am in awe.
05:39 <   stcredzero > Vasilly is awesome, actually. I should steal some of his ideas and rewrite them as pure functional versions
05:47 <   stcredzero > ~monads
05:48 <   clojurebot > monads are |monads|
05:48 <     metellus > ~|monads|
05:48 <   clojurebot > |monads| is endofunctors
05:48 <     rasmusto > ~burrito
05:48 <   clojurebot > Excuse me?
05:49 <   stcredzero > ~lolcode
05:49 <   clojurebot > No entiendo
05:51 <      brehaut > stcredzero: i am disappointed that that story does not fit in 140 characters
05:52 <      brehaut > well, 137
05:52 <   stcredzero > brehaut: And I am not bothered at all.
05:55 <   stcredzero > brehaut: TrueStory: Boss tells Smalltalker: Switch 2 Java. Smalltalker changes icons to coffeecups and codes in Smalltalk for 6 more months.
05:56 <      brehaut > stcredzero: haha thanks :)
05:56 <  gfredericks > a burrito is just a burroita in the menu of endofajitas
05:57 < justin_smith > "This man's boss wanted him to switch from Smalltalk to Java. What he did next will restore your faith in humanity"
05:57 <     rasmusto > gfredericks: haha
05:57 <      brehaut > gfredericks: ftw
05:57 < justin_smith > (inc gfredericks)
05:57 <      lazybot > ⇒ 43
05:57 <  gfredericks > that's the third time I've used that joke in 24 hours
05:57 <     rasmusto > (inc gfredericks)
05:57 <      lazybot > ⇒ 44
05:57 <     zspencer > (inc justin_smith)
05:57 <      lazybot > ⇒ 30
05:58 <  gfredericks > TimMc: it helps for easily putting giant results in vars without accidentally printing them
05:59 <     Bbarrett > I am trying to move files from one directory into another, should I utilize Java's .move method in this case, or is there a better way to do with a built in Clojure library
05:59 <   SegFaultAX > (inc gfredericks)
05:59 <      lazybot > ⇒ 45
05:59 <         wink > justin_smith: you got a day job at gawker?
06:00 <     sdegutis > I am about to use lazy-infinite-sequences to solve a problem.
06:00 <      brehaut > thats lucky, because strict-infinite-sequences are problematic in practise
06:01 <   stcredzero > Incidentally: The Smalltalker's name is Vasilly Bykov, IIRC
06:01 <      amalloy > Bbarrett: if a java method does what you want, use it
06:01 <    TEttinger > Bbarrett: I'd personally avoid additional dependencies and just use the .move , it's always available
06:01 <      amalloy > brehaut: it's fine as long as you have infinite time
06:01 <         wink > sdegutis: "I'll procrastinate the problem away" is what you meant?
06:01 <     Bbarrett > thanks
06:01 <      amalloy > and space
06:01 <      brehaut > amalloy: problematic, not impossible
06:01 <     Bbarrett > I kind of thought that might be the best path to take
06:01 <         wink > amalloy: if space is the final frontier, how can it be infinite?
06:01 <          cbp > Bbarrett: it's likely that the clojure library calls that method anyway
06:01 < justin_smith > wink: we use clojure to make optimized lazy headlines (no, I don't work at gawker, but those link bait headlines are too easy to mock)
06:01 <     hiredman > TEttinger: it is in fact only always available since 1.7
06:01 <         wink > justin_smith: :P
06:02 <    TEttinger > hiredman: agh
06:02 <     Bbarrett > thanks for the input!
06:02 <     Bbarrett > hope everyone is having a kiler day or evening
06:02 <   stcredzero > As far as we know, all of us reappear an infinite number of times in the cold, empty void past the heat-death of the universe as Boltzmann brains
06:03 <   SegFaultAX > This channel just got a lot more meta.
06:03 <    TEttinger > stcredzero: it's great being a brain in space.  free IRC
06:04 <   SegFaultAX > TEttinger: For some reason your movie reminded me of the soul-crushing sadness of Her. Did you see that movie?
06:04 <     sdegutis > I just did it!! https://github.com/sdegutis/Billow/blob/master/src/billow/service.clj#L14-L19
06:04 <  gfredericks > all of us reappear an infinite number of times in universes that are entirely identical to ours except that the moon landing was a hoax
06:04 <    TEttinger > I had a movie?
06:04 <   SegFaultAX > TEttinger: Wow, I accidentally some words there.
06:04 <     sdegutis > I used lazy infinite sequences to come up with a uniquely numbered name!
06:04 <   SegFaultAX > TEttinger: Your comment reminded me*
06:05 <   stcredzero > This sentence no verb!
06:05 <    TEttinger > I was confused for a bit.  no I have not seen Her
06:05 <      brehaut > gfredericks: in some of those existances cabbage trees are true
06:05 <       socksy > ugh i'm getting java.lang.OutOfMemoryError, but i have no idea which part of my code is producing it. Any tips for debugging?
06:05 <    AeroNotix > uh, with (time) is there something which'll give me the time as a value *and* the value of the expression I am evaluating?
06:05 <     rasmusto > socksy: jvisualvm?
06:05 <    AeroNotix > socksy: visualvn
06:06 <    AeroNotix > visualvm
06:06 <     hiredman > see where your code is allocating lots of memory and stop doing that
06:06 <  gfredericks > AeroNotix: I have this bg macro that is awesome for that
06:06 <  gfredericks > AeroNotix: oh wait no
06:06 <  gfredericks > I did not read that carefully
06:06 <  gfredericks > I've needed that a lot too and keep re-writing it
06:06 <    AeroNotix > gfredericks: I want to make a "r u there db" call and time it, as a statistics healthpoint
06:06 <         wink > reading the last 15minutes makes me wonder if I am drunk or some of you are.
06:06 <    AeroNotix > wink: I am
06:07 <    AeroNotix > always.
06:07 <     rasmusto > some-> people are
06:07 <     hiredman > a profile is great, but just a read through the code should give you a good idea at what is using all the memory
06:07 <          cbp > I am just dum
06:07 <     hiredman > profiler
06:07 <  gfredericks > (defmacro t [& body] `(let [b# (System/currentTimeMillis) ret# (do ~@body)] [ret# (- (System/currentTimeMillis) b#)]))
06:07 <      amalloy > AeroNotix: i remember seeing something called with-timing, but i forget where
06:07 <    TEttinger > socksy: I've gotten that in interesting places before, that error.
06:07 <  gfredericks > AeroNotix: ^there I wrote it again
06:08 <    AeroNotix > gfredericks: cool, ok. So I'll need to write something for this. No worries. I thought there might be something in the standard library for it
06:08 <       socksy > going to check out visualvm, cheers
06:08 <    AeroNotix > gfredericks: or maybe there's a secret cheat mode for (time) where it binds some variable or w/e
06:08 <   stcredzero > socksy: you going to run that on OS X?
06:08 <      amalloy > in one of ztellman's libraries, i think
06:08 <       socksy > the annoying thing about it is that it's an array that reaches the VM limit, but I'm not explictly creating any arrays
06:08 <     hiredman > the thing with oomes is they occur when you don't have enough memory to satisfy some request, which doesn't tell you about where all the memory is being used
06:09 <       socksy > stcredzero: arch linux
06:09 <   stcredzero > socksy: this is fortunate
06:09 <    TEttinger > socksy, I'm currently struggling with an odd issue with OpenJDK on windows giving that (or maybe something similar) on startup if more than half the RAM on the system is used
06:09 <       socksy > interesting
06:10 <    TEttinger > but mine's on startup of the JDK
06:10 <       socksy > (I've increased the heap size, so it's not a heap memory issue, rather, an issue with array sizes, given they're indexed by ints)
06:10 <         wink > TEttinger: there is openjdk for windows? oh, wow.
06:11 <     hiredman > socksy: just because you get an oome while doing something with an array, that doesn't mean the memory is all being consumed there, it just means that is where the vm noticed it didn't have enough
06:11 <    TEttinger > wink, yeah it's the only full JVM that you're legally allowed to resdistribute modified versions of.
06:11 <     hiredman > are you holding on to the head of large sequences
06:12 <       socksy > hiredman: agreed, but it's specifically an out of memory error regarding the array size limit
06:12 <         wink > TEttinger: interesting. the thought never crossed my mind actually, as I always had Sun/Oracle JDK on windows anyway.
06:13 <     hiredman > socksy: seems unlike that would be an oome, do you have a gist of the stacktrace?
06:13 <    TEttinger > wink, yeah especially starting with JDK 8 there's a hefty advantage to modifying it.  the JRE is something like 100 MB unaltered.
06:13 <         wink > TEttinger: you mean the download? I've never had to distribute it
06:14 <    TEttinger > actually JDK 8 is even larger, but the part you would distribute is (IIRC) 118 MB
06:14 <    TEttinger > I've been looking into distributing full JREs as a way of avoiding java installation/update hassles
06:15 <       socksy > hiredman: gimme a few minutes to rerun and run out of memory, but it's just the one liner "java.lang.OutOfMemoryError: Requested array size exceeds VM limit", from calling a function in the repl (no stacktrace :\)
06:15 <        red00 > how can i interact with clojurebot?
06:15 <     hiredman > socksy: (require 'clojure.stacktrace) (print-stack-trace *e)
06:15 < justin_smith > ,:red00
06:15 <   clojurebot > :red00
06:15 <        red00 > thanks
06:15 < justin_smith > np
06:16 <     rasmusto > red00: you can /msg clojurebot too
06:16 <       socksy > hiredman: fantastic
06:16 <     hiredman > socksy: assuming you are using nrepl/cider for whatever annoying reason they decided to default to not displaying stacktraces
06:16 <     hiredman > socksy: there is something setting you can toggle to get it to pop up the stracktrace, but I forget what it is
06:17 < justin_smith > also there is also clojure.repl/pst
06:17 <      Averell > toggle-debug-on-error
06:17 < justin_smith > Averell: that is for emacs errors
06:17 < justin_smith > not jvm ones
06:17 <      Averell > oh. i didn't read close enough
06:17 <     hiredman > terrible defaults everywhere
06:18 <     hiredman > people thing the stacktraces are ugly, so lets hide them, so now you can't figure out what broke
06:21 <       socksy > ugh, obviously too sleep deprived because I knew about the stacktrace issue before and forgot to enable it this time. Running the program again...
06:24 <       socksy > aha, it's a stringbuilder
06:26 <      arohner > hiredman: that's why I don't upgrade emacs libraries :-)
06:26 <      arohner > that, and I never remember how
06:26 <       socksy > https://gist.github.com/socksy/9796104
06:27 <      brehaut > arohner: step one, find a goat…
06:27 <     rasmusto > M-x package-destroy-sanity
06:27 <      murphy_ > haha
06:27 < justin_smith > (inc rasmusto)
06:27 <      lazybot > ⇒ 4
06:27 <     rasmusto > I just upgrade to cider, seems okay so far :p
06:27 < justin_smith > you'd think emacs people could make a better package management thing
06:28 < justin_smith > from nrepl? did you just purge nrepl first?
06:28 <    AeroNotix > when will people learn to put their emacs config into vcs
06:28 <     rasmusto > I think I deleted ~/.emacs.d/elpa and changed around init.el to have cider in it
06:28 <      murphy_ > probably never would be my guess ??
06:28 <      lazybot > murphy_: Uh, no. Why would you even ask?
06:28 <     rasmusto > then re-ran everything
06:28 <      amalloy > arohner, hiredman: slime/swank for life? are we in that club?
06:28 <     hiredman > no, I am using cider :/
06:29 <     rasmusto > I'm a big fan of pathogen + git-submodule
06:29 <     rasmusto > (sorry emacs ppl)
06:29 < justin_smith > AeroNotix: how would I track my package state? is there a single file for that? Would I need to check in all my elc files?
06:29 <     hiredman > rasmusto: git subtree is way better
06:29 <     hiredman > submodule is terrible
06:29 <       socksy > now this is during a function which is updating an agent map, which admittedly has strings in it, but each string should only be a few characters. I am wondering if it's actually having the error from the repl trying to print out the map
06:29 <      arohner > amalloy: I'm on some version of nrepl, but I was definitely the last person in my company to switch from slime
06:30 <     rasmusto > hiredman: does it actually let you look at the contents of the "modules/trees"?
06:30 <     rasmusto > instead of just dumping a sha into /.git
06:30 <     hiredman > socksy: yes, it is just the repl printing
06:30 <      amalloy > ; SLIME 20100404
06:30 <       socksy > so this time when I've been thinking it's been running out of memory, it hasn't really
06:30 <      amalloy > <3
06:31 <     hiredman > rasmusto: http://makingsoftware.wordpress.com/2013/02/16/using-git-subtrees-for-repository-separation/
06:31 <      amalloy > socksy: you are trying to print something which is the size of a small country
06:31 <     hiredman > rasmusto: you never have to submodule init or anything
06:32 <     hiredman > when you do a git checkout, it is all there
06:32 <     rasmusto > so are the master sha1s derived from all of the content of local files and the subtrees?
06:33 <     hiredman > rasmusto: I believe so
06:33 <     rasmusto > hiredman: can I do a git subtree fetch --prefix blah/foo ?
06:34 <     hiredman > I have no idea
06:34 <     rasmusto > hiredman: I'll have to try it out, submodules fit the need of dotfiles, but subtrees sound better overall
06:34 <     sdegutis > Ah, my test almost passed, but then I realized I need a really dynamic fake-service that stubs some remote calls and mocks others.
06:35 <   stcredzero > Am I correct in thinking that cons is O(1)?
06:35 <     hiredman > I still have a few emacs packages in my emacs as submodules but I have been converting to subtree
06:35 <     sdegutis > stcredzero: looks like it to me
06:35 <     sdegutis > hiredman: I have been just vendoring them from elpa, seems to work great so far
06:35 <     rasmusto > hiredman: can you do a git subtree foreach git pull? (not that it's safe)
06:35 <    AeroNotix > justin_smith: I just check in .emacs and .emacs.d/
06:35 <     sdegutis > hiredman: see https://github.com/sdegutis/dotfiles/tree/master/home/.emacs.d/elpa
06:36 <     sdegutis > package.el takes care of all the grunt work for me
06:36 <    AeroNotix > justin_smith: and yeah, there's a file which tracks what's installed.
06:37 <     hiredman > no
06:37 <     hiredman > but the whole reason I stick emacs packages in git is I found something I like and I don't want to change it
06:39 <     sdegutis > technomancy: honestly it's not elisp that's frustrating, it's the emacs api
06:40 <     sdegutis > technomancy: it's probably just inherent in the problem space.. you've got so many different parts that need to work together, and they're mostly codependent
06:40 < justin_smith > wait, elisp is somehow distinct from the emacs api?
06:40 <     sdegutis > I think defcustom vs defvar vs defadvice vs vs setq vs setq-default etc etc is a good example
06:42 <       socksy > ok, going to call it a night. Thanks for all the help, everyone
06:42 <     sdegutis > justin_smith: yessir
06:42 <     sdegutis > socksy: any time
06:46 <     sdegutis > It fricken worked.
06:48  *    sdegutis dances
06:52 <     sdegutis > Also I really don't like these tests.. but I don't know a better way: https://github.com/sdegutis/Billow/blob/master/test/billow/service_test.clj
06:52 <     sdegutis > Any suggestions?
06:52 <     sdegutis > They're just so.. crappy overall.
06:53 < justin_smith > responses and testing-configs could easily go in a separate file / namespace
06:53 <      amalloy > sdegutis: what is spec buying you over like clojure.test there?
06:53 <      amalloy > you just have a bunch of assertions
06:53 <     sdegutis > amalloy: I couldn't find a test-autorunner for clojure.test
06:55 <  technomancy > sdegutis: defadvice has nothing to do with the others
06:55 <  technomancy > I agree that defcustom is silly though
06:55 <  technomancy > defvar is just defonce; that's kind of important
06:55 <      amalloy > technomancy: whaaaaat. defcustom is great
06:55 <     sdegutis > technomancy: right, it's for hooks, and rms says non-users shouldn't even use them
06:55 <  technomancy > amalloy: the customize UI is pretty cringeworthy though
06:56 < justin_smith > technomancy: defcustom is kind of like "view level" - it's telling emacs how to make a friendly interactive config wizard for your lib
06:56 <  technomancy > it seems like a lame attempt to make it so people can use emacs without writing elisp
06:56 <  technomancy > like the toolbar
06:56 <      amalloy > technomancy: i mean, it's not great, but getting a color-chooser widget is so much nicer than having to guess what all available colors are named
06:56 <      amalloy > or a font-style widget, etc
06:57 <      amalloy > and feedback like "dude that's not the type that this variable expects" the moment you set it, instead of next time you reload your .emacs
06:57 <     sdegutis > amalloy: What's the motivation to use defcustom when someone isn't using customize-ui?
06:57 <      amalloy > sdegutis: there is none
06:57 <      amalloy > afaik
06:57 <     sdegutis > hyPiRion: thx
06:57 <      amalloy > but i use the customize ui
06:57 <  technomancy > amalloy: hm; I've never seen it used for either of those things
06:57 <     sdegutis > amalloy: ah
06:58 < justin_smith > I find browsing a customize buffer gets me the option I need faster than reading docs does, and is more likely to be accurate to my version than googling
06:58 <  technomancy > unless you count M-x customize-face, which doesn't actually use defcustom
06:58 <      amalloy > okay, maybe i was counting customize-face
06:58 <     sdegutis > amalloy: I've used customize-themes just because it's the quickest way to try out new themes while disabling old ones, but I'd prefer a UI more like magit and less like windows-95
06:58 <      amalloy > but eg, you can specify :type int, and then the user can't enter strings
06:58 <     sdegutis > sorry, windows-3.1
06:59 <     sdegutis > Magit is just wicked awesome.
07:07 <     sdegutis > yessss, it works so really.
07:12 <     sdegutis > hyPiRion: hmm good idea
07:12 <     sdegutis > amalloy: do you know of a good test-autorunner for clojure.test?
07:13 <      amalloy > $ watch lein test
07:13 <     sdegutis > That seems maybe not the best?
07:14 <     sdegutis > Thought I remembered two ones that started existing.
07:15 <      amalloy > definitely not best. but i don't really care about autotest, and if i did i'm not sure what a lein plugin would do that's better than just running tests constantly
07:15 <         bob2 > I think midje's auto run thing can run c.t tests?
07:15 <  technomancy > sdegutis: the in-emacs stuff is fine
07:16 <  technomancy > I just think we can do better
07:16 <     sdegutis > not while network effect is a thing
07:17 <  technomancy > clojure-test-mode is probably the most widely-used monkeypatch in the whole clojure ecosystem
07:17 <  technomancy > well, no, that would be lein test. it's the oldest extant monkeypatch.
07:18 <    jasonjckn > so happy I went to clojure/west
07:19 <    jasonjckn > I think i'll register with clojure/conj now
07:22 <     hiredman > the conj tends to come together at the last minute, so you can't register until a few months before hand, and last time I think they sold out before they even announced who was speaking
07:22 <     sdegutis > Oh hey, clojure-test-mode is nice.
07:23 <     sdegutis > Okay, so let's say someone wanted to help out and make clojure-test-mode not so monkey-patchy, and has a few spare hours.. what would need to be done?
07:23 <  technomancy > sdegutis: steal rich's SSH key so clojure.test itself can be fixed
07:23 <     sdegutis > Can it not be just forked?
07:24 <     sdegutis > (his ssh key)
07:24 <     sdegutis > (I mean clojure.test)
07:25 <  technomancy > nrepl-discover actually does the same monkeypatch https://github.com/technomancy/nrepl-discover/blob/master/src/nrepl/discover/samples.clj#L38
07:25 <  technomancy > sdegutis: sorry, being a smartass
07:25 <  technomancy > the actual thing that's missing is just more detail about where the failure occurred
07:26 <         bob2 > is it a backwards incompatible change?
07:28 <  technomancy > I don't think so
07:28 <  technomancy > in this case we're storing results on the vars where the failures occured
07:29 <  technomancy > seems unlikely that would break anything except code that was already doing that monkeypatch
07:31 <     sdegutis > Why didn't someone just submit a pull request fixing it for Clojure 1.6?
07:36 <     sdegutis > How do you assert that nothing is thrown in clojure.test?
07:36 <  technomancy > deftest
07:36 <  technomancy > or just is
07:39 <     sdegutis > woot thx
07:39 <     sdegutis > <3
07:46 <        chare > so what do you guys think of this https://hackworth.be/2014/03/26/clojure-web-security-is-worse-than-you-think/
07:47 <      brehaut > chare: the article is a bit wacky but the presentation is really good
07:47 <        chare > so you're saying clojure is broken in security for web?
07:47 <      brehaut > im not sure where the author got “Building secure Clojure web applications needs to be easier, and requires integrated security frameworks - not standalone libraries!” from
07:48 <      brehaut > chare: not at all. but it needs more work
07:48 <        chare > so does that mean i should stick with ruby on rails?
07:48 <      brehaut > chare: you need to decide that for yourself
07:48 <        chare > brehaut i'm going to assume you're a security expert so i need advice
07:49 <      brehaut > chare: assuming random people on the internet are security experts is probably a poor starting position ;)
07:49 <        chare > brehaut you admitting you don't know anything?
07:49 <      brehaut > no
07:51 <       btbngr > cider-repl gives me nice argument hints in the minibuffer within the repl, but is just not doing anything so nice inside my .clj files, is there a way to improve that?
07:51 <       btbngr > cider* not cider-repl.
07:52 <       scottj > btbngr: maybe eldoc-mode? (I haven't used cider, not sure if it uses eldoc-mode for that)
07:53 <       btbngr > nope, not as is anyway. hey ho. thanks anyhow.
07:54 <       scottj > just confirmed nrepl.el uses eldoc-mode for that, so you might want to doublecheck
07:56 <       btbngr > hmm, okay, sounds like i need to investigate my configuration. ta.
07:56 <      akhudek > chare: there is no "inherent" problem with clojure prevent one from building a secure app. If you really care about security, you should not be relying on your framework to keep you safe anyways. That's not an argument against secure defaults of course, but rather one that suggests that every web developer should learn about security vulnerabilities anyways.
07:57 <       rhg135 > I'm trying to convert https://www.refheap.com/66390 to tail-recursion or a loop but i'm completely lost. any ideas?
07:59 <      amalloy > rhg135: you can't recurse multiple times in constant space. you have to either use up some stack, or manage a stack/queue yourself as data
08:00 <       rhg135 > amalloy, i only see 1 recursion there though
08:00 <      amalloy > rhg135: you're mapping
08:00 <      amalloy > that's "the same as" [(f x) (f y) (f z)]
08:00 <       rhg135 > i see
08:00 <       rhg135 > hmm
08:00 <       btbngr > scottj: aha, found (cider-turn-on-eldoc-mode) in cider-eldoc.el, thanks, that was the clue I needed.
08:01 <       rhg135 > then cps conversion?
08:01 <      amalloy > *shrug* sure, if you want, although loop/recur with a local "todo" stack will probably be easier
08:02 <       rhg135 > oh duh
08:02 <      amalloy > and clojure doesn't optimize tail calls anyway, so you'd have to transform the cps into a trampoline
08:02  *      rhg135 facepalms
08:02 <      amalloy > otoh, if this blows your stack, you're building a *really* deep map
08:02 <      amalloy > which might later blow your stack anyway, when you try to work with it, even if you avoid doing so while building it
08:04 <        chare > why does lein run take like 5 seconds to run a hello world program?
08:14 <     pjstadig > JVM
08:14 <   jcromartie > no, Clojure
08:15 <      amalloy > yeah, it's clojure for sure, not jvm
08:16 <   jcromartie > https://gist.github.com/anonymous/e3566f573eb7f7fd6bb5
08:17 <   jcromartie > JVM is fast now. Welcome to 2009.
08:17 <        verma > what is the general strategy for testing a lein plugin?
08:21 <        verma > ok, found this: https://github.com/technomancy/leiningen/blob/master/doc/PLUGINS.md
08:21 <   jcromartie > you can test your core plugin function like any other
08:22 <      brehaut > python is slower than the jvm on my machine which is pretty funny
08:22 <     hyPiRion > verma: I generally just think really hard before I deploy it. And I usually do it when I'm not tired.
08:22 <     hyPiRion > It's not your standard unit testing technique, but it's a supplement I guess
08:22 <     hyPiRion > =)
08:30 <   stcredzero > what's the fastest way to flatten sequences, if you don't give a __ about ordering?
08:32 <     hyPiRion > ~flatten
08:32 <   clojurebot > flatten is rarely the right answer. Suppose you need to use a list as your "base type", for example. Usually you only want to flatten a single level, and in that case you're better off with concat. Or, better still, use mapcat to produce a sequence that's shaped right to begin with.
08:33 <     hyPiRion > afaik, removing the ordering wouldn't help at all
08:33 <   stcredzero > I'm using sequences aggregate a sequence of collections from pmap, and I really do want something completely flat.
08:34 <     hyPiRion > stcredzero: so essentially a list of lists? Then (apply concat (pmap ...)) should be sufficient
08:35 <   stcredzero > To put it another way, what's the fastest way to collect stuff coming out of functions sent to pmap as one collection?
08:35 <     hyPiRion > Or, if you want to be fancy, you can use an atom, set up your own threadpool, and make each process do (swap! atm concat my-results)
08:36 <       arrdem > manually managed threadpools ++
08:36 <   stcredzero > I'm actually not using pmap. I wrote my own pmap like thing using futures that blocks until everyone is finished. I think I'd rather not manage threadpools.
08:37 <   jcromartie > stcredzero: how about a set?
08:37 <   stcredzero > Will just mapping futures mess things up? What thread pool are those coming out of? How big?
08:38 <     hyPiRion > jcromartie: will remove duplicates, which is not exactly the same as unordered?
08:38 <   jcromartie > don't forget about laziness
08:38 <   jcromartie > hyPiRion: depends on what he wants
08:38 <   stcredzero > jcromartie: set might work. I'm tempted to use swap! and cons. I'm using mapv and doall to get rid of laziness in this case
08:39 <   jcromartie > OK so, pmap produces a seq of seqs?
08:39 <   jcromartie > and you want a single collection of the values of that inner seq?
08:39 <   stcredzero > jcromartie: yes, it would produce a seq of seqs if I just pumped it through pmap
08:40 <   stcredzero > jcromartie: and yes, I just want what would be the flattened seq
08:41 <   jcromartie > what about… (reduce into #{} (pmap whatever coll))
08:41 <     hyPiRion > stcredzero: (let [atm (atom [])]  (mapv deref (mapv #(future (swap! atm into (list-of-elements))) unprocessed-data)) @atm) sounds sorta what you'd like
08:41 <     hyPiRion > but I'm not sure it's very nice wrt. threading
08:42 <   stcredzero > not nice wrt threading is bad.
08:42 <   jcromartie > define "nice"
08:43 <   jcromartie > nice as in: well-behaved? or nice as in: using as many cores as fully as possible?
08:43 <     hyPiRion > stcredzero: I mean, pmap is already bad. Perhaps https://github.com/TheClimateCorporation/claypoole would help you here
08:43 <   stcredzero > hyPiRion: yes, so I've heard, so I'm not using pmap.
08:44 <     hyPiRion > stcredzero: so well, the solution I presented delegates all its work to the future threadpool. It's hard to control, but perhaps that's suitable for your type of work
08:45 <     hyPiRion > *harder
08:45 <   jcromartie > pmap uses futures
08:46 <   stcredzero > hyPiRion: how big is the future threadpool? (+ (count cores) 2)?
08:46 <       arrdem > stcredzero: I think it's bigger than that...
08:46 <   jcromartie > look
08:47 <   jcromartie > on my 4-core machine, (reduce into #{} (pmap f coll)) is 4X faster than with map
08:47 <   jcromartie > I think that's what you want
08:48 <   jcromartie > (for a long running op where threading overhead is negligible)
08:48 <   stcredzero > jcromartie: however, this is for cpu bound things which are still short. (Will be firing off many times per second.)
08:49 <   jcromartie > just test it
08:49 <   stcredzero > claypoole looks very interesting
08:50 <     hyPiRion > stcredzero: to answer your question, the future threadpool uses the same threadpool as the agent threadpool. That one grows without any bound, but will reuse threads which are done with their work.
08:52 <   stcredzero > hyPiRion: so I think this means that I should keep claypoole in mind, but just use my mapv-futures-thing until I see an issue.
08:52 <       arrdem > unbounded threadpools are suckage.
08:52 <   jcromartie > are you positive that your mapv-futures-thing is any better than pmap?
08:53 <     hyPiRion > jcromartie: pmap is horrible if you have some large spikes in working time here and there. Try to check out how fast (pmap #(Thread/sleep %) (concat [1000] (repeat 0 (+ 2 (.. Runtime getRuntime availableProcessors))) [1000])) is
08:53 <   stcredzero > jcromartie: in that I don't want lazy evaluation for this part, yes.
08:53 <     hyPiRion > whoops, flip order of the arguments in repeat
08:54 <   jcromartie > reduce forces the evaluation
08:54 <   jcromartie > but I'm just saying, if you're using futures
08:54 <   jcromartie > pmap uses futures
08:56 <   stcredzero > claypoole looks very attractive. I'm using this for a parallelized game loop, so lazy evaluation is actually dangerous. Also, I can just keep the thread pool sized (+ cores 2) and keep it around for the game loop to use.
08:58 <     hyPiRion > jcromartie: The issue is that a slow task will block calls later in the list. E.g. if I have a dual core processor, then the 4th task after any task sent off will not be executed before that task is completed
09:00 <       arrdem > stcredzero: for that application probably what you'll wind up doing is just spinning off N threads and using atoms to implement message queues. Unless your drawing engine is single threaded and you need to coalate all the drawing results rather than splatting them directly "out".
09:00 <   jcromartie > ,(time (doall (pmap #(Thread/sleep %) [1000 0 0 0 0 0 0 0 0 0 0 0 0 0 1000 0])))
09:00 <   clojurebot > #<SecurityException java.lang.SecurityException: no threads please>
09:00 <   jcromartie > well anyway, for me, it was 1s
09:01 <   stcredzero > arrdem: it's a multiplayer game. It doesn't "draw" so much as send maps over websockets
09:02 <     hyPiRion > &(Thread/sleep 1000)
09:02 <      lazybot > ⇒ nil
09:03 <     hyPiRion > (time (doall (pmap #(Thread/sleep %) (concat [1000] (repeat (+ 2 (.. Runtime getRuntime availableProcessors)) 0) [1000]))))
09:03 <     hyPiRion > &(time (doall (pmap #(Thread/sleep %) (concat [1000] (repeat (+ 2 (.. Runtime getRuntime availableProcessors)) 0) [1000]))))
09:03 <      lazybot > java.lang.SecurityException: You tripped the alarm! pmap is bad!
09:03 <     hyPiRion > oh, but Thread/sleep is fine? lazybot, I don't get you.
09:04 <   jcromartie > hyPiRion: I see, it's when it falls on the particular placement in the sequence?
09:06 <   stcredzero > arrdem: also, it's a game that needs a discrete grid and I'd also like to have discrete time steps. agent-y/actor-y nondeterminacy is bad
09:06 <     hyPiRion > jcromartie: right, when there's one really heavy function call, the list won't proceed beyond some element behind it because pmap is lazy
09:06 <     hyPiRion > semilazy, rather
09:09 <    turbofail > sounds like a job for claypoole
09:20 <       rhg135 > amalloy, am I incorrect in thinking that `map` since it's lazy wouldn't cause a stack explosion
09:22 <      amalloy > rhg135: that's too general a question to really have an answer
09:22 <      amalloy > you can absolutely blow the stack with map, via like ##((fn f [xs] (map f xs)) '(1))
09:22 <      lazybot > java.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Long
09:23 <      amalloy > &((fn f [xs] (map f [xs])) '(1))
09:23 <      lazybot > java.lang.StackOverflowError
09:23 <       rhg135 > oh i see now, amalloy
09:23 <       rhg135 > back to the drawing board :(
09:23 <       rhg135 > can't figure out what to put in the queue
09:26 <       zenoli > How does one go about reading a file into a Buffy buffer? I've been beating my head against this for an hour.
09:36 <      amalloy > rhg135: why are you trying to make this tail-recursive? it seems really unlikely that that will lead to a program that's better in any interesting way
09:37 <       rhg135 > amalloy, it's for a build tool if this (dependency graph generator) blows the stack large project would be no-ops
09:40 <   Frozenlock > If I put a CSS file in the resources of a library, will it be available for a project using this library?
09:41 <      amalloy > hmmm. do you have to build a big nested map? it seems like a one-level map of "all the things X depends on" should be useable (not sure if it needs to be transitive dependencies or direct)
09:43 <       rhg135 > amalloy, yeah you know f*** it this is a POC and i'll try that
09:45 <      TravisD > Now that's a TLA that you don't see every day
09:46 <    lemonodor > zenoli: i don’t know, and i haven’t tried buffy, but i liked using https://github.com/ztellman/gloss pretty well,
09:48 <       zenoli > lemonodor: Thanks...does it deal well with dynamic frames?
09:50 <    lemonodor > i didn’t try.  i was using it to parse AR.Drone telemetry data, which uses a tagged format, but i used my own logic to delimit tagged frames
09:51 <       zenoli > I just managed to finally get it to accept a file object...the version in Clojars is -beta1, which seems to not like wrapped buffers at all.
09:55 <    lemonodor > https://github.com/wiseman/turboshrimp/blob/master/src/com/lemondronor/turboshrimp/navdata.clj if you want to see an example
09:57 <         bob2 > TravisD, depends where you work!
09:57 <       zenoli > Woo, just managed to successfully extract a string!
09:58 <       zenoli > lemonodor: Thanks...that's really helpful. I'll poke at gloss as well, since I'm not deeply committed at this point.
10:04 <    lemonodor > btw, one reason i did the tagged frame logic myself was to do lazy decoding, so i didn’t go to the overhead of parsing every frame if it wasn’t being used.
10:04 <    lemonodor > go to the overhead?  i meant go to the trouble.
10:08 <       zenoli > I'm trying out a modfile parser for overtone...my first attempt is morbidly inefficient, just sucking in the entire file.
10:09 <       zenoli > Java I/O is a terrible twisty maze of classes, all alike.
10:09 <      brehaut > the dwarf throws his axe.
10:09 <      brehaut > it misses
10:10 <       zenoli > plugh
10:18 <        malyn > lijnen___: I think it's here: https://github.com/swannodette/swannodette.github.com/blob/master/code/blog/src/blog/instrument/core.cljs
10:20 <       zenoli > Hmm...can you specify endianness of the representation in gloss? I'm not see anything along those lines in the docs for either it or buffy.
10:21 <    lemonodor > yes, there are -be and -le versions of each type.  you might be able to set the endian-ness of the bytebuffer you give it, i’m not sure
10:21 <   stcredzero > so, if anyone wants to hop onto my online grid/map engine for my Clojure MMO, I'm running a stress test at http://raidsphere.com
10:22 <   stcredzero > It's not yet a game.
10:22 <       zenoli > lemonodor: Ah, hadn't thought to check the classes I was passing in.
10:26 <       zenoli > Yep, that does it. Excellent.
11:05 <     sdegutis > What I realized I'm not happy with is this ad-hoc "mock" service: https://github.com/sdegutis/Billow/blob/master/src/billow/service/fake.clj
11:28 <      brehaut > ~seen dgrnbrg
11:29 <   clojurebot > Pardon?
11:29 <      brehaut > &seem dgrnbrg
11:29 <      lazybot > java.lang.RuntimeException: Unable to resolve symbol: seem in this context
11:29 <      brehaut > bah. no idea what im doing
11:42 <      amalloy > $mail brehaut $seen dgrnbrg
11:42 <      lazybot > Message saved.
11:42 <      amalloy > $seen dgrnbrg
11:42 <      lazybot > dgrnbrg was last seen quitting 5 weeks and 3 days ago.
11:43 <   aaronj1335 > arrdem hey buddy
11:45 <       arrdem > aaronj1335: sup
11:45 <       arrdem > aaronj1335: just running one last round of tests before I call it
11:45 <   aaronj1335 > cool. thnx again for all the help on this
11:46 <       arrdem > no problem. it's been a fun exercise in profiling Clojure apps..
11:46 <   aaronj1335 > also... i think i may have been at a clojure meetup here in atx that u were at... do you go to any of those?
11:46 <       arrdem > I've gone to a couple... stopped going recently.
11:46 <   aaronj1335 > yea i think those could b a lot better
11:47 <       arrdem > goddamnit.
11:47 <   aaronj1335 > at least based on the only one i went to
11:47 <       arrdem > yeah I would agree.
11:47 <       arrdem > so I managed to get five rounds of random-hmm down to 118s.
11:47 <       arrdem > best I can do.
11:48 <        chare > I've decided to use ruby on rails frontend and erlang backend until you guys mauke a clojure framework that works right out of the box
11:48 <   aaronj1335 > is that w/o the doall here? https://github.com/aaronj1335/inclojure/blob/master/src/inclojure/core.clj#L11
11:48 <       arrdem > that doall doesn't really impact random-hmm
11:48 <       arrdem > pulling it gets file reading down to sub 1s :P
11:49 <   aaronj1335 > that's cause it's not reading the files tho ...
11:49 <   aaronj1335 > w/o that doall token-seq just returns an unrealized lazy-seq
11:49 <       arrdem > and that's a language feature
11:50 <   aaronj1335 > but the point of it is to compare how fast clojure reads the files vs. python
11:50 <   aaronj1335 > we could make the python really fast too by just instantiating a generator
11:50 <       arrdem > pr sent for your entertainment
11:51 <       arrdem > https://www.refheap.com/66515
11:52 <       arrdem > aaronj1335: so I think what's happening here
11:53 <       arrdem > aaronj1335: is that I haven't cooked up a way to make the random-hmm lazy on the probs-for-tokens
11:54 <       arrdem > aaronj1335: the profiling I've done shows pretty conclusively to me that the issue is that random-props is always forced to evaluate. Computing the random numbers is dirt cheap, the issue is doing all the map insertions I think.
11:56 <   aaronj1335 > yea the map insertions are necessary for the algo tho. and a map shouldn't b taking up 4 G of memory
11:56 <       arrdem > I'd have to go in with a more heavyweight profiler than timbre to really diagnose that
11:57 <   aaronj1335 > yea
11:57 <   aaronj1335 > i'll have a closer look at this PR tomorrow morn, signing off for now
12:00 <     sdegutis > When you use clojure-test-mode.el, do you often find yourself going into the src buffer and doing M-x cider-eval-buffer just to get the tests to see the new changes?
--- Log closed Thu Mar 27 12:06:44 2014
--- Log opened Thu Mar 27 12:06:57 2014
12:06 -!- Irssi: #clojure: Total of 675 nicks [1 ops, 0 halfops, 0 voices, 674 normal]
12:07 -!- Irssi: Join to #clojure was synced in 20 secs
12:32 <  felixflores > I'm trying to figure out what the `..` operator is but I get a 404 when I look for the documentation
12:32 <  felixflores > http://clojuredocs.org/clojure_core/clojure.core/_dot_dot
12:32 <  felixflores > googling .. is really hard
12:32 <  felixflores > does anyone know what it does?
12:32 <  felixflores > (defn handle-change [e owner {:keys [text]}]
12:32 <  felixflores >   (om/set-state! owner :text (.. e -target -value)))
12:33 <       beamso > http://clojure.org/java_interop#dot
12:33 <  felixflores > Trying to figure out how this does it's thing
12:33 <       beamso > i think (.. e -target -value) expands to e.getTarget().getValue()
12:33 <  felixflores > ah ok
12:34 <  felixflores > makes sense now
12:34 <  felixflores > thanks :)
12:34 <  felixflores > (.. System (getProperties) (get "os.name"))
12:34 <  felixflores > expands to:
12:34 <  felixflores > (. (. System (getProperties)) (get "os.name"))
12:34 <  felixflores > this was also useful
12:34 <  felixflores > awesome
12:35 <      TravisD > felixflores: In the future, you could have used doc to learn about it
12:35 <      TravisD > ,(doc ..)
12:35 <   clojurebot > "([x form] [x form & more]); form => fieldName-symbol or (instanceMethodName-symbol args*) Expands into a member access (.) of the first member on the first argument, followed by the next member on the result, etc. For instance: (.. System (getProperties) (get \"os.name\")) expands to: (. (. System (getProperties)) (get \"os.name\")) but is easier to write, read, and understand."
12:36 <  felixflores > oh snap. Of course.
12:37 <    turbofail > i wish i could get docstrings for java junk
12:37 <    turbofail > instead of having to wade through HTML
12:37 <    turbofail > i guess there is a way to do it but i haven't set it up
12:37 <       beamso > i kinda like wading through java api html
12:37 <       beamso > better than wading through ruby api html
12:38 <  felixflores > I just had a brain fart, and forgot I can do that in the repl, probably because I'm just reading a blog.
13:37 <         jph- > nice to see the crypto-password update
13:51 <         sid_ > Hi, I've been working on a clojure project using luminus using selmer for UI design. Most of the functions that I've written reutrns an html page. Now, I've started with testing. Can anyone help me as to how can I test these functions(i.e those returning html pages with selmer tags)?
14:03 < sorenmacbeth > hey all
14:03 < sorenmacbeth > is there something less gross than this?
14:03 < sorenmacbeth > (merge-with #(merge-with + %1 %2) {"a" {"b" 1}} {"a" {"b" 1}})
14:03 < sorenmacbeth > {"a" {"b" 2}}
14:05 <       arrdem > I doubt it... that isn't too nasty IMO
14:06 <       arrdem > I mean you could write a custom recursive merge, but if all your data is only two levels deep why bother.
14:10 <         sid_ >  Hi, I've been working on a clojure project using luminus using selmer for UI design. Most of the functions that I've written returns an html page. Now, I've started with testing. Can anyone help me as to how can I test these functions(i.e those returning html pages with selmer tags)?
14:14 <       beamso > sid_: refactor the functions to test the maps being passed to selmer rather than the html coming back from selmer?
--- Log closed Thu Mar 27 14:22:27 2014
--- Log opened Thu Mar 27 14:22:49 2014
14:22 -!- Irssi: #clojure: Total of 679 nicks [1 ops, 0 halfops, 0 voices, 678 normal]
14:23 -!- Irssi: Join to #clojure was synced in 21 secs
14:44 <         jph- > are there any tricks for dealing with cyclic load dependency?
14:44 <         jph- > i have some functions from ns A that want functions from ns B and vice versa
14:45 <         jph- > is there a way to do that so an exception doesnt get thrown?
15:13 <   whodidthis > maybe better to refactor i'd imagine
15:21 <         jph- > whodidthis, thats what caused it in first place, moving a section of functions into a separate file
15:21 <         jph- > oh well
15:40 <   whodidthis > i dont think clojure reader thingie wants to bouncy bounce, symbols need to alredy be defined
15:55 <        sm0ke > is it possible to proxy an interface with same name and arity defintion of a function with different type?
15:56 <        sm0ke > i mean a function with different param types and same arity
18:07 <   Frozenlock > Interesting... react.js (om/quiescent/reagent) gives you tabs/tabsets for free.
18:10 <       yotsov > Frozenlock: that sounds interesting, can you elaborate a bit on why that is so? I am trying to learn quiescent now
18:12 <   Frozenlock > Well, your UI (html document) is basically generated from your atoms. There's nothing preventing you from re-using the same components again and again.
18:12 <   Frozenlock > Give me a sec, I'll try to upload an example
18:19 <   Frozenlock > yotsov: Here, my main react playground at http://hvac.io
18:19 <   Frozenlock > You can remove a tabset by clicking the "x" in the upper right and add another one by clicking the "split screen" button at the bottom right.
18:20 <       yotsov > Frozenlock: thanks a lot! I think I see what you mean now
18:31 <   Frozenlock > "Note: :import is only for this use case, you never use it with ClojureScript libraries" o_O
18:31 <   Frozenlock > Why?
18:31 <   clojurebot > Frozenlock: because you can't handle the truth!
18:32 <       beamso > is import only for java classes?
18:32 <   Frozenlock > Ah sorry, that's for clojurescript
18:33 <   Frozenlock > I'm reading this http://swannodette.github.io/2013/11/07/clojurescript-101/
18:33 <       beamso > oh.  for the google closure compiler too.
18:34 <   Frozenlock > Does he mean that :import isn't usually required, or that we shouldn't use it?
18:36 <       beamso > it looks like it's just to shorten the references to google closure constructors
18:36 <       beamso > i.e. Jsonp. instead of goog.net/Jsonp.
18:37 <   Frozenlock > phew... I used :import quite a few times with goog closure stuff and was wondering if it was a mistake.
19:44 <   whodidthis > how do i check if a javascript environment has window to not try to evaluate js/window specific stuff in nashorn
19:51 <  nbeloglazov > whodidthis: did you try (when js/window (do-window-specific-stuff)) ?
19:53 <   whodidthis > sure, throws "window not defined"
19:54 <   whodidthis > i guess i could try catch that but hopefully theres something less rough to use
19:55 <   whodidthis > or keep om stuff and event handling stuff in separate projects so nashorn would use only the om part but thats somewhat rough too
20:09 <  nbeloglazov > What do you need nashorn for? Testing?
20:09 <   whodidthis > server side rendering
20:10 <   whodidthis > also meh, tried to set var window = false on nashorn but then nashorn cant eval react
20:11 <     sdegutis > When you use clojure-test-mode.el, do you often find yourself going into the src buffer and doing M-x cider-eval-buffer just to get the tests to see the new changes?
20:11 <     sdegutis > Seems like I'm missing something, but I checked the docs and don't see what I'm missing.
20:29 <     sdegutis > Ah, there's lein-test-refresh, prism, and quickie, all for auto-re-running clojure.test suite when a file changes.
20:29 <     sdegutis > Can anyone recommend one?
20:40 <     sdegutis > Meh Prism works fine.
21:08 <     sdegutis > Okay, apparently you need to call (flush) before you call (read-line). Don't forget it.
21:38 <RickInAtlanta > I want to experiment with websockets between clojure and clojurescript.  It looks like aleph and http-kit are libraries I should look at.  Any others, and any way to choose between them?
21:41 <      luxbock > this is kind of a silly question but how do I check what version of nrepl I am running, and how can I upgrade it?
21:48 <         jph- > RickInAtlanta, i really liked this article when i was experimenting with websockets http://samrat.me/blog/2013/07/clojure-websockets-with-http-kit/
21:48 <RickInAtlanta > jph- awesome, thanks.
21:49 <         jph- > he has a second one after that as well
21:49 <         jph- > worth bookmarking
21:55 <         jph- > is there any good articles/libraries related to managing worker queues in clojure
21:55 <         jph- > i have a basic one, but i'd like to be able to look inside it, for instance to see how many jobs remain
21:55 <         jph- > i'm wondering if there's something that does that kind of thing already
21:55 <    Anderkent > Goddamnit, getting bug reports just after promoting a non-snapshot version makes me feel so bad... If only you made that report a week ago!
21:56 <         jph- > Anderkent, my plan is to never call a library production ready ;)
21:56 <         jph- > alpha forever
21:56 <     hyPiRion > Anderkent: bugfix release?
21:57 <     hyPiRion > it's just to add in a .1 at the end. I did that when I screwed up the deployment once :p
21:57 <         jph- > yeh i was about to announce 0.2.0 of something, realised i forgot to test something, quickly pushed 0.2.1
21:57 <         jph- > hehe
21:58 <    Anderkent > yeah, I mean it's totally irrational, the bug isnt even that big of a deal I think
21:58 <    Anderkent > it just offends my sensibilities to have published something that's not perfect, and it'll be there forever, bringing shame to everyone involved
21:58 <    Anderkent > :P
21:58 <         wink > http://en.wikipedia.org/wiki/Software_versioning#TeX ;)
21:59 <     hyPiRion > Anderkent: So you always write perfect bug-free code at first attempt? =)
21:59 <    Anderkent > jph-: a quick googling brings up simple-queue, but I'm not sure how it compares to your thing
21:59 <    Anderkent > hyPiRion: no, I never publish without being anxious and ashamed
21:59 <    Anderkent > :P
21:59 <     hyPiRion > hehe
22:00 <     hyPiRion > I think bug reports are nice, it means people at least use my libraries
22:00 <    Anderkent > sure, I love bug reports. I just hate publishing non-snapshot versions
22:00 <     hyPiRion > yeah
22:08 <    Anderkent > I wish 'no matching method found' would include the signature it was looing for in the error message... It's so useless right now
22:14 <    shep-home > So, tools.namespace.repl/refresh is pretty great
22:14 <         jph- > shep-home, yes
22:14 <    shep-home > but can I add in an extra resource to the dependency tree?
22:15 <         jph- > shep-home, especially when you discover having a dev/user.clj profile for development
22:15 <         fro_ > I'm trying to decide which version of "The Joy of Clojure" to buy. Second Edition is
22:15 <         fro_ > EAP
22:15 <RickInAtlanta > fro_: get version 2
22:15 <RickInAtlanta > er, second edition
22:15 <    shep-home > jph-: Yup, I'm starting to build up a global user.clj at the moment, Don't need per-project yet :-)
22:15 <         fro_ > ok, thx
22:16 <    shep-home > I have this file as a resource, and I load that into one of my namespaces
22:16 <         jph- > shep-home, i dont know how i lived without it, but you kinda need to see it in action for the penny to drop
22:16 <    shep-home > and I'd like refresh to notice that and reload the namespace, even though that .clj file hasnt changed
22:17 <         jph- > when i refresh, my user.clj gets reloaded as well
22:17 <         jph- > so can't you put a trigger in there?
22:18 <    shep-home > jph-: not sure I follow. I have a resources/foo file, and then bar.clj loads that file as a def (more or less)
22:18 <    shep-home > so, if I edit the resource, I'd like it to get reloaded in the bar ns
22:19 <         jph- > hrmm
22:19 <    shep-home > I don't expect tools.namespace to figure that out
22:19 <         jph- > well
22:19 <         jph- > you can setup a filesystem watcher
22:19 <    shep-home > but I would like to be able to go out of my way to tell it
22:19 <         jph- > that could do something when a change is detected
22:19 <    shep-home > hmm
22:19 <         jph- > with fs library
22:20 <         jph- > https://github.com/derekchiang/Clojure-Watch
22:22 <    shep-home > Would you suggest basically touching the .clj file when the resource is updated?
22:23 <         jph- > not sure
22:24 <         jph- > im wondering how ring-devel does it's dynamic loading
22:24 <         jph- > if it has any filesystem watchers under the hood
22:27 <       mpenet > ,(with-meta nil {})
22:27 <   clojurebot > #<NullPointerException java.lang.NullPointerException>
22:29 <    trptcolin > ring-devel uses https://github.com/weavejester/ns-tracker
22:29 <       mpenet > kind of wanted this to work, but I understand the mess that implies...
22:30 <         xeqi > TimMc: the issue was nested params will create a vector from q[]=. then hiccup renders out the vector as a node
22:32 <         xeqi > TimMc: q= would escape properly when used, but since q= and q[]= both assign :q ....
22:34 <    shep-home > trptcolin: Any idea if ring/ns-tracker has a way of manually adding to the dependency graph?
22:34 <    shep-home > (or if it can follow resources or other non-clj files)
22:35 <       mpenet > xeqi: I gave up on this, I just pass json in request bodies. It's hassle free at least
22:36 <    Anderkent > how do I fix the criterium/lein warning? (tiered compilation). Do I have to build a jar?
22:36 <       mpenet > ElasticSearch works like this too, it's not as ugly as it sounds
22:37 <    trptcolin > shep-home: adding source dirs is easy, but heavier stuff will require some grossness (re-def'ing, alter-var-root, etc)
22:39 <    shep-home > trptcolin: so, the file in question isn't a clj file, so a source dir doesn't make sense (I think...)
22:40 <    shep-home > can you shed some more light on the grossness you describe?
22:40 <        TimMc > xeqi: Oh! Lovely, yes. So people could basically specify a hiccup tree in the request?
22:41  *       TimMc never did trust that kind of param tomfoolery
22:44 <         xeqi > TimMc: basically yeah
22:45 <    AeroNotix > can I put auth in the base project.clj file?
22:46 <    AeroNotix > it's for an internal work project.
22:46 <    AeroNotix > There's no reason i
22:46 <    AeroNotix > it needs to use the ~/.lein/profiles.clj file
22:46 <    trptcolin > shep-home: you can always do things like alter-var-root or `(in-ns 'foo) (defn existing-fn [] new-implementation)`
22:46 <    trptcolin > but that's typically a last resort
22:47 <       mpenet > AeroNotix: https://github.com/weavejester/environ
22:47 <    AeroNotix > mpenet: no
22:47 <    AeroNotix > mpenet: for LEIN
22:47 <    AeroNotix > nevermind, found it
22:48 <         clgv > yay auth data in a version control system yippie!
22:49 <    AeroNotix > clgv: it's an internal project for people who are too fucking lazy to create accounts on our archiva server. What do you want me to do?
22:49 <    AeroNotix > it's authentication for *building* the application, not anything else.
22:49 <    AeroNotix > Take it elsewhere, I know it's fucking dumb but I work with fucking dumn.
22:49 <    AeroNotix > so that's how it has to be
22:49 <         clgv > config file consisting of a simple clojure map ^^
22:49 <    AeroNotix > clgv: but still, it's outside of vcs. So people can't just clone and have it owrk
22:49 <    AeroNotix > work
22:50 <         clgv > they can copy it from a protected shared folder
22:50 <    AeroNotix > clgv: > lazy people
22:50 <    AeroNotix > how can I make this clearer
22:50 <    AeroNotix > I'm introducing clojure at work -- anything which is a manual step makes them squirm
22:50 <         clgv > they are developers as well?
22:50 <    AeroNotix > They are
22:51 <    AeroNotix > clgv: please don't be so obtuse -- you know these kind of people exist.
22:52 <    Anderkent > AeroNotix: can you just disable auth on the server then? Same result :P
22:52 <         clgv > AeroNotix: do they have their maven credentials in the vcs as well? (I am guessing you use java)
22:52 <    AeroNotix > Anderkent: no, it's no the same result.
22:52 <    AeroNotix > clgv: we're Erlang otherwise
22:52 <    AeroNotix > Anderkent: definitely not the same result.
22:53 <    Anderkent > hm, how is it different?
22:53 <    AeroNotix > Anderkent: the repo is private
22:54 <    Anderkent > hm, so there's people who could access the build system but not the repository?
22:54 <    AeroNotix > Anderkent: they need to access project dependencies.
22:54 <    AeroNotix > project dependencies are on our private archiva server, hence needing the auth
22:54 <    AeroNotix > the project itself is on a private github repo
22:56 <    Anderkent > hm, I guess that's actually fair enough
22:56 <    AeroNotix > thanks
22:58 <         jph- > im rather confused about what "swagger" is meant for. Is it like liberator for publishing a rest api?
23:00 <    Anderkent > swagger's a spec for describing REST apis in a language-agnostic way, so that other things can for example automatically generate a wrapper for your api
23:00 <    Anderkent > i think
23:03 <          cbp > what a terrible name
23:13 < justin_smith > clgv: I have a project in progress that puts a clojure map into an aes128 encrypted file, idea being that you would have an authentication file for developers of a given organization, that isn't in any repo, and the specific creds for a project can be encrypted and in the repo (ideally it would also be a private repo for good measure)
23:14 < justin_smith > https://github.com/noisesmith/cryptlj
23:14 <         clgv > justin_smith: AeroNotix could be interested ^^
23:14 < justin_smith > ahh, oops, yeah, AeroNotix you may find that lib useful
23:15 <    AeroNotix > That readme is not entirely helpful
23:15 <    AeroNotix > What exactly do I have to do?
23:15 < justin_smith > https://github.com/noisesmith/cryptlj/blob/master/test/cryptlj/disk_test.clj
23:15 <    AeroNotix > ok so it encrypts files?
23:16 <    AeroNotix > How does this tie into me wanting to use passwords in a project.clj
23:16 < justin_smith > it has functions to encrypt / decrypt edn
23:16 <    AeroNotix > The passwords are for *repositories*
23:16 < justin_smith > so if you have native clojure data that shouldn't be plaintext in your repo, it simplifies keeping things secure without making deployment / running too convoluted
23:16 <    AeroNotix > not for anything which is used at runtime
23:16 <    AeroNotix > but this looks like it's for application code
23:17 <    AeroNotix > or use at runtime
23:17 <    AeroNotix > and stuff needs to be already on the person's box to decrypt
23:17 < justin_smith > you can call it from inside project.clj if you include it as a project plugin
23:17 <     oinksoft > the page for -?> shows examples for -?>>: http://clojuredocs.org/clojure_contrib/clojure.contrib.core/-_q%3E
23:17 < justin_smith > using `unquoting
23:18 <    AeroNotix > I just needed a way to have archiva repos accessible the moment you clone a project
23:18 <     oinksoft > is -?> available in 1.3.0? how do i use it? i am not able to use clojure.contrib.core as shown in the examples for -?>>
23:18 <    AeroNotix > justin_smith: it still needs the decrypt keys
23:18 < justin_smith > yes, but those can be elsewhere
23:18 <    Anderkent > you could in theory use that to encrypt the credentials in your project file then decrypt with password-encrypted key, so your dev only needs to know the project password. but feels unnecessary
23:18 <  technomancy > AeroNotix: have you tried putting the creds in the URL? https://user@pass:server.net/whatevs
23:18 <     oinksoft > (i understand how to use -?> and -?>>, but it's an undefined symbol)
23:19 <    AeroNotix > technomancy: what's the difference here?
23:19 <  technomancy > AeroNotix: it's just all in one place that way
23:19 <    Anderkent > oinksoft: 1.3 is pretty old. Also clojure.contrib is no more
23:19 <  technomancy > I am just curious if that would even work; I don't know
23:19 <    AeroNotix > technomancy: probably would
23:19 < justin_smith > Anderkent: AeroNotix: use case: client wants to access source for the project you made for them, but you also need access to company (not client) specific keys
23:19 < justin_smith > (in order to deploy for example)
23:20 <    AeroNotix > justin_smith: so that doesn't help me here
23:20 <     oinksoft > Anderkent: ok, i was studying a book that contains a project.clj specifying 1.3.0
23:20 < justin_smith > AeroNotix: OK
23:20 <          cbp > oinksoft: that macro is called some-> now
23:20 <     oinksoft > Anderkent: but the docs show -?> being available for 1.2.0 and i believe that if this can work, i should be able to get it to
23:21 <    AeroNotix > oh man, some->!
23:21 <    AeroNotix > Nice
23:21 < justin_smith > AeroNotix: in general it should be useful if not every user of the repo should have access to all credentials used in the repo, but if that isn't your situation then it probably wouldn't be useful for you
23:21 <     oinksoft > is there something like hoogle for clojure, because i can't find some->
23:22 <          cbp > (doc some->)
23:22 <   clojurebot > "([expr & forms]); When expr is not nil, threads it into the first form (via ->), and when that result is not nil, through the next etc"
23:22 <          cbp > oinksoft: http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/some->
23:22 <    Anderkent > ,(meta #'some->)
23:22 <   clojurebot > {:macro true, :ns #<Namespace clojure.core>, :name some->, :arglists ([expr & forms]), :column 1, ...}
23:22 <          cbp > Sadly no, docs are pretty terrible in clojure
23:23 <     hiredman > oinksoft: -?> was never in clojure proper, they were in the contrib library
23:23 <    Anderkent > hm, doesn't print :added, but it's there! (1.5)
23:23 <     oinksoft > hiredman: ok, keep in mind i am totally new to clojure so i see a page like the one i linked and think it is in clojure
23:23 <     oinksoft > hiredman: (http://clojuredocs.org/clojure_contrib/clojure.contrib.core/-_q%3E)
23:23 <     oinksoft > cbp: thanks
23:23 <    Anderkent > yeah clojuredocs is kinda bad about this
23:23 <     hiredman > oinksoft: contrib is sort of the tip off there
23:24 <     hiredman > (in the url)
23:24 <     oinksoft > ok, so clojuredocs is not affiliated w/ clojure project
23:24 <     oinksoft > good to know ;)
23:24 <    Anderkent > hiredman: only if you know about clojure.contrib being gone
23:24 <    Anderkent > oinksoft: yeah. but the search on clojure.org sucks. So there's that ;S
23:24 <     oinksoft > hehe
23:24 <          cbp > ughhhh
23:24 <     hiredman > Anderkent: even when it wasn't "gone" it was a distinct library you had to use
23:24 <     oinksoft > ok, thanks a bunch. i like these -> operators :)
23:25 <     hiredman > Anderkent: the things in it weren't just available
23:25 <          cbp > So what would be required to fix the online docs? ..without hurting anyone's sensibilities
23:25 <    Anderkent > hiredman: I know, but that's hardly obvious for someone who just searches for a symbol in clojuredocs
23:26 <    Anderkent > though I guess clojuredocs covers many non-core libs?
23:26 <    Anderkent > dunno don't really use it
23:28 <     oinksoft > sorry, another documentation question. why do the clojure docs refer to 1.5 as the stable release, but the homepage refers to 1.6?
23:29 <          cbp > because like i said.. it's pretty terrible
23:29 <     oinksoft > ok :)
23:29 < justin_smith > "community-powered"
23:29 <  technomancy > the repl should be your ground truth
23:30 <  technomancy > usually you only fall back to the browser for things you can't find from your repl
23:30 <  technomancy > (this does not include docstrings)
23:30 < justin_smith > they still link to clojure-contrib
23:30 <        TimMc > When there is no spec, everything is within spec. :-)
23:31 <     oinksoft > technomancy: but the repl's only going to show me what i already know about
23:31 < justin_smith > oinksoft: clojure.repl/apropos helps there
23:31 <       zenoli > Is there a straightforward way to wrap a binary file into a Lamina channel? These conversions are giving me fits.
23:31 <     oinksoft > technomancy: i am looking at the clojure source repository, is there a way to build some structured html docs, like with erlang and most langs?
23:31 < justin_smith > oinksoft: also clojure.repl/source
23:31 < justin_smith > (in the source code for functions you know, you will see calls to ones you don't)
23:31 <  technomancy > oinksoft: sure, but typically it doesn't make a lot of sense
23:32 <  technomancy > apropos, source, and doc are a lot more useful
23:32 < justin_smith > the cheat sheet is imperfect, but still helpful http://clojure.org/cheatsheet
23:32 <  technomancy > erlang needs html docs because its repl is terrible
23:32 < justin_smith > exactly
23:32 < justin_smith > yeah, the repl unlocks everything
23:33 <     oinksoft > i suppose that is one way to solve a problem!
23:33 <     oinksoft > thanks again
23:33 <       mpenet > the giant root namespace thing doesn't help either
23:33 <    AeroNotix > technomancy: s/needs html docs/a complete rewrite/g s/it's repl//
23:34 <     oinksoft > AeroNotix: are you kidding me, you were all up on erlang literally 12mos ago
23:34 <    AeroNotix > oinksoft: who are you
23:34 <     oinksoft > AeroNotix: PigDude
23:34 <    AeroNotix > yeah well
23:34 <    AeroNotix > I have a job in erlang now, and I realise that people are just lying to themselves.
23:34 <    AeroNotix > daily.
23:34 <     oinksoft > hahaha
23:34 <     oinksoft > there's some truth to that
23:35 <  technomancy > AeroNotix: well if you're going to rewrite erlang things, the repl would be the place to start
23:35 <     oinksoft > AeroNotix: i'm learning clj for a job :p but i quite like it so far
23:35  * technomancy shakes his fist at all interactive shell-like systems that don't honor control-d
23:35 <    AeroNotix > Erlang solves very few problems it claims to, the tooling is totally dog shit, the language is completely hamstrung in arbitrary ways, Ericsson are the worse company to be in charge of a language. Shall I continue?
23:35 <    AeroNotix > Don't even get me started on projects like riak
23:35 <  technomancy > AeroNotix: at least OTP accepts pull requests =)
23:36 <     oinksoft > technomancy: to be fair erlang shell will never lock you out because of its design. i've been able to lock up a clojure shell and have to kill it
23:36 <    AeroNotix > technomancy: sure, after they deem it could be valuable to Ericsson's internal projects
23:36 <    AeroNotix > if not, fuck you
23:36 <  technomancy > oinksoft: you can always connect from another client and kill off the misbehaving one
23:36 <    AeroNotix > the language is just crap -- records? Maps? C'mon. It's 2014.
23:36 <  technomancy > assuming you're using nrepl
23:36 <     oinksoft > my high level language is better than your high level language
23:36 <     oinksoft > or something
23:37 <  technomancy > AeroNotix: I got a patch to erlang.el applied pretty quickly; never would have happened with clojure.
23:37 <    AeroNotix > oinksoft: for reals
23:37 <     oinksoft > mostly the same but i see a few things i like in clojuree
23:37 <    AeroNotix > technomancy: that's the erlang.el stuff- there's like 2 people who are capable of properly looking after that code. So they just let anything in.
23:38 <    AeroNotix > oinksoft: I just did a project in Clojure amidst all our Erlang stuff. Literally. The. Best. Thing. Ever.
23:38 <    AeroNotix > no rebar, for 1
23:38 <     oinksoft > lein blows rebar out of the water i think
23:38 <    AeroNotix > dependency management that actually works. Good community, lively libraries, expressive language
23:38 <    AeroNotix > oinksoft: rebar is a cruel joke
23:38 <    AeroNotix > and people put up with it!
23:38 <    AeroNotix > It's actually *worse* than when we just used Makefiles for everything
23:38 <    AeroNotix > seriously
23:38 <     oinksoft > AeroNotix: customer doesn't care what tool you use to build your code
23:39 <    AeroNotix > oinksoft: I don't see how that's relevant.
23:39 <    AeroNotix > It's my sanity
23:39 <  technomancy > I wasted half an hour while interviewing a job applicant over a rebar bug
23:39 <  technomancy > it matters
23:39 <     oinksoft > technomancy: how did that happen?
23:39 <    AeroNotix > technomancy: that's not the client, though.
23:40 <       yotsov > AeroNotix: I am curious if you would happen to have some "internal" opinion on Dialyzer
23:40 <  technomancy > oinksoft: we have three rebar.config files; one for prod, one for test, and one for dev
23:40 <    AeroNotix > Probably rebar half-downloading things and then telling you "OH YEAH DUDE THE DEPS ARE HERE"
23:40 <    AeroNotix > yotsov: not worth the time, misses trivial cases, slow, touted as the jesus device
23:40 <    AeroNotix > does not deliver
23:40 <       yotsov > AeroNotix: thanks!
23:40 <    AeroNotix > it's fine for tiny errors, but it's so slow you'd be better off just using unit testing
23:41 <       yotsov > I see... only ran it on very small projects
23:41 <     oinksoft > some people are never satisfied :p dialyzer may not hit everything but it is a lot better than, say, pylint
23:41 <  technomancy > oinksoft: you have to manually specify which one you're going to use, but if you try to compile in the wrong order it'll just leave out your test-only deps entirely
23:41 <    AeroNotix > yotsov: we have a project with 30+ dependencies. It does not scale.
23:41 <     oinksoft > it has found plenty of bugs in my projects and saved me time, i like dialyzer
23:41 <    AeroNotix > oinksoft: then you're not testing properly.
23:41 <  technomancy > oinksoft: and then when you do ct_run, you don't get a stack trace to stdout, you have to go digging through like three levels of html files to find the actual problem
23:41 <     oinksoft > AeroNotix: OK!
23:41 <    AeroNotix > if you rely on dialyzer to find the kinds of bugs it *does* find, then I weep for your test suite
23:42 <     oinksoft > AeroNotix: i know i'm on irc, but you probably should think about how important "properly" is. not being aware of it, but making it the ultimate goal
23:42 <  technomancy > dialyzer won't even run on our codebase; it sends it into an infinite loop
23:42 <     oinksoft > AeroNotix: as a recovering pedant it is a tough pill to swallow
23:42 <     oinksoft > AeroNotix: (me)
23:43 <    AeroNotix > oinksoft: pedantry is good for software
23:43 <    AeroNotix > technomancy: it is slow
23:43 <    AeroNotix > technomancy: perhaps it's just  taking a while
23:43 <  technomancy > AeroNotix: over night =)
23:43 <    AeroNotix > technomancy: how big is your codebase?
23:43 <  technomancy > I'm a fan of static analysis though; supposedly the dializer bug is fixed in 17.0, so I'll be interested in seeing what it comes up with
23:44 <  technomancy > AeroNotix: 6kloc
23:44 <    AeroNotix > technomancy: the best part is, what you mostly end up doing is putting specs on things where dialyzer got confused.
23:44 <      TravisD > infinity hours and 24 hours are pretty much the same
23:44 <    AeroNotix > So you don't change your code -- you change your specs. Dialyzer is a waste of time.
23:44 <  technomancy > AeroNotix: it was confirmed as a bug by kostis
23:44 <    AeroNotix > technomancy: perhaps
23:45 <    AeroNotix > I'm just saying something else entirely, just drop dialyzer and use the time on making your test suites better / higher coverage
23:45 <    AeroNotix > The only tool I think Erlang has which is better than in Clojure is the cover tool
23:45 <    AeroNotix > very good, outputs in all manner of formats and you can *merge* reports together
23:45 <    AeroNotix > so different test suites can be put together
23:46 <  technomancy > well that and hot upgrades
23:46 <    AeroNotix > Meh
23:46 <    AeroNotix > no-one uses hotupgrades unless they're fapping
23:46 <  technomancy > uuuuh
23:46 <    AeroNotix > Use an LB and take nodes offline
23:46 <     oinksoft > AeroNotix: you might be wasting brain cycles comparing the merits of clojure and erlang and their tooling this way
23:46 <  technomancy > it matters a lot for our cluster
23:46 <    AeroNotix > technomancy: explain
23:46 <     oinksoft > AeroNotix: considering very few projects start with "do we choose clojure or erlang? hm?"
23:46 <    AeroNotix > oinksoft: but they easily could
23:47 <  technomancy > AeroNotix: a full cluster replacement takes like three hours, and a live upgrade takes three minutes
23:47 <     oinksoft > AeroNotix: they'd be wasting their time
23:47 <    AeroNotix > oinksoft: why?
23:47 <    AeroNotix > technomancy: what makes that so?
23:47 <     oinksoft > AeroNotix: it should be an obvious decision, one made by other forces, not pure technical merit as judged by one person
23:47 <     oinksoft > AeroNotix: it's a big bikeshed
23:47 <    AeroNotix > oinksoft: do you think software is like that?
23:47 <    AeroNotix > if so; can I come work for you?
23:47 <     oinksoft > AeroNotix: the biggest bikeshed, and the biggest secret in software development right now
23:47 <    AeroNotix > because that's definitely not software
23:48 <  technomancy > AeroNotix: nodes have to sync several GB of data at boot, so we have to space out their launches so they don't bring down the DB with a thundering herd.
23:48 <  technomancy >  
23:48 <    AeroNotix > technomancy: load from caches? (Easy for me to say since I don't see your full architecture, but still)
23:48 <  technomancy > not really an option here, yeah
23:48 <     oinksoft > AeroNotix: you know up front if your project needs the high level features provided by clojure, or the safety provided by erlang. they're so freaking different, don't get caught up on the immutable thing
23:49 <     oinksoft > AeroNotix: if that doesn't decide for you, your talent and the talent in the local market does
23:49 <    AeroNotix > oinksoft: erlang "safety"
23:49 <    AeroNotix > Supervision trees. OK
23:49 <     oinksoft > AeroNotix: if not that, then your comfort supporting the JVM or doing erlang releases decides it for you
23:49 <     oinksoft > AeroNotix: erlang is slow because it's so safe ...
23:50 <    AeroNotix > I've rarely seen any technical decision made in such a way
23:50 <     oinksoft > i bet you've seen a lot of money wasted!
23:50 <    AeroNotix > I'd love for it to be so
23:50 <     oinksoft > i know i have
23:50 <       yotsov > I guess hotupgrade can be a nice feature... thinking of rabbitmq clusters for example
23:50 <    AeroNotix > For req/resp type deals? Meh
23:52 <    Anderkent > uh, I doubt you can actually hot upgrade rabbitmq. Or at least I wouldn't try it
23:52 <    Anderkent > (and I worked for 3 years at the company that wrote it)
23:52 <     oinksoft > relups are sort of a tarpit
23:52 <    Anderkent > (though I didn't work on it directly, so if you have just ignore me :P)
23:52 <       yotsov > Anderkent: last time we tried, 1 year ago or so, it didnt work
23:53 <       yotsov > Anderkent: but I believe it is a planned feature, maybe it is doable now
23:53 <    Anderkent > possibly, I haven't kept in touch since we sold it to vmware
23:54 <    Anderkent > AeroNotix: regarding the coverage reports merging, I'd love to add this to cloverage, and it will eventually get there, but I don't have much time to work on it recently
23:54 <    Anderkent > ugh, grammar
23:54 <    AeroNotix > Anderkent: for sure, it wasn't a dig at you
23:55 <    AeroNotix > Was just trying to emphasise how shitty the tools are in erlang that a lowly coverage tool seems to shine.
23:55 <    Anderkent > I really want to make cloverage run arbitrary lein tasks rather than clojure.test. And isolate the dependencies. etc. etc
23:56 <    AeroNotix > Anderkent: that'd be crazy good
23:56 <    AeroNotix > I want to start say `lein run` and then run my integration tests and then have it dump out a coverage report
23:56 <    AeroNotix > this is what we do with Erlang at the moment
23:57 <    AeroNotix > we start a release in coverage mode and then run some test suite against its API and then merge the report with the CT Test report.
23:57 <    AeroNotix > works very well.
23:58 <  technomancy > higher-order tasks; woot
23:59 <  gfredericks > I'm thinking test.check should not shrink characters
--- Day changed Fri Mar 28 2014
00:00 <  gfredericks > and that this might be a big deal for performance
00:01 <        TimMc > :-D
00:02 <        TimMc > gfredericks: It should shrink them by glyph area.
00:02 <        TimMc > e.g. dotted i becomes dotless i
00:03 <  gfredericks > patches welcome
00:03 <    Anderkent > ygh github doesnt change your notification email when you change your primary email. Wat.
00:04 <    AeroNotix > Anderkent: eventual consistency
00:04 <    AeroNotix > it probably will. Eventually. Maybe.
00:05 <    Anderkent > nah, I did it like a year ago and wasn't getting notifications, and only now went to notification center and noticed htat my old email was still there
00:06 <    AeroNotix > lolz
00:06 <        TimMc > Anderkent: "ygh"?
00:06 <    Anderkent > its like ugh but misspoken!
00:06 <        TimMc > Oh! I figured it was an abbreviation.
00:11 <    Anderkent > So, if I only have the time to watch 2-3 more talks, which clojure/west are most interesting? Watched the instaparse, with-security and predictably fast so far, all pretty cool
00:12 <  upwardindex > What is the solution to “Possibly confusing dependencies found”? A ton of :exclusions ?
00:18 <    Anderkent > kinda depends on what kind of confusing dependency it is. Sometimes you can just ignore it
00:19 <  upwardindex > Anderkent: any rule of thumb on whether or not you can ignore it?
00:21 <    Anderkent > well, if you use the dependency directly you definitely want to look into it, if there's version ranges involved you probably want to look into it, otherwise if things seem to work I wouldn't bother? I dunno I think that warning is kinda noisy
00:22 <  upwardindex > For example midje 1.6.3 uses two different versions of joda-time, is that a problem?
00:23 <  technomancy > upwardindex: depends how divergent the versions are
00:40 <          aka > is there a convention for putting a * (single earmuff) on the right side of a var name?
00:40 <          aka > it's actually a function
00:40 <          aka > create-handler*
00:40 <          aka > should that tell me something?
00:40 < michaniskin1 > aka: it's usually used when you're making a modified version of a function that already exsits
00:40 < michaniskin1 > aka: it's like x and x' in math
00:41 <          aka > good to know
00:41 <          aka > thanks :)
00:42 <    Anderkent > michaniskin1: aka: I usually see it when you have a macro and a function that implements the macro: (defmacro foobar [& body] (foobar* body))
00:45 < michaniskin1 > aka: for example: https://github.com/cemerick/pomegranate/blob/master/src/main/clojure/cemerick/pomegranate/aether.clj#L619 and https://github.com/cemerick/pomegranate/blob/master/src/main/clojure/cemerick/pomegranate/aether.clj#L723
00:45 <   SegFaultAX > Yea. Usually the * version is some sort of base version, and the unstarred is a macro or helper function.
00:45 <          aka > ahhh I see
00:46 <    Anderkent > yeah, think of the * as 'peeking under the hood'
00:46 <   SegFaultAX > Or https://github.com/korma/Korma/blob/master/src/korma/core.clj#L39 and https://github.com/korma/Korma/blob/master/src/korma/core.clj#L114
00:50 <  technomancy > basically means "I can't think of a better name for this function"
00:57 <         jjl` > that's one of the most common problems i have in clojure. it's inviting abstraction, but naming those abstractions can be hard
00:58 <          aka > not really
00:58 <   SegFaultAX > jjl`: thingy* other-thingy etc. are perfectly understandable.
00:58 <          aka > you just add a * at the end
00:58 <          aka > :D
00:59 <   SegFaultAX > AbstractThingyFactoryProviderBean
00:59 <  gfredericks > if you mix postfix ' and * you have an exponential naming space
01:00 <     rasmusto > s/exponential/exceptional
01:00 <         clgv > SegFaultAX: MethodValueDecoratorListenerPublisherPrinter
01:00 <    Anderkent > s/exceptional/ex'**''*'*
01:00 <          aka > we can be back to Java like madness in no time
01:01 <      TravisD > gfredericks: What do you mean by exponential naming space?
01:01 <      TravisD > exponential in the length of the names?
01:01 <  gfredericks > no, exponential options by length of name
01:01 <      TravisD > ah, that's what I meant
01:02 <      TravisD > The subset of names with a fixed length grows exponentially with the length
01:02 <martinklepsch > Is clutch the way to go for clj + couchdb?
01:02 <martinklepsch > https://github.com/clojure-clutch/clutch
01:02 < michaniskin1 > i like using the "prime" naming, personally
01:02 <  gfredericks > ,(-> (rand-int 1000000) (Long/toString 2) (->> (replace {\0 \' \1 \*}) (apply str "thingy")) symbol)
01:02 <   clojurebot > thingy**''''''****'''''
01:02 < michaniskin1 > do-foo, do-foo', do-foo''
01:03 <        malyn > I feel like this is a key problem in most (all?) programming languages; I want to create an abstraction and describe what it is, but I don't want to actually go so far as to give it a name.
01:03 <         clgv > martinklepsch: if there is a clojurewerkz project for couchdb that's probably the better options in terms of documentation
01:03 <  gfredericks > ,(defn function-name [] (-> (rand-int 1000000) (Long/toString 2) (->> (replace {\0 \' \1 \*}) (apply str "thingy")) symbol))
01:03 <   clojurebot > #'sandbox/function-name
01:03 <   SegFaultAX > gfredericks: No stupid, I told you the function was called thingy**''''''*''**''*
01:03 <  gfredericks > (function-name)
01:03 <        malyn > The -> thing is nice there, but then I can't describe what is happening without interspersing comments between each line. (which maybe is okay?)
01:03 <  gfredericks > ,(function-name)
01:03 <   clojurebot > thingy**'**'**''''*'''**'
01:03 <martinklepsch > clgv, cant find any
01:03 <  gfredericks > ,(function-name)
01:03 <   clojurebot > thingy**'*'''''''*'***'*''
01:03 <      llasram > do-foo, do-foo', do-foo′, do-foo″, do-foo‴
01:03 <   SegFaultAX > llasram: Haha, nice.
01:03 <   SegFaultAX > If only ` wasn't syntax quote
01:04 < michaniskin1 > llasram: that is actually pretty nice
01:04 <  gfredericks > malyn: I think comments are fine
01:04 <         clgv > martinklepsch: ah right they had one for mongodb not couchdb...
01:05 <        malyn > gfredericks: Agreed. Although then I feel compelled to make each part of -> fit on a single line. And if it doesn't I then want to go and defn the thing, which creates the whole naming problem again...
01:05 <martinklepsch > clgv, nevermind then, thanks!
01:06 <  gfredericks > ,(function-name)
01:06 <   clojurebot > thingy*''**''*'*''*''*''''
01:06 <  gfredericks > malyn: ^solves your naming problem
01:06 <        malyn > gfredericks: Yeah, thanks. :)
01:06 <  gfredericks > anytime
01:06 <  gfredericks > there are at least a few more where that came from
01:07 <    Anderkent > I'm partial to using non-breaking whitespace as the suffix myself
01:07 <  technomancy > heh
01:07 <  technomancy > I actually filed a bug over that
01:07 <     rasmusto > ,(let [foo' 'inc] (eval `(~foo' 1)))
01:07 <   clojurebot > 2
01:07 <      TravisD > What's an example of a non-breaking white space?
01:07 <    Anderkent > I actually got bit by that because I copy-pasted stuff from github :P
01:08 <    Anderkent > and my editor wasn't showing the difference by default
01:08 <     rasmusto > i wish I knew what I was doing
01:08 <         clgv > rasmusto: incrementing 1, no`
01:08 <    Anderkent > TravisD: U+00A0
01:08 <  gfredericks > incrementers gonna increment
01:09 <      TravisD > Anderkent: Ah, I was hoping you'd just paste it :(
01:09 <     rasmusto > ~inc
01:09 <   clojurebot > I don't understand.
01:09 <  technomancy > http://dev.clojure.org/jira/browse/CLJ-419
01:09 <      TravisD > Here it is: " "
01:10 <     rasmusto > (= , ~)?
01:10 <         clgv > ,(long " ")
01:10 <   clojurebot > #<ClassCastException java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Number>
01:11 <         clgv > ,(long (first " "))
01:11 <   clojurebot > 32
01:11 <      TravisD > :P
01:11 <      TravisD > I LIED
01:11 <         clgv > :P
01:12 <    Anderkent > ,(long (first " "))
01:12 <   clojurebot > 160
01:13 < justin_smith > Anderkent: I like how my emacs gives that a bright blue underline
01:13 <      TravisD > ,(let [test  10, test 5] [test  test])
01:13 <   clojurebot > [5 5]
01:14 <      TravisD > hmm
01:14 < justin_smith > ,' _-_ _-_ _-_ _-_ _-_ _-_ _-_ _-_ 
01:14 <   clojurebot > �_-_�_-_�_-_�_-_�_-_�_-_�_-_�_-_�
01:14 <         clgv > that's hopefully not suprising to you ;)
01:14 <    Anderkent > ,(let [foo 1 foo  2] [foo foo ])
01:14 <   clojurebot > [1 2]
01:14 <         clgv > ah lol
01:14 <      TravisD > oh, I copied Anderkent's space character, but my IRC client must not like it
01:14 <    Anderkent > it's option-space if you're on a mac
01:14 <    Anderkent > makes it easy!
01:15 <  gfredericks >  non-breaking spaces for the busy coder
01:15 <      TravisD > Ah, my client just does nothing when I type option-space :(
01:15 <      TravisD > if I'm ever at risk of losing a job I'll be sure to litter some of those in the code :)
01:15 <  technomancy > throw in some page break characters too
01:15 <  technomancy > those are great
01:15 <    Anderkent > I'd reverse the casualty there
01:16 < justin_smith > &' _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_
01:16 <      lazybot > ⇒  _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_
01:16 <     sdegutis > I've concluded that I actually want mocks right now. It's feeling very strange to test helper functions that should otherwise be private. I'd like to test the things they're used in, but they're only used to build up a call to another function with very specific args. Or perhaps I've just designed my whole program badly.
01:16 <      TravisD > Anderkent: heh, yeah, that's probably the more likely scenario
01:16 <  technomancy > I should open a bug report on github for the fact that they don't render page breaks
01:16 <  technomancy > it's pretty lame
01:17 <    Anderkent > sdegutis: you can test private functions though?
01:17 <     sdegutis > For example, this function is tested weirdly: https://github.com/sdegutis/billow/blob/master/test/billow/service_test.clj#L13-L22
01:17 < justin_smith > &' _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_ _-'-_
01:17 <      lazybot > ⇒  _-'-_
01:17 < justin_smith > ahh, it appears page break is whitespace
01:17 <     sdegutis > Anderkent: Yes but that's just covering the problem up. I shouldn't be touching that function. I should let it be free to evolve how it wishes.
01:17 <     rasmusto > justin_smith: is this L-systems again?
01:17 < justin_smith > hah, it should be
01:17 < michaniskin1 > how do you guys deal with git conflicts and paredit mode?
01:17 <     sdegutis > I think I want to create a fake service that actually produces real side-effects that mimic the real service..
01:17 < michaniskin1 > ^ in emacs btw
01:17 <     rasmusto > michaniskin1: evil-mode
01:18 <     sdegutis > Which sounds terrifying, but like it's The Right Thing To Do™.
01:18 < justin_smith > michaniskin1: C-w always deletes
01:18 <     rasmusto > michaniskin1: yeah, x in evil-mode does something similar, use C-w
01:18 <    Anderkent > sdegutis: I don't think I follow, if you only care that it prepares the args to a different function right, why not just intercept the call to tht function and make sure the args are right?
01:19 < michaniskin1 > thanks, but i was wondering if there was something more structural, like somehow preserving the paredit stuff while resolving the conflicts
01:19 <    Anderkent > midje makes it easy with (provided (function "excpected" "args) => :result), though I'm not sure about side effects, these are a bit messier to add
01:19 <     sdegutis > Anderkent: That's still testing private implementation details which doesn't give the implementation any room to evolve.
01:19 < justin_smith > michaniskin1: like some kind of magit / ediff / paredit hybrid?
01:19 <    lemonodor > i’ve decided that the midje syntax tricks around => cause more trouble than they’re worth.
01:20 <     sdegutis > We had a /lot/ of trouble with this in production code last year, took a while to change it so we only test side-effects.
01:20 < michaniskin1 > justin_smith: is that a thing?
01:20 <     sdegutis > lemonodor: how so?
01:20 < justin_smith > michaniskin1: no, just thinking that this is what you are asking for
01:20 <  technomancy > lemonodor: agreed
01:20 < justin_smith > though ediff-merge may give you an interactive resolution rather than leaving conflict marks in the file iirc
01:21 < justin_smith > or magit-merge I mean, or something like that
01:21 <    Anderkent > well yeah I kinda dislike fact and =>, but like the mocking mechanism. Is there something else that makes top-down testing easy?
01:21 <    lemonodor > sdegutis: harder to read, can screw up editor indentation.  maybe responsible for the somewhat non-specific line numbers i see in stack traces?
01:21 < justin_smith > michaniskin1: https://coderwall.com/p/mcrwag
01:22 <     sdegutis > lemonodor: ah makes sense
01:22 <    lemonodor > https://github.com/marick/Midje/issues/235 btw
01:22 <  technomancy > lemonodor: many of us feel that way about most of midje fwiw =)
01:23 < justin_smith > (inc technomancy)
01:23 <      lazybot > ⇒ 102
01:23 <    Anderkent > I also dislike how you can't reuse facts
01:23 <     sdegutis > Ah good old backwards-incompatibility, the bane of those who've coded while drunk.
01:23 <  technomancy > "This is clever and novel." <- not intended as a compliment
01:23 < justin_smith > Anderkent: reminds me of that one Talking Heads song "facts never do what they're supposed to do"
01:24 <     sdegutis > Cleverness and novelty have bit me so often and so hard that I refuse to hear them out anymore.
01:24 <     sdegutis > Sometimes they manage to successfully sneak in, but that's another story.
01:25 <     sdegutis > Time to write some SFTP based code.
01:26 < michaniskin1 > justin_smith: awesome i think that's maybe what i'm looking for
01:26 <    lemonodor > i seem to remember a remarkable amount of code in midje dedicated to making that clever parsing possible, too, which isn’t a good sign.
01:28 <    Anderkent > yeah I once tried to read through that code, but gave up very quickly
01:30 <       jjttjj > anyone ever play with opencv from clojure? I'm dieing trying to get this to work https://gist.github.com/nblumoe/5468625
01:31 <    lemonodor > jjttjj: i haven’t but there’s https://github.com/gigasquid/clj-drone#opencv-face-recognition
01:31 <       jjttjj > I have all the opencv stuff setup correctly and can make calls to it's libs but .detectMultiScale is just no returning anything
01:31 <       jjttjj > lemonodor: awesome thanks
01:32 <      aaelony > jjttjj: This works pretty well: http://docs.opencv.org/2.4/doc/tutorials/introduction/clojure_dev_intro/clojure_dev_intro.html
01:32 <     jared314 > does anyone know if test.check going to support clj pre-1.4 (1.2.1 or 1.3)?
01:33 <       jjttjj > aaelony: yeah i have that one working it's when i try to translate the face recognition tut from java wheen i run into problems
01:34 <         clgv > jared314: if you are on 1.3 where is the problem to use 1.4 or even 1.5? I thought only the 1.3 upgrade was often hard work
01:34 <      aaelony > jjttjj: makes sense, be interested to learn what you discover.
01:35 <     jared314 > clgv: writing tests for another project that is trying to support 1.2.1 to 1.6
01:35 <     jared314 > clgv: so, not my choice to upgrade
01:36 <  gfredericks > jared314: do you know what exactly is incompatible with the older versions?
01:46 <      amalloy > jared314: after a quick scan, i don't see anything in the source that requires any clojure version newer than 1.2
01:46 <     jared314 > gfredericks: it gave me an error about ex-info in the generative ns
01:47 <  gfredericks > ah that'll do it
01:48 <  gfredericks > does somebody have a lib somewhere for monkey-patching ex-info stuff onto older clojures?
01:48 <  gfredericks > is that a terrible idea?
01:50 <      llasram > Is that a terrible idea??
01:50 <      lazybot > llasram: Uh, no. Why would you even ask?
01:50 <      llasram > gfredericks: See, it's fine.  Just needed more question marks.
01:50 <  technomancy > gfredericks: slingshot kind of gets you ex-info ish stuff in 1.2
01:51 <  gfredericks > technomancy: they don't put it in clojure.core though amirite?
01:51 <  technomancy > heavens no
01:52 <  gfredericks > so this doesn't help with tricking a lib into running on older clojure
01:52 <      amalloy > gfredericks: it strikes me as a poorish idea: nothing bad will happen from adding those two extra functions, assuming you can do it, but trying to run code that expects clojure 1.4(?) on 1.2 instead will have more problems than just missing ex-info, and they might be hidden if you fix the obvious failures
01:53 <     jared314 > amalloy: is there already something to handle running a test suite in one version and the lib in another?
01:54 <     jared314 > amalloy: like lien does the inject thing
01:54 <      amalloy > sure, you can change your org.clojure/clojure dependency in the :test profile, but...
01:54 <  gfredericks > "poorish is a clojure library for monkey-patching ex-info &c onto older clojures."
01:55 <      amalloy > gfredericks: my consulting rate is $10 per excellent library name
01:56 <      amalloy > poorish is actually a fun little double-entendre there: you're trying to run on an impoverished runtime
01:57 <  gfredericks > heck you could add all sorts of addable features
01:57 <  gfredericks > and let the user pick which ones to patch
01:57 < justin_smith > a-la-carte upgrade
01:57 <     rasmusto > ~a-la-carte
01:57 <   clojurebot > excusez-moi
01:57 <  gfredericks > rejected names: what-could-go-wrong
01:58 <     jared314 > i-didn’t-say-it-was-a-good-idea
01:58 <      amalloy > gfredericks: i'd like to see you support parsing symbols like foo' but only in files chosen by project.clj
01:59 <  gfredericks > I bumped the clojur on codeq yesterday so it would parse :/
02:00 < justin_smith > ,:/
02:00 <   clojurebot > :/
02:00 < justin_smith > &:/
02:00 <      lazybot > java.lang.RuntimeException: Invalid token: :/
02:00 <  gfredericks > amalloy: a double patch -- one on a clojure function for doing reading or something, and another selectively done in the first to change the regexes
02:00 <     rasmusto > ,::/
02:00 <   clojurebot > #<RuntimeException java.lang.RuntimeException: Invalid token: ::/>
02:00 <  gfredericks > ,'&:/
02:00 <   clojurebot > #<RuntimeException java.lang.RuntimeException: Invalid token: &:/>
02:01 < justin_smith > grumpy man refuses to wear a bow, but will wear a feather
02:01 <      amalloy > ,*clojure-version*
02:01 <   clojurebot > {:interim true, :major 1, :minor 6, :incremental 0, :qualifier "master"}
02:01 <     rasmusto > ,(prn ::/)
02:01 <   clojurebot > #<RuntimeException java.lang.RuntimeException: Invalid token: ::/>
02:02 <      amalloy > i wonder why :/ is valid now. i know they changed symbol parsing, but i didn't expect it to apply to keywords
02:02 <  gfredericks > doesn't the keyword parser delegate to the symbol parser?
02:02 <  gfredericks > although that still doesn't explain it
02:02 <  gfredericks > if that were the case you'd expect :/ to have always been valid
02:03 <  gfredericks > I retract all my theories and retreat in shame
02:03 <     rasmusto > and whats up with the namespace-qualified one not working?
02:03 <     rasmusto > ,:foo// ; ?
02:03 <   clojurebot > :foo//
02:03 <     rasmusto > ,::/ ; ?
02:03 <   clojurebot > #<RuntimeException java.lang.RuntimeException: Invalid token: ::/>
02:04 < justin_smith > ,:sandbox//
02:04 <   clojurebot > :sandbox//
02:04 < justin_smith > AHA
02:04 < justin_smith > or not
02:04 <     rasmusto > *ns*
02:04 <     rasmusto > ,*ns*
02:04 <   clojurebot > #<Namespace sandbox>
02:05 <  gfredericks > they never sent an email on clojure-dev about 1.6.0 did they?
02:08 <          cbp > Is it safe to assume the user will always see the info map of an ex-info? or should I include the data in the exception string too?
02:08 <  gfredericks > definitely not safe to assume that
02:08 <  gfredericks > lots of tools just print .getMessage
02:08 <      llasram > cbp: I personally use the string for humans and the map for programs.  Sometimes that means duplicating between them
02:08 <          cbp > hmph
02:08 <          cbp > ok thanks
02:09 <  gfredericks > would be cool to use strint to be able to interpolate values from the map into the message
02:09 <  gfredericks > e.g. (ex-info*'''* "You passed me {thing}" {:thing x})
02:10 <      amalloy > gfredericks: that'll be in clojure 1.9. why not include it in your backporting library?
02:11 <  gfredericks > incubating is just a generalization of backportation
02:11 <  gfredericks > or a special case of?
02:12 <    tgoossens > What is a clean way to get all values out of an indexable list at odd indices ?
02:13 < justin_smith > ,(map second (partition 2 (range 10))) ; tgoossens
02:13 <   clojurebot > (1 3 5 7 9)
02:13 <    tgoossens > justin_smith, thanks
02:14 < justin_smith > with partition-all you would get a nil at the end if there were an odd number of items in the list
02:14 <    tgoossens > hmm
02:14 < justin_smith > so it depends on your problem whether you want that behavior or the partition behavior
02:15 <    tgoossens > it will do :)
02:15 <    tgoossens > (your solution )
02:15 < justin_smith > ,(map second (partition-all 2 (range 9)))
02:15 <   clojurebot > (1 3 5 7 nil)
02:15 < justin_smith > ,(map second (partition 2 (range 9)))
02:15 <   clojurebot > (1 3 5 7)
02:15 <    tgoossens > i see
02:16 <    tgoossens > thanks for pointing that out :)
02:16 < justin_smith > np
02:16 <    tgoossens > wow it has been a long time I've been able to use such pleasant abstract functions
02:16 <    tgoossens > currently working with fortran :p
02:17 <    tgoossens > clojure is always a pleasure again
02:17 <      amalloy > justin_smith: uh, don't you just want (range 1 10 2)?
02:18 <      amalloy > ,(range 1 10 2)
02:18 <      amalloy > &(range 1 2 10)
02:18 <      lazybot > ⇒ (1)
02:18 <      amalloy > &(range 1 10 2)
02:18 <      lazybot > ⇒ (1 3 5 7 9)
02:18 <      amalloy > clojurebot: have i wronged you?
02:18 <   clojurebot > (1 3 5 7 9)
02:18 <   clojurebot > Titim gan éirí ort.
02:19 <      Averell > i would say i liked the partition performance more :)
02:21 <  gfredericks > ,*clojure-version*
02:21 <   clojurebot > {:interim true, :major 1, :minor 6, :incremental 0, :qualifier "master"}
02:21 < justin_smith > amalloy: he wanted to get odd items of an arbitrary list
02:21 < justin_smith > range was just the example
02:22 < justin_smith > (though I would not be surprised to see a more elegant way to get the odd items of a list either)
02:22 <     noprompt > the new version of clojurescript.test displays the "Ran N tests containing M assertions..." message twice, does anyone else notice that?
02:26 < justin_smith > ,:𝔤𝔯𝔞𝔳𝔦𝔱𝔞𝔰
02:26 <   clojurebot > :????????????????
02:26 < justin_smith > &:𝔤𝔯𝔞𝔳𝔦𝔱𝔞𝔰
02:26 <      lazybot > ⇒ :𝔤𝔯𝔞𝔳𝔦𝔱𝔞𝔰
02:27 < justin_smith > (inc lazybot)
02:27 <      lazybot > ⇒ 23
02:27 <   clojurebot > excusez-moi
02:29 <    Anderkent > ,:to the moon!
02:29 <   clojurebot > :to�the�moon!
02:29 <  gfredericks > ,(defn odds [l] (lazy-seq (when-let [[x & xs] (seq (next l))] (cons x (odds xs)))))
02:29 <   clojurebot > #'sandbox/odds
02:29 <    Anderkent > oh I'm so using multi word keywords
02:29 <  gfredericks > ,(odds [:a :b :c :d :e :f :g :h])
02:29 <   clojurebot > (:b :d :f :h)
02:31 <           nz > Hi, what is the correct way to call a method inside an inner java class? In java it is like this: ModelControllerClient client = ModelControllerClient.Factory.create(123)
02:32 <    Anderkent > nz: ModelControllerClient$Factory/create, I'd expect
02:32 <    Anderkent > ,Thread$UncaughtExceptionHandler
02:32 <   clojurebot > java.lang.Thread$UncaughtExceptionHandler
02:36 <     jared314 > is there a good lib for creating test fakes for an entire namespace? fake functions etc.
02:38 <           nz > Anderkent: thanks, it works, but you need to import inner class: (import 'org.jboss.as.controller.client.ModelControllerClient$Factory), seems that importing the main class is not enough
02:39 <    Anderkent > jared314: kinda sounds like midjes provided?
02:39 <  gfredericks > nz: yeah afaik inner classes aren't even a concept on the jvm; just classes with dollar signs in the name
02:39 <     jared314 > Anderkent: google-ing…
02:40 <  gfredericks > ,(defrecord Some$Class [])
02:40 <   clojurebot > sandbox.Some$Class
02:40 <  gfredericks > ,(fn % [])
02:40 <   clojurebot > #<sandbox$eval62$_PERCENT___63 sandbox$eval62$_PERCENT___63@1a87c8>
02:41 < justin_smith > gfredericks: https://www.refheap.com/66757 yeah that's a little faster
02:41 <    Anderkent > ,sandbox.Some$Class
02:41 <   clojurebot > sandbox.Some$Class
02:42 <    Anderkent > hm. I guess inner classes are just syntax sugar in java
02:43 <     jared314 > Anderkent: they are a compiler trick, like generics
02:48 <    seangrove > $seen petehunt
02:48 <      lazybot > petehunt was last seen quitting 30 minutes and 32 seconds ago.
02:49 <     jared314 > $seen jared314
02:49 <      lazybot > jared314 was last seen talking on #clojure 29 milliseconds ago.
02:56 <    Anderkent > ooooh wait 1.6 fixes the hashing issue for collections of numbers?
02:56 <    turbofail > yarp
02:58 <    Anderkent > ,*clojure-version*
02:58 <   clojurebot > {:interim true, :major 1, :minor 6, :incremental 0, :qualifier "master"}
02:58 <    Anderkent > &*clojure-version*
02:58 <      lazybot > ⇒ {:major 1, :minor 4, :incremental 0, :qualifier nil}
03:00 <    Anderkent > &(= (hash #{[:N [2 0]] [:R [4 2]] [:K [0 0]] [:Q [1 3]] [:B [3 0]]}) (hash #{[:N [3 0]] [:K [0 0]] [:R [1 2]] [:Q [4 3]] [:B [2 0]]}))
03:00 <      lazybot > ⇒ true
03:00 <    Anderkent > ,(= (hash #{[:N [2 0]] [:R [4 2]] [:K [0 0]] [:Q [1 3]] [:B [3 0]]}) (hash #{[:N [3 0]] [:K [0 0]] [:R [1 2]] [:Q [4 3]] [:B [2 0]]}))
03:00 <   clojurebot > true
03:01 <    Anderkent > huh
03:01 <    Anderkent > comes up false in a 1.6 repl for me
03:01 <     hiredman > clojurebot was on an old snapshot of 1.6
03:01 <     hiredman > that is what the :interim true means
03:01 <    Anderkent > ah.
03:01 <     hiredman > ,*clojure-version*
03:01 <   clojurebot > {:major 1, :minor 6, :incremental 0, :qualifier nil}
03:02 <     hiredman > on the release now
03:02 <    Anderkent > ,(= (hash #{[:N [2 0]] [:R [4 2]] [:K [0 0]] [:Q [1 3]] [:B [3 0]]}) (hash #{[:N [3 0]] [:K [0 0]] [:R [1 2]] [:Q [4 3]] [:B [2 0]]}))
03:02 <   clojurebot > false
03:02 <    Anderkent > good!
03:15 <          s0x > hey guys, i've got a function in a map like {:fn #(42)} is there a way to call that function in a chained way without additional brackets? e.g. something like (-> themap :fn callit println)
03:15 <          s0x > obviously the real method will do more than just returning a simple number :p
03:15 <          s0x > um sry ... function ^^
03:16 <  gfredericks > there's one or two terrible ways to do it
03:16 <      amalloy > (inc gfredericks)
03:16 <      lazybot > ⇒ 46
03:16 <  gfredericks > I bet amalloy knows all of them
03:16 <      amalloy > s0x: avoidnig parens is not really a very important goal
03:16 <  gfredericks > ,(let [the-map {:fn #(+)}] (-> the-map :fn deliver))
03:17 <   clojurebot > #<ArityException clojure.lang.ArityException: Wrong number of args (1) passed to: core/deliver>
03:17 <      amalloy > the language is chock full of em
03:17 <  gfredericks > ,(let [the-map {:fn #(inc %)}] (-> the-map :fn (deliver 5)))
03:17 <   clojurebot > 6
03:17 <      llasram > I've found it useful on some occasions to have `funcall` available
03:17 <      asthasr > Let's say I have a massive, sorted file I'm reading in via line-seq. I want to take-while on this line-seq, based on the first 'chunk' (key) of each line, producing a vector of lines to be passed into the function... and I want to iterate over this, so that I basically end up with [[["abc" 1 2] ["abc" 3 4]] [["def" 5 6] ["def" 7 8]]]... lazily
03:18 <      asthasr > what's the best way to do it?
03:18 <     rasmusto > asthasr: partition-by
03:18 <      asthasr > is partition-by going to be lazy, though?
03:18 <     rasmusto > yeah
03:18 <      llasram > It will fully realize each partition, but not the entire result
03:18 <     rasmusto > er, that
03:19 <      asthasr > ahh, so if there is a little chunk of unsorted lines later in the file, it'll be a separate partition
03:19 <     hiredman > ,(-> {:fn #(identity 42)} :fn (reduce nil))
03:19 <      llasram > Yes
03:19 <   clojurebot > 42
03:19 <          s0x > llasram: indeed ... we just wrote some method like that by ourself ... just wanna check if there is a nativ way of doing that
03:20 <          s0x > ,(-> {:fn #(identitiy 42)} :fn (apply nil)
03:20 <   clojurebot > #<RuntimeException java.lang.RuntimeException: EOF while reading>
03:20 <          s0x > ,(-> {:fn #(identitiy 42)} :fn (apply nil))
03:20 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: identitiy in this context, compiling:(NO_SOURCE_PATH:0:0)>
03:20 <          s0x > ,(-> {:fn #(identity 42)} :fn (apply nil))
03:20 <   clojurebot > 42
03:20 <     rasmusto > ~thrush
03:20 <   clojurebot > Pardon?
03:20 <          s0x > here we go ... that works either .. like gfredericks said ... terrible ways :D
03:21 <     hiredman > ,(-> {:fn #(identity 42)} :fn (.invoke))
03:21 <   clojurebot > 42
03:22 <          s0x > hiredman: well i guess the nicest way so far
03:22 <  gfredericks > also terrible
03:22 <          s0x > sure :p
03:23 <      amalloy > s0x: just don't put everything in a giant -> form. the nonsense with calling a function is hurting readability more than threading is helping
03:24 <        bars0 > Hi all. How to upgrade clojure used by leiningen. I am on Windows 7 32 bits?
03:24 <      asthasr > Thanks rasmusto, llasram :)
03:24 <  gfredericks > hey that'd be a fun refactoring tool; somehow convert everything to threading macros
03:25 <      amalloy > bars0: just change the clojure dependency in your project.clj. you don't need lein itself to change its clojure version
03:25 <     hiredman > gfredericks: there was an emacs clojure thing that would do the transform both ways
03:25 <      amalloy > gfredericks: i believe that was like the main thing that clj-refactor did
03:25 <        bars0 > amalloy: ok, thanks
03:25 <      amalloy > or whatever it was called. the emacs clojure thing
03:26 <  gfredericks > the lib that says "send help" in the readme
03:26 <  gfredericks > but I mean doing it to an extreme
03:26 <  gfredericks > much like that time I did a point-free factorial
03:27 <          s0x > amalloy: actually in our case it would have increased the readability, belief it or not.
03:27 <          s0x > thanks to everyone by providing suggestions
03:28 <          s0x > our own method "call" is still the best way to go :)
03:28 <          s0x > or at least the most readable
03:29 <  gfredericks > call it $
03:31 <  gfredericks > ,(defn $ [f & args] (apply f args))
03:31 <   clojurebot > #'sandbox/$
03:31 <     rasmusto > ,($ + 1 2 3)
03:31 <   clojurebot > 6
03:34 <  gfredericks > so if test.check wanted to be parameterizable during calls to `lein test`
03:35 <  gfredericks > e.g., for setting seeds or scaling the number of test runs
03:35 <  gfredericks > what would be the least terrible mechanism for that?
03:35 <  gfredericks > +5 points if it works with lein profiles
03:36 <          s0x > why calling it $ ?
03:36 <          s0x > is there a reason for that?
03:36 <      amalloy > s0x: that's what it's called in haskell, is the joke
03:37 <      amalloy > f $ x = (f x)
03:42 <      aaelony > 13:41 *** ustunozg_ QUIT Remote host closed the connection
03:42 <       Pupnik > i found myself wishing they left the parens in when learning haskell
03:42 <          s0x > gfredericks, amalloy: fair enough ... i've mentioned that and we will use that one ... thanks alot
03:43 <         tuft > heh, let's make prefix haskell =)
03:45 <      amalloy > gfredericks: a new task lein quickcheck, which takes args and binds some dynamic variables that you look up during your tests?
03:45 <      amalloy > seems kinda dumb but viable
03:46 <       Pupnik > easier enough, as I recall only the special character functions are infix tuft, just need to give them all normal names
03:46 <      amalloy > Pupnik: you don't even have to do that, just wrap em in parens
03:46 <      amalloy > ($) f x = f $ x = f x
03:47 <      amalloy > aw. i'm sad that `($)` doesn't put it back to being infix
03:47 <  technomancy > gfredericks: does test.check have a -main entry point, or do you have to use clojure.test/run-tests?
03:49 <       Pupnik > amalloy, you get an unfortunate paren explosion if you try nesting expressions like that though
03:49 <      amalloy > Pupnik: well sure, the operators are infix for a reason. but you did just say you wished there were more parens: now you get lots!
03:50 <      amalloy > technomancy: there's no -main
03:50 <         bob2 > gfredericks, environ?
03:55 <    mr-foobar > what's the advantage of tag literals in edn over plain symbols ?
03:56 <  gfredericks > technomancy: it doesn't have a main; you can call tests from the repl, or use defspec which makes something like deftest
03:56 <  gfredericks > bob2: also it's a contrib library so we can't bring in random stuff
03:57 <  gfredericks > amalloy: ideally it should be compatible with running _all_ the clojure.test tests
04:02 <     gvickers > Anyone using the Om library? Where should I use om/transact!? Is it ok to use it in a callback on a button?
04:07 < justin_smith > gvickers: I think that's appropriate, if you want to immediately render the change in question and don't need to consolidate it with other simultaneous changes
04:22 <     sdegutis > clojure.lang.LineNumberingPushbackReader (stdin) cannot be cast to java.io.InputStream
04:22 <     sdegutis > haaalp
04:24 <      amalloy > readers read characters; input streams are for bytes
04:24 <     sdegutis > aw
04:25 <   whodidthis > fnhouse seems pretty cool, hopefully its released on clojars soon
04:26 <     sdegutis > I'm trying to get clj-ssh to load me right into a live ssh session of the server of my choice.
04:26 <     sdegutis > I'm trying to use (ssh-shell) to do it.
04:27 < justin_smith > sdegutis: maybe this could be implemented more concisely? http://www.java2s.com/Code/Java/File-Input-Output/ConvertReadertoInputStream.htm
04:28 <     sdegutis > I'm hesitant to do stuff I don't understand when it comes to networks.
04:28 <    Anderkent > sdegutis: ReaderInputSTream ?
04:28 <    Anderkent > oh my bad
04:29 <      amalloy > i don't think that exists, sdegutis
04:29 <    Anderkent > i thought it's actually a thing in java
04:29 <      amalloy > er, Anderkent
04:29 <      amalloy > i wrote it once, many years ago, but it's a bad idea
04:29 <    Anderkent > it's in apache commons!
04:29 <    Anderkent > can't be a bad idea.
04:30 <    Anderkent > though browsing through the source, it doesnt handle stream preambles which sucks
04:30 <      amalloy > sdegutis: maybe https://github.com/ztellman/byte-streams ?
04:30 <     sdegutis > If Apache is known for writing a famous web server in C, why do they have so much Java stuff?
04:31 <    Anderkent > it's a software foundation
04:31 <         tuft > sdegutis: most of the stuff under their umbrella these days is java
04:31 <     sdegutis > amalloy: thanks looks great
04:33 <     sdegutis > ztellman strikes again, with a silent yet graceful "boom got em"
04:35 <      amalloy > clojurebot: ztellman is, inexplicably, silent yet graceful
04:35 <   clojurebot > excusez-moi
04:35 <      amalloy > clojurebot: ztellman |is|, inexplicably, silent yet graceful
04:35 <   clojurebot > c'est bon!
04:37 <     hiredman > ~ztellman
04:37 <   clojurebot > ztellman is , inexplicably, silent yet graceful
04:38 <     sdegutis > I guess I just don't understand what inexplicable means then
04:38 <     sdegutis > oh. ok yeah.
04:41 <     hiredman > clojurebot's factoid stuff conflates data and presentation, ideally it would go in through something that extracted raw sort of relationship data, stuck that in a store, then queryied that story to find data, and then used some set of rules to generate an english sentence conveying that data
04:42 <     sdegutis > hiredman: hey is clojurebot available to join, say, #clojure-social ?
04:44 <   maxalwings > /msg NickServ identify gakwaya
04:44 <      amalloy > sdegutis: you can have lazybot if you want him?
04:44 <     sdegutis > i saw nothing
04:44 <     sdegutis > amalloy: he's there
04:44 <     sdegutis > thanks
04:44 <     sdegutis > ~guards
04:44 <   clojurebot > SEIZE HIM!
04:45 <   maxalwings > Hellow!
04:46 <   maxalwings > I am new to clojure I want to use range to generate numbers like 4 8 16 32 64
04:46 <   maxalwings > Need ur help
04:46 <     joegallo > why range?
04:46 <      brehaut > sounds like a job for iterate
04:47 <     joegallo > inc brehaut
04:47 <   maxalwings > Oh! inc would work. Thanks
04:47 <      amalloy > &(take 10 (iterate #(* 2 %) 4))
04:47 <      lazybot > ⇒ (4 8 16 32 64 128 256 512 1024 2048)
04:48 <        TimMc > ...
04:48 <   maxalwings > Thank you guyz
04:48 <        TimMc > maxalwings: "inc brehaut" meant +1 to brehaut, not that brehaut should have said "inc" :-)
04:49 <      amalloy > &(for [power (range 10)] (Integer/parseInt (apply str "1" (repeat power "0")) 2))
04:49 <      lazybot > ⇒ (1 2 4 8 16 32 64 128 256 512)
04:49 <     joegallo > :)
04:49 <      amalloy > in case you're looking for a bad solution as well as a good one
04:49 <     joegallo > nice
04:49 <        TimMc > ha!
04:49 <   maxalwings > Ha!
04:49 <   maxalwings > Nice
04:52 <   maxalwings > For those of you who uses garden to do css I have rewritten and published normalize.css
04:52 <   maxalwings > check it out on clojars.org
05:01 <     sdegutis > max[tab]: looks handy th--
05:12 <       gozala > anyone can help me with  clojurescript.test on node ?
05:13 <     sdegutis > maxalwings: looks handy thanks
05:17 <   Frozenlock > I would like to learn Component and try a little of Datomic. Is there, by any change, a tutorial using both? :-p
05:18 <   maxalwings > sdegutis glad you like it
05:23 <      amalloy > ~anyone
05:23 <   clojurebot > Just a heads up, you're more likely to get some help if you ask the question you really want the answer to, instead of "does anyone ..."
05:37 <      tmciver > I want to ensure that a value is a seq even if I'm given a scaler. Is there a better way to do (if (seq? x) x (vec x))?
05:37 <       Bronsa > ,(vec 1)
05:37 <   clojurebot > #<RuntimeException java.lang.RuntimeException: Unable to convert: class java.lang.Long to Object[]>
05:39 <     noprompt > $seen guns
05:39 <      lazybot > guns was last seen joining on leiningen 1 hour and 35 minutes ago.
05:39 <     noprompt > guns: you around?
05:39 <   Frozenlock > tmciver: I'm not sure I understand... but (or (seq x) (vec x)) is a tiny bit shorter :p
05:39 <         guns > noprompt: lo
05:40 <         guns > watching clojure/west videos with some dinner
05:40 <          cbp > tmciver: seq? will return false for vectors, also vec turns one seq into a vector, it doesn't turn a scalar into a vector
05:40 <       Bronsa > tmciver: you want vector there, not vec
05:40 < michaniskin1 > noprompt: hey dude
05:40 <     noprompt > guns: i'm not sure if you've run in to this but sometimes i run in to an issue with using tools.cli
05:40 <      tmciver > Frozenlock: (seq x) throws if x is a scalar.
05:40 <     noprompt > michaniskin1: yo, trying out boot right now :)
05:40 <         guns > noprompt: Great, I'd love to fix it for you
05:41 <          cbp > tmciver: I believe you want `sequential?`
05:41 <      tmciver > Bronsa: you're right.
05:41 <     noprompt > guns: i don't think it's an issue w/ tools.cli directly but oddly when i require the latest version in my project and attempt to use it i'll get the error "parse-opts does not exist"
05:41 <     noprompt > guns: i've tried lein deps :tree to no avail
05:42 <         guns > noprompt: that's strange; is this CLJS?
05:42 <         guns > noprompt: And would you mind sharing a paste/gist so I can check it out?
05:43 <     noprompt > guns: no. and i've tried nuking all tools.cli from ~/.m2, etc. it works for some projects but not for others.
05:43 <     noprompt > guns, michaniskin1: i'm trying this w/ boot fwiw
05:44 < michaniskin1 > noprompt: what does your build.boot look like?
05:44 <     noprompt > https://gist.github.com/noprompt/9820733
05:45 <         guns > Oh, boot creates Clojure scripts? Nice
05:46 <     noprompt > guns: yeah, it's exactly what we want right now too. we have a build task that doesn't make sense as a lein-plugin.
05:46 <         guns > I'm going to install boot now and give it a go
05:46 <     noprompt > guns: but this problem has happened before with regular lein projects. :-/
05:47 <         guns > That's very strange; the tools.cli artifact is very simple
05:47 <     noprompt > guns: the annoying part is lein deps :tree doesn't report that it's a dependency but when running lein XXX it get's picked up.
05:47 <     noprompt > guns: i even completely emptied my profiles too.
05:48 <         guns > noprompt: Maybe leiningen has a hidden dep on an old tools.cli?
05:48 < michaniskin1 > noprompt: i'm investigating too
05:48 <         guns > that doesn't show up in :deps that is
05:49 <  technomancy > lein pulls in tools.cli 0.2.1 via reply
05:50 <    _2_yara17 > hola
05:50 <          cbp > bonjour
05:50 <         guns > So maybe I should send a patch to reply? the new tools.cli is backwards compatible
05:50 <  technomancy > sure
05:51 <     noprompt > technomancy: ah, then that's probably the problem.
05:51 <         guns > https://github.com/trptcolin/reply/blob/master/project.clj
05:51 <         guns > [org.clojure/tools.cli "0.3.1"]
05:51 <  technomancy > guns: actually ideally we could just exclude it entirely
05:52 <  technomancy > lein does its own option parsing
05:53 <  technomancy > but that might require rearranging things in a backwards-incompatible way
05:53 <  technomancy > yeah, the ns that requires tools.cli is the same ns lein needs
05:53 <  technomancy > even though the defns inside it are completely unrelated =(
05:53 <  technomancy > huge namespaces: not always very cool
05:53 <         guns > lol
05:53 < michaniskin1 > noprompt: i'm getting ready to release an update to boot (it's in the "dev" branch currently) that separates the whole pomegranate dependency into another classloader
05:53 <  technomancy > hm; it's not even actually big at all, only 100 loc
05:54 <     sdegutis > Some interesting conversations about vars: http://logs.lazybot.org/irc.freenode.net/%23clojure/2010-10-18.txt
05:55 < michaniskin1 > noprompt: actually i was mistaken, pomegranate doesn't pull in tools.cli, as far as i can see
05:55 <         guns > noprompt: Still, it's strange I've never seen this problem
05:55 <     noprompt > were either of you able to replicate it?
05:56 <     sdegutis > Also, very interesting discussion about how to compile Clojure files: http://clojure-log.n01se.net/date/2008-02-01.html
05:57 < michaniskin1 > noprompt: yes i can make it happen here too
05:59 <     noprompt > michaniskin1: cool. i was hoping that i wasn't going to end up on my own personal island of despair over here. :-)
05:59 <     noprompt > michaniskin1: we're still super stoked to bring this into our workflow.
06:00 < michaniskin1 > something is bringing in tools.cli 0.2.1
06:00 < michaniskin1 > noprompt: i'm tracking down what that could be, exactly
06:01 <     noprompt > right, i clone everything down to my machine and ran lein deps :tree everywhere to see if i could spot it. :-/
06:01 < michaniskin1 > noprompt: i just did this: https://gist.github.com/9821023
06:01 < michaniskin1 > noprompt: then did `boot doit`
06:02 <         guns > gah finally figured out how to use boot
06:03 < michaniskin1 > noprompt: i'm going to test with the dev version of boot (the one with the segregated pomegranate), just to make sure
06:07 < michaniskin1 > noprompt: if you do git pull from dev branch of boot you can use this: https://gist.github.com/9821131
06:08 < michaniskin1 > noprompt: the problem was that tools.cli was somehow being pulled in via pomegranate, after all
06:09 <     noprompt > orly?
06:09 < michaniskin1 > noprompt: i'll be pushing a release of boot in the next day or two, but it's not quite ready yet
06:10 <     noprompt > michaniskin1: that's fine. we're just spiking on this atm. personally, i'm sold.
06:10 <         guns > noprompt: regarding leiningen projects: I notice that a simple project repl without an explicit tools.cli dep will actually have tools.cli 0.2.1 on the classpath
06:11 <         guns > So maybe that's why you have seen this in the past?
06:11 <     noprompt > guns: so is the culprit pomegranate?
06:11 < michaniskin1 > noprompt: awesome!
06:12 <  technomancy > guns: I can't reproduce that
06:12 <  technomancy > guns: is it possible that's coming from your user profile
06:12 <     noprompt > technomancy: i can attempt to verify that.
06:13 <         guns > technomancy: I removed all the deps from that to see; but I will try again
06:13 <     noprompt > technomancy: we have a project where this was an issue, at the time i didn't think to check there.
06:13 <         guns > I suspected it was reply 0.3.0; the upcoming 0.3.1 will include tools.cli 0.3.1
06:13 <         guns > The current reply has tools.cli 0.2.1
06:15 <     noprompt > https://gist.github.com/noprompt/9821268
06:17 <         guns > technomancy: yes you are correct
06:18 <       gozala > dnolen_: is there way to preserve (def env js/process.env) when using advanced compilation ?
06:19 <         guns > noprompt: then perhaps you have something in your user profile that brings in the old tools.cli (many lein plugins have it), and didn't notice that you did not have an explicit tools.cli dep?
06:19 <       gozala > dnolen_: it seems to translate to rc=process.rc
06:20 <         guns > noprompt: and if this happens with an explicit dep then :exclusions must be used?
06:22 <     noprompt > guns: i mved my profiles.clj file out of ~/.lein and still get the problem
06:22 <          cbp > gozala: have you tried ^:export ?
06:22 <         guns > noprompt: in a straight leiningen project with an explicit tools.cli dep?
06:23 <     noprompt > guns: yeah, but let me try making a *brand new* project too and see if it's an issue.
06:23 <     noprompt > gozala: i think you need to use externs.
06:24 <       gozala > cbp: yeah but I don’t think it helps with props
06:24 <       gozala > noprompt: any reference about externs ?
06:25 <          cbp > gozala: I think you need to do (def ^:export env (.-env js/process))
06:25 <     noprompt > gozala: there's this article http://lukevanderhart.com/2011/09/30/using-javascript-and-clojurescript.html
06:25 <      amalloy > probably (aget js/process "env")
06:25 <          cbp > If I understand it process is an object and you're trying to get the env key?
06:25 <     noprompt > amalloy: yeah that works too
06:26 <     noprompt > amalloy: but it's a bit annoying.
06:26 <      amalloy > i mean, he can decorate his own def with ^:export, but that won't impact how js/process get munged
06:26 <      amalloy > and he probably doesn't even need his own exported
06:26 <     noprompt > amalloy: right..
06:26 <     noprompt > s/\.$//
06:27 <       gozala > cbp: amalloy no prompt thanks for suggestions
06:27 <       gozala > I think aget is probably best way to go about it for my use case
06:27 <      amalloy > noprompt: you know there used to be a lazybot plugin that would pounce on those s/this/that/ annotations and tell everyone what it substitutes to. people don't seem to like it
06:28 <     noprompt > gozala: externs are fairly easy. you just need to create a process_externs.js file and put something like "process.env = {}" and have an entry :externs ["process_externs.js"]
06:28 <     noprompt > amalloy: that's bummer. ;_;
06:29 <       gozala > noprompt: won’t that override process.env though ?
06:30 <     noprompt > guns: it works fine with a brand new project.
06:30 <       gozala > noprompt: I’ll take a look at the post
06:30 <       gozala > noprompt: because amalloy your suggestion surprisingly did not work
06:31 <     noprompt > gozala: no. that's just for google closure. basically it's so that the identifiers will not get munged during advanced compilation and also to inform the compiler about what things are so it can make decisions when compiling.
06:31 <       gozala > noprompt: amalloy  actually never mind it did work I just had a separate usage somewhere
06:32 <       gozala > noprompt: how is it better that aget though ?
06:33 <     noprompt > gozala: the reason that works is because you're effectively saying env = process["env"]. process also does not get munged because https://github.com/clojure/clojurescript/blob/master/src/cljs/cljs/nodejs_externs.js
06:33 <         guns > noprompt: now you've got yourself a bug :) If this pops up again, and you have an explicit dep, please open an issue on github while it's fresh on your mind
06:34 <     noprompt > guns: yeah, and i already spent an hour trying to figure it out for that project and simply don't feel like wasting more time on it. :-(
06:34 <     noprompt > guns: heh, but hey the boot problem looks like it's pretty much solved! ;-)
06:35 <     noprompt > gozala: personally i prefer (.-env js/process) and using externs to (aget js/process "env"). it's totally your call though.
06:36 <     noprompt > gozala: fwiw
06:36 <     noprompt > gozala: there's also https://github.com/dcodeIO/node.js-closure-compiler-externs
06:37 <     noprompt > michaniskin1: i'll keep an eye on boot for the next release.
06:37 <       gozala > noprompt: I did not realised every import will be mingled as well :(
06:39 <     noprompt > gozala: yeah, but it's really not that bad unless you're using every last inch of an API. even then it's really just a simple matter of adding a new entry to an externs file. takes like a second.
06:40 <     noprompt > gozala: for the nodejs builtins i'd probably look at using those externs i mentioned above since they cover 99% of what you need in pure node.
06:40 <       gozala > noprompt: well I’m hooking into libuv bindings directly
06:40 <       gozala > :(
06:40 <       gozala > which is process.binding(“os”) for example
06:41 <     noprompt > gozala: but the motivation for using advanced compilation is also not as compelling as it is on the client.
06:42 <       gozala > noprompt: is this how you specify what’s the result of function ?
06:42 <     noprompt > gozala: well unless you're planning to package it up and put it on npm or something. then you've got some work todo. ;-)
06:42 <       gozala > https://github.com/dcodeIO/node.js-closure-compiler-externs/blob/master/events.js#L25-L29
06:44 <         guns > technomancy: I love your idea about clicky switches for keys and linear ones for modifiers. So obvious once you hear it!
06:44 <  technomancy > guns: oh yeah, are you going to try it?
06:44 <     arnaudsj > HI, is there a good reference guide/page on the best way to create a clojure lib based on a java lib (basically a clojure wrapper)
06:45 <     noprompt > gozala: i'm not completely sure. try it out maybe? i haven't done much cljs targeting node.
06:45 <      amalloy > arnaudsj: i think for libraries where there's an obvious way to create a clojure wrapper, the java version is already usable enough that there's no need to wrap it
06:45 <         guns > technomancy: it's on the shopping list; I suppose no one sells them that way?
06:45 <       gozala > noprompt: thanks
06:46 <  technomancy > guns: I don't think so, heh
06:47 <     arnaudsj > amalloy: ok, so how do you deal with automatically installing the jar file into your leinengen project?
06:47 <  technomancy > closest I've heard of is the realforce boards that use different springs for the weaker fingers
06:47 <  technomancy > guns: going for an ergodox, or something else?
06:47 <      amalloy > you refer to it via maven
06:47 <     arnaudsj > I mean as a dependency so that it is automatically installed in your local .m2?
06:47 <         guns > technomancy: you know, my gf was just pitching that we start a hardware company; it looks to me you're halfway thre
06:47 <     arnaudsj > amalloy: can you point me to an example?
06:47 <  technomancy > guns: it is tempting =)
06:47 <         guns > technomancy: I was just going to buy a WASD and swap out the parts
06:48 <  technomancy > cool
06:48 <      Averell > why is that supposed to be good, having a mix of switches?
06:48 <     noprompt > arnaudsj: just add it as a dependency to you project.clj [the/dep "X.X.X
06:49 <  technomancy > Averell: for non-modifiers, you want tactile feedback for when they activate because you typically just tap them. but modifiers are different since you hold them down
06:49 <  technomancy > so you always bottom out anyway.
06:49 <     noprompt > arnaudsj: then (:import the.dep.TheClass)
06:49 <  technomancy > Averell: it helps you instantly notice if you've hit the wrong key
06:49 <  technomancy > well, the wrong type of key anyway
06:50 <     arnaudsj > noprompt: where do I place the jar for that dependency though? (it wont' be able to find it in the maven public repos)
06:50 <      amalloy > arnaudsj: write a letter to your congressman. jars which aren't in maven should be illegal
06:51 <     noprompt > lol
06:51 <     arnaudsj > amalloy, noprompt: yes that's why I wanted to wrap it up into a nice clojure lib to deploy on Clojars.org :)
06:52 <      amalloy > that doesn't solve the problem
06:52 <     hiredman > clojars is a maven repo
06:52 <  technomancy > guns: one of the guys at cloudant where they host seajure has a filco that's pretty great too http://www.amazon.com/Filco-Majestouch-2-Tenkeyless-FKBN87MC-EB2/dp/B004WOF7S0/ref=sr_1_3?ie=UTF8&qid=1395964285
06:52 <  technomancy > oh, he left
06:52 <     hiredman > it is, in fact, language agnostic as are maven repos
06:52 <      amalloy > you'd be creating a clojure lib that depends on a java lib that nobody else can find. instead, publish the java lib to clojars yourself
06:53 <      Averell > i have that filco with wasd keycaps. i'll probably try this mixing.
06:53 <  technomancy > Averell: my boards have the modifiers on the thumbs, which is a bit different
06:54 <     arnaudsj > ok, I see. So get that java lib to use maven instead to compile and publish it to clojars. I get it now. Sorry for the newbye question. Just getting starting on Clojure in the past month, and I can't get enough of it, but I don't know well yet the ecosystem.
06:54 <  technomancy > Averell: I was hitting the wrong keys more when I was getting used to them, and I feel like the different switches helped
06:54 <      Averell > is that custom built?
06:54 <  technomancy > Averell: yeah, http://technomancy.us/173 and http://technomancy.us/172
06:55 <      amalloy > arnaudsj: you can publish it to clojars without having to change how it builds. build the jar however it wants, then publish it. i don't recall the details for manually publishing, but you should be able to find it on google somewhere
06:56 <  technomancy > amalloy: scp pom.xml myjar.jar clojars@clojars.org:
06:57 <  technomancy > oh, you can use lein deploy too I guess
06:59 <     rasmusto > technomancy: oo, mx blacks for ctrl/shift/alt/alt-gr etc?
07:00 <     rasmusto > (just glanced at the logs)
07:01 <  technomancy > rasmusto: yeah, for the mods that are under the thumbs. one of my boards has shift under the pinkies, so I used reds for that since they take less force
07:02 <     rasmusto > that's great, what about spacebar?
07:02 <  technomancy > rasmusto: on my new board I have greens for space and backspace
07:02 <  technomancy > both under the thumbs
07:03 <  technomancy > https://github.com/technomancy/atreus#switches tl;dr
07:03 <     rasmusto > technomancy: ah, I think I've seen your keyboard posted at one point, is it the split grid type thing?
07:03 <     rasmusto > ah, thanks.
07:04 <     Foxboron > when i joined this chan one and a half year ago, there where 435 people. Now its 710. Thats awesome.
07:04 <     Foxboron > just realized it.
07:05 <  technomancy > the mailing list growth seems to be easing off though
07:06 <  technomancy > took over 5 years to get from 900 to 9000
07:07 <       arrdem > which list?
07:07 <  technomancy > arrdem: just the main clojure one
07:09 <  gfredericks > time to IPO before it's to late
07:09 <  gfredericks > too*
07:11 <     rasmusto > avrdude is such a weird acronym, great tool though
07:13 <         guns > technomancy: I've heard great things about the Filcos; what I am really interested in having is a Keyboard with a configurable CAPS->Control setting so I never have to loadkeys / keymap / udev-whatever again at a new installation
07:14 <  technomancy > guns: need an onboard microcontroller =D
07:14 <         guns > technomancy: and a Forth interpreter apparently!
07:14  * gfredericks types "xmodmap .Xmodmap" like ten times a week
07:14 <  technomancy > well *eventually* sure
07:34 <        TimMc > gfredericks: Except when you type "mwlpwqt /Mwlpwpt"
07:41 <   stcredzero > Would I be able to get away with signalling a semaphore in a function sent to an Agent?
07:44 <      amalloy > stcredzero: not enough context for a correct answer
07:44 <      amalloy > you can definitely interact with semaphores in an agent action, but whether this leads to a correct program depends on the problem
07:45 <         guns > Isn't the implicit question whether or not agent fns are retried?
07:45 <   stcredzero > amalloy: granted, I could freeze everything up waiting on the thing afterwards, but as far as I can tell there is nothing in the whole agent thing that forbids it.
07:46 <      amalloy > guns: no? that's one thing that could go wrong, but hardly the only one
07:46 <   stcredzero > amalloy: yes, but there's a way to get notification from the system once an agent action succeeds, yes?
07:46 <      amalloy > eg, perhaps the agent is blocking on some other lock, so that you build a deadlock while it waits for itself
07:47 <   stcredzero > amalloy: I want to know when a specific set of agent actions has finished
07:47 <      amalloy > stcredzero: i mean, there's ##(doc await)
07:47 <      lazybot > ⇒ "([& agents]); Blocks the current thread (indefinitely!) until all actions dispatched thus far, from this thread or agent, to the agent(s) have occurred. Will block on failed agents. Will never return if a failed agent is restarted with :clear-actions true."
07:48 <      amalloy > but generally if you care when an agent action is done, you don't want to be using an agent - their asynchrony is supposed to be a feature, not a hurdle
07:48 <   stcredzero > amalloy: ah ha! Good news. I don't have to build it.
07:48 <   stcredzero > amalloy: well, what I want isn't quite like an Agent.
07:48 <     hyPiRion > Generally you'd use await-for, because await is dangerous wrt. blocking
07:49 <      amalloy > hyPiRion: he strikes me as someone who lives dangerously
07:49 <   stcredzero > amalloy: you have no evidence of this, I think. Rather, you are interpreting my willingness to use tools in unusual ways in experiments this way. (Probably a little condescenscion there.)
07:50 <      amalloy > that's a fair characterization
07:51 <   stcredzero > amalloy: typical pattern. I ask about a small detail. A system that uses this mechanism is imagined by others, but has some tremendous flaw, but it's assumed that my system has that flaw. This is wrong over 50% of the time.
07:52 <  michaniskin > AeroNotix: ping
07:52 <    AeroNotix > michaniskin: pizzong
07:53 <    AeroNotix > sup
07:53 <  michaniskin > AeroNotix: i added you with admin access to the tailrecursion/ring-proxy repo
07:53 <  michaniskin > you should be able to add collaborators if you wish, or whatever you like
07:53 <    AeroNotix > michaniskin: oh ok, thanks a lot! We're using it on something at work
07:53 <    AeroNotix > :)
07:53 <    AeroNotix > I hope you didn't take offense to my robocop thing
07:53 <     hyPiRion > stcredzero: that's a very common thing over here in general. Many people ask for advice on how to do X, but actually wants to do Y, in which Z is a better choice.
07:54 <         guns > This is a common thing in every channel
07:54 <    AeroNotix > michaniskin: It's 2:00am here, though. So I must hit the hay
07:55 <    AeroNotix > will catch up with you another time
07:55 <   stcredzero > hyPiRion: Yes, I am aware of how that works. What disturbs me is when people start throwing counterfactuals about what I'm doing, then jump on that as evidence I don't understand something like *threads*.
07:56 <         guns > stcredzero: lots of people don't understand threads. no reason to be touchy
07:56 <         guns > I've been misunderstood on plenty of channels; not a big deal
07:57 <  michaniskin > AeroNotix: see ya
07:57 <   stcredzero > guns: I just don't like it when people tell me something is X when it's Y.
07:57 <         guns > stcredzero: meh; it's not a big deal
08:24 <  gfredericks > TimMc: the dvorak stuff seems to be setup at a lower level. xmodmap is just for caps->ctrl
08:28 <        TimMc > Ah, OK.
08:33 <       cneira > how do I use a  custom datatype from a java library ?
08:34 <      brehaut > you import it, and the construct it
08:34 <      brehaut > ,(import java.util.Date)
08:34 <   clojurebot > java.util.Date
08:34 <      brehaut > (Date. 2014 1 1)
08:34 <      brehaut > ,(Date. 2014 1 1)
08:34 <   clojurebot > #inst "3914-02-01T00:00:00.000-00:00"
08:36 <     hyPiRion > it's from 1900
08:36 <     hyPiRion > ,(Date. 114 27 03)
08:36 <   clojurebot > #inst "2016-04-03T00:00:00.000-00:00"
08:37 <     hyPiRion > ,(Date. 114 3 27)
08:37 <   clojurebot > #inst "2014-04-27T00:00:00.000-00:00"
08:37 <      brehaut > oh. lol
08:38 <      tmciver > The year is from 1900, the month is from zero and the day is from 1. good grief.
08:38 <      brehaut > forgot about that. not that its really relevant
08:38 <     hyPiRion > and months are apparently zero-indexed
08:38 <      brehaut > i think someone was high when they wrote it
08:39 <      amalloy > well, that was in like the sixties, brehaut, so probably
08:39 <      amalloy > (ie, Date is derived from very old C functions)
08:40 <      brehaut > if thats the case, its surprising we can accurate determine when it was written at all
08:43 <      brehaut > in any case, its still quite insane to be writing a new, cross platform language/library and to just copy the madness from an earlier system that is clearly crazypants
08:48 <      amalloy > well, yes. i can only explain, not justify
08:51 <    shep-home > Is there a nice way to destructure from the end of seq?
08:51 <      amalloy > shep-home: not really
08:51 <    shep-home > I'm reversing it and taking the first few items for now
08:52 <      amalloy > and like, it can't be performant, so it's not unreasonable that the language discourages you from doing it. clojure often does that
08:52 <    shep-home > alright, it's not a big thing in this case
08:52 <    shep-home > thanks!
09:01 <        TimMc > Hmm, It could be nice to destructure from the end of a vector.
09:01 <        TimMc > I suppose that's what rseq is for.
09:01 <      brehaut > rseq!
09:02 <        TimMc > sniped!
09:02 <      brehaut > i blame international lag
09:03 <      amalloy > haha quick, someone tell rich we've found out that rseq is only for destructuring
09:06 <        TimMc > Huh, I didn't get a ping response from brehaut's client. Maybe I screwed up the command.
09:07 <      brehaut > or my crappy client doesnt work properly?
09:07 <      brehaut > TimMc: im getting ~1.0±0.1 to you
09:07 <      brehaut > also nan
09:07 <        TimMc > !
09:08 <      brehaut > 2.0
09:10 <      brehaut > i guess those are seconds
09:25 <        TimMc > That's plenty of time for sniping.
09:38 <        chare > who here is addicted to diablo 3 reaper of souls
09:42 <       arrdem > (inc amalloy) ;; ring buffer is osum
09:42 <      lazybot > ⇒ 92
10:18 <      amalloy > arrdem: glad you enjoy
10:18 <       arrdem > amalloy: you should totally patch it to use 1.6 now :P
10:18 <      amalloy > hey, maybe i could get into quickcheck by writing some test.check properties for ring-buffer
10:19 <      amalloy > arrdem: does it need to change in some way for 1.6? surely you can just use 1.6 and ring-buffer together
10:19 <       arrdem > amalloy: I don't think so, I'm just poking you
10:19 <       arrdem > amalloy: seriously tho, thanks. ring-buffer made logging bounded histories a breze.
10:20 <      amalloy > cool. i don't think i ever actually used ring-buffer, i just made it for fun
10:20 <       arrdem > I just used it in a branch predictor implementation...
10:20 <       arrdem > blag post incomming
10:23 <      MadFunk > chare: is it that good?
10:23 <        chare > MadFunk you have never played diablo 3?
10:23 <      MadFunk > I have, that's why I'm asking=p
10:25 <       arrdem > MadFunk: FYI chare is the routinely visiting troll we still haven't banned for some reason
10:25 <       arrdem > MadFunk: chatting with him is... frowned on.
10:25 <        chare > i'm not a troll
10:25 <      MadFunk > lol, arrdem, noted.
10:25 <      MadFunk > chare: I sorta peaced after the first couple weeks. Like SimCity, it wasn't the "always online" issue that bothered me-- just felt the game wasn't as "complete" as I'd hoped based on the series. But yeah, I hear better things about RoS.
10:25 <      MadFunk > totally on-channel-topic here, I know.
10:31 <      MadFunk > I do actually have clojure related inquiry for anyone who might have some ideas. I'm trying to tackle this problem http://codegolf.stackexchange.com/questions/24891/solve-aristotles-number-problem in clojure and I'm not sure how. I've done my best to figure it out myself, but I do not have a good track record with math puzzles. I was wondering if anyone could help me identify an approach. I've given up on figuring it out on my own, now I
10:31 <      MadFunk > just want to know how it could be solved.
10:36 <      MadFunk > I suppose I could translate the logic from one of the other submissions, but I feel like there must be a more distinctly-clojure approach. I appreciate that could be just a misconception on my part. Any input would be greatly appreciated.
10:48 <      amalloy > MadFunk: i'd say converting one of the other solutions to an immutable approach will be both a good learning experience and also the easiest way to go. coming up with a novel algorithm for a solved problem is not easy
11:05 <      MadFunk > amalloy: aye, that sounds very reasonable. thank you. I was pretty sure I was trying to be cleverer than I need to be (or actually am lol).
11:06 <      MadFunk > I was basically trying to brute force it.
11:09 <    Anderkent > can anyone explain this to me
11:09 <    Anderkent > ,(bytes (byte-array [1 2 3]))
11:09 <   clojurebot > #<byte[] [B@13abee1>
11:09 <    Anderkent > ,((do bytes) (byte-array [1 2 3]))
11:09 <   clojurebot > (. clojure.lang.Numbers clojure.core/bytes #<byte[] [B@6dd60e>)
11:09 <    Anderkent > because I'm lost
11:10 <    Anderkent > the lostest
11:10 <       beamso > i'm lost because (byte-array [1 2 3]) gives me a classcastexception
11:11 <    Anderkent > just do (byte-array (map byte [1 2 3])) , i think that was relaxed in 1.6
11:12 <      amalloy > ~def bytes
11:12 -clojurebot:#clojure- bytes: http://is.gd/VtelXI
11:13 <       beamso > bytes appears to just cast the argument to byte[] by the looks
11:13 <    Anderkent > yeah I guess I don't understand inline fuctions, if that's expected behaviour?
11:14 <      amalloy > Anderkent: no, no way is that expected
11:14 <      amalloy > i just wanted a source link to try and figure it out
11:15 <       beamso > what is expected to happen?
11:15 <      amalloy > definline is supposed to just allow (f x) to expand into a more efficient form
11:15 <      amalloy > than calling something like ((identity f) x)
11:16 <    Anderkent > beamso: they should do the same
11:16 <    Anderkent > i think it must be a compiler bug?
11:17 <      amalloy > Anderkent: i kinda doubt that. the compiler isn't even involved in the behavior you don't like, just the macroexpander
11:17 <      amalloy > or, well, the uh...function defined by the macro definline
11:18 <    Anderkent > well, what looks at the :inline meta?
11:19 <    Anderkent > ,(pprint (macroexpand (read-string (with-out-str (source bytes)))))
11:19 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: pprint in this context, compiling:(NO_SOURCE_PATH:0:0)>
11:19 <    Anderkent > blah
11:20 <      amalloy > Anderkent: :inline is looked at exclusively by Compiler/analyzeSeq
11:20 <      amalloy > but it won't be looked at in the case that's troubling you
11:20 <      amalloy > it's the non-inline version that's broken
11:23 <    Anderkent > ,clojure.pprint/pprint
11:23 <   clojurebot > #<CompilerException java.lang.ClassNotFoundException: clojure.pprint, compiling:(NO_SOURCE_PATH:0:0)>
11:23 <      amalloy > &((identity bytes) (byte-array [1 2 3]))
11:23 <      lazybot > java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Byte
11:23 <      amalloy > &((identity bytes) (byte-array (map byte [1 2 3])))
11:23 <      lazybot > ⇒ (. clojure.lang.Numbers clojure.core/bytes #<byte[] [B@2e03c8>)
11:23 <      amalloy > okay, so not a new problem in 1.6
11:23 <    Anderkent > yeah checked back to 1.2
11:24 <    Anderkent > ,(macroexpand (read-string (with-out-str (source bytes))))
11:24 <   clojurebot > #<SecurityException java.lang.SecurityException: denied>
11:24 <    Anderkent > reaaly now
11:24 <    Anderkent > anyway
11:24 <    Anderkent > running that amcroexpanded defn manually seems to work, so it must be inline-related
11:25 <    Anderkent > or hm
11:25 <    Anderkent > (. clojure.lang.Numbers clojure.core/bytes xs)
11:26 <    Anderkent > thaht symbol being namespaced is suspicious
11:26 <      amalloy > Anderkent: nah, that happens all the time
11:26 <      amalloy > in (. foo bar/baz), the compiler ignores bar
11:28 <      amalloy > Anderkent: even if i run that definline in my repl, without macroexpanding it by hand first, bytes goes back to the "expected" behavior
11:28 <    Anderkent > yeah
11:28 <    Anderkent > just found that out too
11:29 <      amalloy > so i posit that the source we're looking at for bytes is not actually the code that is running. something else redefines bytes
11:29 <      amalloy > and yet, clearly nothing does. a puzzler
11:30 <      amalloy > do the other inline functions have this problem? i don't think so
11:30 <    Anderkent > yes they do
11:30 <      amalloy > ,((do +) 1 2)
11:30 <   clojurebot > 3
11:30 <    Anderkent > oh not all
11:30 <    Anderkent > just the `definline` ones
11:30 <    Anderkent > ,(source +)
11:30 <   clojurebot > Source not found\n
11:36 <    Anderkent > bah, nodisassemble cant disassemble byte
11:36 <    Anderkent > *bytes
11:37 <    Anderkent > ah nvm im doing it wrong
11:42 <    Anderkent > hm
11:42 <    Anderkent > how does clojure decide whether to re-generate a .class file?
11:43 <      amalloy > i don't think it does that unless you call compile. but it may re-eval .clj files even if there's a .class file that supplies the functionality? i'm not sure
11:44 <    Anderkent > I edited core.clj within clojure.jar changing definline slightly then rolling that back
11:44 <    Anderkent > now it works as expected
11:44 <    Anderkent > theres a definline.class ...
11:45 <      amalloy > Anderkent: i'd be interested to see what happens if you just remove *.class from clojure.jar
11:45 <      amalloy > at that point i presume it recompiles everything
11:46 <      amalloy > i'm speculating that perhaps clojure/core$bytes.class was generated by some weird process and is stale at this point, since it contains list-manipulation code instead of the single static-method call it should have
11:50 <    Anderkent > amalloy: not that easy, because without clojure.main life is hard!
11:55 <    Anderkent > amalloy: oh. http://dev.clojure.org/jira/browse/CLJ-1227
11:59 <      amalloy > ah. and caused by http://dev.clojure.org/jira/browse/CLJ-1330, Anderkent
11:59 <      amalloy > so that makes sense sorta
11:59 <    Anderkent > Except that link says it's since 1.6.0-alpha2
11:59 <    Anderkent > i guess it's just a bad blame
--- Log closed Fri Mar 28 12:06:29 2014
--- Log opened Fri Mar 28 12:06:43 2014
12:06 -!- Irssi: #clojure: Total of 680 nicks [1 ops, 0 halfops, 0 voices, 679 normal]
12:06 -!- Irssi: Join to #clojure was synced in 20 secs
12:15 <     avshalom > anyone know if intellij cursive integrates with a debugger?
12:16 <       beamso > i've struggled to run programs inside of cursive so i've no idea
12:23 <        dbell > say I have '([:a 1] [:b 2] [:c 3] [:d 4] [:e 5])  and I want '([:a :b :c :d :e] [1 2 3 4 5])  Does anyone look at that and have an *intuitive feel* for how they'd do that with a minimum of boilerplate?
12:24 <        dbell > the smiley is \:d
12:24 <        dbell > : d
12:25 <         guns > dbell: (map vector [:a 1] [:b 2] …)
12:25 <        dbell > oooooooooh
12:26 <         guns > blew my mind too when it was introduced to me
12:26 <        dbell > that is pretty freaking slick
12:28 <       rplaca > if you really have it in a list as shown, you can
12:28 <       rplaca > ,(apply (partial map vector) '([:a 1] [:b 2] [:c 3]))
12:28 <   clojurebot > ([:a :b :c] [1 2 3])
12:42 <   SegFaultAX > rplaca: You don't need partial there, apply collects all arguments into the last arg ##(apply map vector [[:a 1] [:b 2] [:c 3]])
12:42 <      lazybot > ⇒ ([:a :b :c] [1 2 3])
12:45 <       rplaca > oh yes, of course!
12:47 <       rplaca > my mental model wanted to glue the "map vector" into one magic thing, but really vector is just an argument like any other
13:32 < yuri_niyazov > What's the status of clojureql?
13:33 < yuri_niyazov > clojureql.org seems to be a hijacked website
13:39 <   SegFaultAX > yuri_niyazov: Awesome markovs.
13:50 <         fro_ > what kind of music are you listen while you are coding? To those who likes metal and electronics I recommend to try https://www.facebook.com/TheAlg0r1thm - it's amazing mix of.
14:30 <        chare > when I run lein repl how does lein know what jvm to run? Is there a way to control that?
14:31 <         ivan > chare: set JAVA_CMD or LEIN_JAVA_CMD
14:32 <         ivan > otherwise it uses the java in the PATH
15:56 <         l3dx > how can I configure lein to use clj 1.6 when starting the repl outside a project?
16:16 <        chare > is anyone awake?
16:16 <        chare > have any of you done a speed comparision between clojure, python django, and ruby rails?
16:22 <         wink > chare: http://www.techempower.com/benchmarks/ might be worth alook
16:23 <        chare > wink wtf how is go winning?
16:23 <         wink > ask them, not me. you can clone all of the tests and run them for yourself
16:23 <         wink > they started a benchmarking spree and a lot of folks contributed
16:24 <        chare > wink when did the go runtime and optimizer get so fast?
16:24 <         wink > 1.2 probably
17:09 <         jph- > im surprised by rack-jruby
17:13 <      khaled_ > why dont you by jack ruby (sorry jokin)
17:15 <         jph- > it's interesting to see performance drop significantly on luminus... i wonder if that's to do with out of box defaults
17:17 <  ddellacosta > jph-: what are you using rack-jruby w/clojure for?  some rack-app interop stuff?
17:17 <         jph- > no no
17:18 <         jph- > im just looking at the benchmark site
17:18 <         kras > Whats wrong with this code: http://pastebin.com/WkWVY2sg
17:18 <  ddellacosta > jruby-rack I should say
17:18 <         jph- > i came from ruby, i dont like it being faster than clojure
17:18 <         jph- > heheh
17:18 <         kras > I get a stackoverflow
17:18 <  ddellacosta > jph-: ah, haha...
17:18 <         jph- > clojure was meant to be my step up in speed without having to learn Go
17:19 <         jph- > so i shake my fist at rack-jruby
17:19 <         kras > stackoverflow when I run (module_declarations zp) where zp is a zipper
17:19 <         kras > (module_declarations zp)
17:19 <  ddellacosta > kras: try using loop rather than recursing without a accumulator
17:20 <         kras > ddellacosta: As I see there is nothing to accumulate here, I just return the location in the zipper when it matches something
17:22 <  ddellacosta > kras: okay, so sorry I mentioned using an accumulator.  But clearly you are taking up a lot of space by recursing like that.  So try using loop instead.
17:25 <       yotsov > kras: you might want to play with the stack size (-Xss option on hotspot) to see if there is a value which allows your code to complete, or if you get stackoverflow even when it is maxed
17:32 <         kaw_ > The key being recur rather than loop there, I think, since a defn should already be a recursion point?
17:33 <         kras > Changing the code to use loop atleast got rid stackoverflow error but the code is still running since paste 5 mins http://pastebin.com/ugDxccAu
17:34 <  ddellacosta > kaw_: I should have been more explicit...it's the end of the day and I'm tired. :-)  But yeah, I meant loop/recur.  Great explanation of that and other techniques here: http://stackoverflow.com/questions/1662336/clojure-simple-factorial-causes-stack-overflow
17:34 <         kras > yotsov: how do I check what the stack size is currently set to? Sorry noob here
17:34 <         jph- > i remember starting clojure, thinking "when am i going to do this recursive looping stuff?"
17:35 <         jph- > they hide most of that from you
17:35 <         jph- > bastards
17:35 <  ddellacosta > kras: so, your if clause is failing?  re: stack size, you can set that in your project.clj file.
17:35 <  ddellacosta > kras: or just java args
17:35 <  ddellacosta > kras: https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L229-L230
17:36 <         kras > jph-: same here, this problem looked very trivial when I started, probably need to to get used to clojure's way of thinking
17:36 <         kras > ddellacosta: thanks a lot, will take a look
17:37 <  ddellacosta > kras: well, part of what's going on is that zipper is going to rebuild the data structure each time--it's returning immutable versions of the same thing, you know?  So if you do recursion the way you're doing it, it's going to take up a lot of space fast.
17:37 <         kras > ddellacosta: if my if clause if failing  ..... oops forgot to check the end?
17:38 <  ddellacosta > kras: I just mean, it seems like your code would be correct, but obviously it's not returning from the if condition, right?
17:38 <  ddellacosta > kras: so not sure what else it would be
17:39 <         kras > ddellacosta: indeed my if condition is failing but since I am not checking the end? here the z/next will keep the whole thing in an infinite loop I guess
17:39 <         kras > will test it and confirm
17:43 <         kras > http://pastebin.com/3EMP9L6p the following code seems to be working, atleast its returning nil
17:43 <         kras > need to refactor it a more I guess
17:44 <  ddellacosta > kras: ah, right, I didn't think about end either
18:10 <         kras > coming to the heap-size/stack size, how do I check these values interactively in the repl?
18:31 <  gfredericks > stack size could be done by creating an exception? but heap isn't easy to get a useful handle on
18:33 <  gfredericks > ,(-> (Exception.) (.getStackTrace) (count))
18:33 <   clojurebot > 37
18:34 <  gfredericks > ,(defn stack-depth [] (-> (Exception.) .getStackTrace count))
18:34 <   clojurebot > #'sandbox/stack-depth
18:35 <       beamso > 50% off clojure books at o'reilly using discount code WKCLJUR .
18:38 <  gfredericks > ,(map (fn [_] (stack-depth)) (concat (repeat 3 3) (repeat 2 2)))
18:38 <   clojurebot > (49 51 51 51 51)
18:39 <  gfredericks > ,(map (fn [_] (stack-depth)) (reduce concat (map list (range 5))))
18:39 <   clojurebot > (49 51 51 51 51)
18:40 <  gfredericks > ,(map (fn [_] (stack-depth)) (reduce #(concat %2 %1) (map list (range 5))))
18:40 <   clojurebot > (49 51 51 51 51)
18:40 <  gfredericks > huh. I figured it'd be easier to get different results
18:43 <  gfredericks > I guess the outermost map does all the stack-normalizing before it ever calls stack-depth?
18:54 <  gfredericks > ,(->> (repeatedly 5 #(repeatedly 1 stack-depth)) (reduce concat))
18:54 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: stack-depth in this context, compiling:(NO_SOURCE_PATH:0:0)>
18:54 <  gfredericks > ,(defn stack-depth [] (-> (Exception.) .getStackTrace count))
18:54 <   clojurebot > #'sandbox/stack-depth
18:54 <  gfredericks > ,(->> (repeatedly 5 #(repeatedly 1 stack-depth)) (reduce concat))
18:54 <   clojurebot > (72 69 64 59 54)
18:54 <  gfredericks > ah HA.
18:54 <  gfredericks > ,(->> (repeatedly 50 #(repeatedly 1 stack-depth)) (reduce concat))
18:54 <   clojurebot > (297 294 289 284 279 ...)
18:55 <  gfredericks > ,(->> (repeatedly 150 #(repeatedly 1 stack-depth)) (reduce concat))
18:55 <   clojurebot > (797 794 789 784 779 ...)
19:44 <       yotsov > gfredericks: stack size is governed by quantum physics: the only way to look at it changes it :)
20:02 <        cYmen > How do I activate "lisp mode" for cljs files in emacs?
20:08 <       beamso > adding clojure-mode seems to give me lisp recognition for .cljs files
20:08 <       beamso > but i use emacs prelude
20:09  *       cYmen blushes.
20:09 <        cYmen > So uh..what is emacs prelude and what is is clojure-mode and how do I add it?
20:10 <       beamso > http://batsov.com/prelude/
20:10 <       beamso > clojure-mode is in elpa
20:10 <        cYmen > elpa?
20:10 <   clojurebot > elpa is a package manager for Emacs: http://tromey.com/elpa
20:11 <        cYmen > Hm...so assuming I already have clojure-mode (since everything works for clj files) how do I activate it for cljs?
20:11 <       beamso > i'm not familiar enough with the mode to give you that answer
20:11 <       beamso > have you tried making sure you're running the most up to date version of the mode?
20:12 <        cYmen > No...
20:16 <        cYmen > I seem to have clojure-mode installed using marmalade...
20:16 <      tmciver > cYmen: generally, you add a mode hook in your ~/.emacs: http://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Hooks.html:
20:17 <      tmciver > cYmen: no wait
20:18 <      tmciver > cYmen: you add to the auto-mode-alist to have the mode turn on when you open a certain file type: (add-to-list 'auto-mode-alist '("\\.cljs$", . cljs-mode))
20:19 <      tmciver > cYmen: http://www.emacswiki.org/emacs/AutoModeAlist
20:24 <        cYmen > (add-to-list 'auto-mode-alist '("\\.cljs$" . clojure-mode)) this did the trick
20:24 <        cYmen > tmciver: thank you very much!
20:27 <      tmciver > cYmen: ah, that makes sense. You're welcome.
20:44 <    bontucode > I am new to clojure and struggling to write a construct, where in a loop a result is populated by result of a recursive call
20:44 <   jcromartie > bontucode: I'd be glad to help
20:44 <        cYmen > bontucode: Show us what you've got! :)
20:45 <   jcromartie > can you paste a snippet of code to Gist or something?
20:45 <   jcromartie > people like refheap too
20:45 <    bontucode > jcromartie: thanks
20:48 <    bontucode > https://www.refheap.com/67376
20:49 <   jcromartie > first thing: `loop` is meant to be used with `recur`
20:49 <    bontucode > jcromartie, cYmen: I would like to concat the return value of count-tuples with result vector
20:50 <    bontucode > jcromartie: realised that, but not sure the best place to use recur, as it should be the last line, I tried to put a (recur result) at the end
20:50 <   jcromartie > ~for
20:50 <   clojurebot > for is not used enough
20:50 <   jcromartie > oh, that's not what I thought clojurebot would say :)
20:50 <      augustl > haha
20:50 <   jcromartie > for is not a loop!
20:50 <      augustl > I concur, I use loop/recur too much..
20:51 <   jcromartie > bontucode: `for` is a comprehension which returns a seq, not a looping construct like in java/C
20:51 <    bontucode > jcromartie: so I will replace it with a map and range
20:51 <   jcromartie > bontucode: sorry I don't quite grok it, but what's the intended input/output here
20:52 <        cYmen > bontucode: Basically it works like this: (loop [some variables] ........ (recur newvaluesforvariables))
20:53 <    bontucode > jcromartie: Trying to solve this problem: http://community.topcoder.com/stat?c=problem_statement&pm=13016&rd=15846 (I am not good at clojure and dynamic programming both), but if intended outcome is for the range between low to high, it should return me sequence of all combinations of size K
20:53 <   jcromartie > also it looks like n is not used
20:53 <   jcromartie > OK that's helpful thanks
20:54 <   jcromartie > yeah, it can be big shift from procedural to functional
20:55 <    bontucode > jcromartie: Sorry, sequence of size "N".. I am just at the first stage solution of generating all sequences of size N, next will be a filtering based on the GCD of the sequence that is equal to K
20:56 <   jcromartie > sure
20:57 <   jcromartie > P.S. docstrings are good, maybe start over with this to help: https://www.refheap.com/67377
20:58 <   jcromartie > now nobody can be confused about what your function is supposed to do :)
20:58 <        cYmen > well, it's still called "count-tuples" :p
20:58 <   jcromartie > yeah that's straight from the page
20:59 <   jcromartie > it is supposed to return the count, updated docstring :P
20:59 <    bontucode > jcromartie: point noted :)
21:00 <   jcromartie > I think that the point of this exercise is likely not, in fact, to compute all of the sequences…
21:01 <    bontucode > jcromartie: yes at this stage I am just trying to generate set of sequences
21:01 <        cYmen > bontucode: Try a simple helper first. Write a function that takes a sequence of integers and builds all possible sequences of length n from these integers.
21:02 <      ornicar > hello, what's the @ in clojure? Like in `(::http/response-stream @http-agent)`
21:02 <        cYmen > so (your-function [1 2 3] 2) -> [[1 1] [2 2] [3 3] [1 2] [2 1] [1 3] [3 1] [2 3] [3 2]]
21:02 <      ornicar > it's very difficult to find the answer to this question on Internet.
21:02 <        cYmen > ornicar: that's used for atoms
21:03 <   jcromartie > not just atoms
21:03 <   jcromartie > ornicar: it means "dereference"
21:03 <        cYmen > http://clojure.org/atoms
21:03 <      ornicar > ok, thank you, that I can google
21:03 <   jcromartie > i.e. for a reference type (atom, agent, ref, future) return the value
21:03 <      ornicar > makes sense!
21:03 <        cYmen > ornicar: listen to him he knows more than me! :)
21:03 <      ornicar > while we're at it... in the same expression, what's ::
21:03 <   jcromartie > @foo expands to (clojure.core/deref foo)
21:03 <    bontucode > cYmen: on the job
21:04 <      ornicar > I know :foo is the symbol foo, but what is ::foo ?
21:04 <      ornicar > the symbol :foo ?
21:04 <   jcromartie > ,::foo
21:04 <   clojurebot > :sandbox/foo
21:04 <   jcromartie > ,(println ::foo)
21:04 <   clojurebot > :sandbox/foo\n
21:04 <   jcromartie > ornicar: it expands to a namespaced keyword in the current namespace
21:05 <      ornicar > ok, thank you very much!
21:05 <   jcromartie > useful for when you have maps that may have keys from different places
21:05 <      ornicar > I naively thought keys were global
21:06 <      ornicar > but they're namespaced, that's great
21:06 <   jcromartie > well keywords are just values
21:06 <        cYmen > ...
21:06 <        cYmen > Any my head is like "keywords cannot be namespaced...keywords are MAGIC!"
21:06 <   jcromartie > it's just "namespaced" in the sense that it has a namespace part and a name part
21:06 <   jcromartie > ,(name ::foo)
21:06 <   clojurebot > "foo"
21:07 <   jcromartie > ,(namespace ::foo)
21:07 <   clojurebot > "sandbox"
21:07 <        cYmen > ,(namespace :foo)
21:07 <   clojurebot > nil
21:07 <   jcromartie > but you could just as easily define :sandbox/foo anywhere else
21:07 <   jcromartie > ,(namespace :bar/foo)
21:07 <   clojurebot > "bar"
21:08 <        cYmen > I have no idea what this means. :p
21:08 <  gfredericks > $google clojure overloads namespace
21:08 <      lazybot > [Operator Overloading in Clojure - Stack Overflow] http://stackoverflow.com/questions/1535176/operator-overloading-in-clojure
21:08 <  gfredericks > $google gfredericks clojure overloads namespace
21:08 <      lazybot > [gfredericks/hacklog] http://hacklog.gfredericks.com/
21:09 <  gfredericks > that'll work
21:09 <  gfredericks > cYmen: ^
21:10 <   jcromartie > the difference is that a namespaced var is *defined* in a namespace, i.e. clojure.core/map is a var in clojure.core, named "map" and it's value is the map function
21:10 <        cYmen > gfredericks: What is a PSA?
21:10 <  gfredericks > clojurebot: PSA is a public service announcement
21:10 <   clojurebot > In Ordnung
21:10 <   jcromartie > but a namespaced keyword is just a *value*, and the namespace/name are really just a convention
21:10 <   jcromartie > tl;dr don't worry about it
21:10 <  gfredericks > they're two concepts that are technically independent but still have a lot of overlap
21:34 <       futile > Is there a lib for faking out the file system in Clojure?
21:39 <         clgv > futile: just build functions in your application through which you access files then you can mock those functions. you probably need them anyway
21:40 <  gfredericks > using raynes/fs would enable that presumably
21:40 <       futile > I see.
21:40 <       futile > Thanks.
21:40 <       Raynes > Faking out the file system?
21:40 <       Raynes > Raynes fs would enable that?
21:40 <       Raynes > DO EXPLAIN
21:40 <  gfredericks > with-redefs
21:40 <       Raynes > Fair enough good sir.
21:40 <       Raynes > Fair enough.
21:41 <         clgv > Raynes: somehow you sound like a bot today. too much coffee?
21:41 <         clgv > ;)
21:41 <       Raynes > clgv: Abscessed tooth and massive associated infection causing the right side of the face to swell to the point of nearly shutting my right eye.
21:41 <       Raynes > But close!
21:42 <         clgv > Raynes: ouch! get well soon.
21:42 <       futile > It seems strange that java.io.File/createTempFile takes a prefix and a suffix, and even more so that it doesn't even insert a "." for you between them.
21:42 <       Raynes > futile: fs implements temporary file and directory creation itself.
21:43 <       futile > Raynes: excellent
21:43 <         clgv > futile: dots are not that important except from when you are on windows ;)
21:43 <       futile > clgv: touche
21:47 <  gfredericks > reiddraper: I'm about to write a generator for characters that don't shrink, so that strings/keywords can be built on that; would that be a reasonable default behavior for test.check?
21:47 <  gfredericks > shrinking :abc to :abb doesn't feel helpful to me in a lot of use cases
21:48 <  gfredericks > we could also do it just for keywords (not strings)
21:49 <         clgv > gfredericks: random permutations and vectors of distinct numbers of a given range would be great as well^^
21:50 <   reiddraper > gfredericks: have you seen the noshrink function?
21:50 <  gfredericks > nope!
21:50 <         clgv > gfredericks: I guess an explicit generator for those would be more efficient compared to generating arbitrary integer vectors and checking them via a predicate
21:50  * gfredericks scuttles over to the source code
21:51 <       futile > Raynes: you should set the docs for FS to link to the source on github.
21:51 <       Raynes > I should get rid of the docs.
21:52 <       futile > Raynes: why?
21:52 <  gfredericks > reiddraper: ok, this helps a lot; is probably good enough
21:52 <       Raynes > Because the code is pretty good documentation.
21:52 <         clgv > :/
21:52 <       futile > Raynes: People like me prefer good docs.
21:52 <       Raynes > I don't see how a list of functions is 'good docs'
21:53 <         clgv > user stories of using the lib are good docs ;)
21:53 <       Raynes > There is literally no difference between scanning through the web API docs than just scanning through the actual source file itself
21:53 <       futile > ok
21:53 <       Raynes > That's my only point.
21:54 <       futile > Why is there both https://clojars.org/fs and https://clojars.org/me.raynes/fs ?
21:55 <       Raynes > The former is prior to me using groupids for my projects.
22:00 <       futile > Ah.
22:24  * gfredericks just proposed mapply to prismatic/plumbing
22:51 <        muhoo > fwiw, when i want api docs in html format, i just run marginalia on the codebase
22:52 <        muhoo > makes it nice 'n purty
22:53 <     katratxo > muhoo: it just works?
22:53 <        muhoo > katratxo: yeah, you can run it on someone else's codebase
22:53 <        muhoo > no api docs? no problem. bang, api docs.
22:53 <     katratxo > muhoo: nice!
22:53 <        muhoo >  http://fogus.me/fun/marginalia/ fyi
22:55 <        muhoo > actually, better link: https://github.com/gdeer81/lein-marginalia
22:55 <  gfredericks > aggressive shrinking idea: tuple should first try shrinking everything at once
22:59 <        muhoo > lol fogus "Here is a snowman ☃"
23:01  * gfredericks gives up trying to modify the monadic code in test.check
23:02 <          cbp > stumped by a CA? :-p
23:05 <        twem2 > irc
23:11 <      TravisD > With lein, is there an easy way to get a REPL outside of a project with dependencies? I want to use Incanter to prod some data, but i'm not ready to start a project
23:11 <  snowstalker > TravisD see lein-exec
23:11 <  technomancy > TravisD: you can put them in a profile and run `lein with-profile +incanter repl`
23:11 <      TravisD > Ah, cool, thanks :)
23:12 <      TravisD > (inc technomancy)
23:12 <      lazybot > ⇒ 103
23:16 <      TravisD > profiles are merged into the project config with (partial merge-with into), or something?
23:18 <  technomancy > TravisD: it's a bit more nuanced than that, but that understanding should get you pretty far
23:18 <      TravisD > :)
23:28 <  gfredericks > clojurebot: it is a bit more nuanced than that, but that understanding should get you pretty far
23:28 <   clojurebot > Ok.
23:29 <     hyPiRion > clojurebot: is?
23:29 <   clojurebot > is is commutative
23:29 <     hyPiRion > clojurebot: it?
23:29 <   clojurebot > it is a bit more nuanced than that, but that understanding should get you pretty far
23:29 <      TravisD > clojurebot: it is a?
23:29 <   clojurebot > Huh?
23:29 <      TravisD > :(
23:30 <  gfredericks > ~it
23:30 <   clojurebot > it is for clojure.pprint/cl-format :)
23:30 <     hyPiRion > heh
23:30 <  gfredericks > ~it
23:30 <   clojurebot > it is for clojure.pprint/cl-format :)
23:30 <  gfredericks > ~it
23:30 <   clojurebot > it is a lie
23:30 <  gfredericks > ~it
23:30 <   clojurebot > it is greek to me
23:30 <  gfredericks > ~it
23:30 <   clojurebot > it is a bit more nuanced than that, but that understanding should get you pretty far
23:31 <  gfredericks > "We're a small startup hacking together to try to build the first real life clojurebot."
23:35 <     hyPiRion > gfredericks: "We're a startup trying to understand how clojurebot works"
23:36 <  gfredericks > "We're a startup trying to automate the process of bringing a startup from pre-concept to IPO."
23:36 <     hiredman > clojurebot: clojurebot is the cloud
23:36 <   clojurebot > Roger.
23:39 <  gfredericks > we're a marketing-only startup trying to find ways to convince people to give us money without providing any goods or services
23:39 <     hiredman > I want to take slogans from those ibm adds you see at airports, run them through a parts of speech tagger, replace the first noun with clojurebot, and then randomize the rest of the nouns
23:39 <  technomancy > yes please
23:39 <     hiredman > then feed all that back in to clojurebot
23:40 <    Anderkent > TravisD: I also like lein try: lein try <artifact-name> <version>?
23:40 <    Anderkent > it'll find the by defualt latest release of the artifact and give you a repl with it
23:40 <     hiredman > clojurebot: clojurebot |queues| for elephants
23:40 <   clojurebot > Ok.
23:40 <      TravisD > Anderkent: cool, that's pretty light weight
23:40 <        malyn > gfredericks: Here's your pitch video -- https://www.youtube.com/watch?v=2YBtspm8j8M
23:40 <      TravisD > can you load multiple artifacts?
23:41 <    Anderkent > no, but it should be pretty easy to add
23:41 <    Anderkent > pull request go! :P
23:41 <      TravisD > haha
23:41 <      TravisD > go go pull request?
23:41 <    Anderkent > actually
23:41 <    Anderkent > i ilied
23:41 <    Anderkent > you can
23:41 <      TravisD > oh hurray
23:41 <  technomancy > lein-try is useful if you don't want to store the dependency set in your profiles file on disk
23:42 <      TravisD > yeah, for me I think it's actually better to have a profile. There are a few dependencies that I often want to use
23:42 <  technomancy > seems like it's intended for one-offs primarily
23:42 <  technomancy > hehe https://twitter.com/sorenmacbeth/status/449412230803517441
23:42 <  gfredericks > lein-try: for when the latency of going to disk is too high for the dependencies you need
23:42 <      TravisD > heh
23:42 <      saolsen > anybody have an examply of using om with canvas drawing?
23:43 <  gfredericks > saolsen: I've been wondering about SVG; haven't done any searching though
23:44 <        malyn > saolsen: There is at least one SVG example out there, but I haven't seen anything for Canvas (doesn't mean it doesn't exist though).
23:44 <      saolsen > yeah, svg could be cool. I found this https://github.com/facebook/react-art
23:45 <        malyn > saolsen: SVG and Om https://github.com/kovasb/yantra/blob/master/src/cljs/yantra/graphics.cljs
23:45 <    Anderkent > gfredericks: I usually use it when I can't be bothered looking for version strings
23:48 <  gfredericks > I can't come up with a good joke for that except to say that I'm imagining somebody sitting in a fast food restaurant cramming clojure libraries into his mouth
23:48 <  gfredericks > (and not bothering looking for version strings of course)
23:51 <    bontucode > cYmen: Managed to generate all sub-sequence of length n for a given collection of numbers here. It will be great if you could review it: https://www.refheap.com/67402
23:53 <     Bbarrett > i am trying to create a java file object to be passed as a parameter to a function
23:53 <     Bbarrett > what is the best way to do that?
23:54 <          cbp > (File. "foo") ?
23:54 <      TravisD > Related to my earlier questions, is there a way to get cider running in a directory without creating a lein project? After working in the terminal for a little bit with nREPL, I'm realizing how much I miss cider :(
23:54 <     Bbarrett > thanks
23:54 <    bontucode > cYmen_: Managed to generate all sub-sequence of length n for a given collection of numbers here. It will be great if you could review it: https://www.refheap.com/67402
23:56 <      jcidaho > TravisD, just do M-x cider - localhost & port - should spin up a new repl
23:57 <     Bbarrett > I am trying to pass a file parameter to a function and get it's size using the .length method, but it returns 0 no matter what
23:57 <     Bbarrett > thought I was properly defining it as a file, but not sure
23:57 <      TravisD > jcidaho: do I have to start nREPL manually that way?
23:57 <  technomancy > TravisD: the current directory will be wherever you jacked in from
23:58 <      TravisD > technomancy: Ah, and can I get it to use include a lein profile when it starts?
23:58 <  technomancy > TravisD: cider-server-command
23:58 <  technomancy > should do it
23:59 <          cbp > Bbarrett: If (type my-file) returns File then it's a file, though it may not exist
23:59 <     Bbarrett > thanks
23:59 <     Bbarrett > I will check it out
--- Day changed Sat Mar 29 2014
00:00 <      TravisD > technomancy: Fantastic :)
00:00 <      TravisD > Is it a bad idea to permanently modify my cider-server-command?
00:00 <        malyn > Bbarrett: You might check out the fs library as well -- https://github.com/Raynes/fs
00:01 <     Bbarrett > ah, thanks, I definetely will
00:01 <     Bbarrett > I have heard good things
00:08 <  technomancy > TravisD: depends what you do
00:09 <      TravisD > technomancy: I might make another function called incanter-jack-in which modifies cider-server-command, jacks in, and then reverts it
00:09 <      TravisD > or something.
00:10 <        gtrak > TravisD: it's ok, emacs is accretion of hacks.
00:13 <        gtrak > ' the formation of planets and other bodies by collection of material through gravity;'
00:13 <        gtrak > is a fitting analogy
00:26 <    Anderkent > Anyone familar with clojure improvement process? When shuold I expect http://dev.clojure.org/jira/browse/CLJ-1330 to land - weeks, months, longer?
00:29 <       Bronsa > Anderkent: who knows. if you can vote the ticket so it will hopefully get more visibility
00:31 <        gtrak > I'd expect it to get in to 1.7
00:31 <        gtrak > it was a little late for 1.6
00:33 <        gtrak > there's only 3 bugs with 'critical' priority, and that's one of them.
00:42 <    bontucode > Could some one review my solution for a  top-coder problem: http://community.topcoder.com/stat?c=problem_statement&pm=13016&rd=15846
00:43 <    bontucode > https://www.refheap.com/67435
00:43 <    bontucode > It fails for the sample input no 3 that's on the problem page
00:43 <    bontucode > with stackoverflow
00:44 <    bontucode > I may need to have a interative solution for create-sequence instead of a recursive one
00:44 <   jcromartie > bontucode: you may be able to make it recursive, but not like that
00:44 <   jcromartie > you can recur forever with `recur`
00:45 <   jcromartie > calling (create-seq) within create-seq itself consumes stack
00:45 <   jcromartie > Clojure makes tail-recursion explicit
00:45 <   jcromartie > or rather it requires it to be explicit, to get any benefit
00:46 <    bontucode > jcromartie: so is using loop, recur like a iteration? or is it actually a recursion that I dont understand well
00:47 <   jcromartie > you can use recur without loop
00:48 <   jcromartie > ,((fn [x] (if (> x 0) (recur (dec x)) "zero!")) 10)
00:48 <   clojurebot > "zero!"
00:49 <   jcromartie > also (if x true false) may as well be just x
00:49 <    Anderkent > jcromartie: (boolean x) surely
00:49 <   jcromartie > i.e.  (filter #(= (gcd-polynom x) k) …)
00:49 <    Anderkent > ah nvm didnt see the filter context
00:49 <   jcromartie > Anderkent: technically I suppose but in this case...
00:50 <    Anderkent > yeah sorry
00:50 <   jcromartie > er that is irc://irc.freenode.net:6667/#(= (gcd-polynom %) k)
00:50 <    Anderkent > :D
00:50 <    bontucode > jcromartie: totally, that was silly
00:51 <     sdegutis > Raynes: fs/copy ignores my file's permissions, is there a way to make it use the same permissions?
00:51 <       Raynes > Fork fs and send me a pull request :P
00:52 <     sdegutis > Seriously?
00:52 <       Raynes > Well, if it doesn't adhere to permissions then I think so.
00:52 <     sdegutis > Hmm, it's using io/copy, I wonder if that even takes permissions into account.
00:53 <     sdegutis > does not appear so -- http://clojure.github.io/clojure/clojure.java.io-api.html#clojure.java.io/copy
00:54 <    Anderkent > i don't think it's even doable on java 6
00:55 <    Anderkent > on java 7 i think you want Files.copy(Path, Path, COPY_ATTRIBUTES)
00:57 <     sdegutis > Oh wow.
00:57 <     sdegutis > That's fine, I can just use fs/chmod
00:58 <     sdegutis > Who'da thunkit that correctly copying file permissions would be the hardest part of this utility.
00:59 <    Anderkent > right, but you can't really trust that, race conditions galore
00:59 <     sdegutis > Or at least most tedious.
01:00 <     sdegutis > Besides permissions, this thing is pretty much done :D
01:00  *    sdegutis so excite
01:00 <        gtrak > much permit
01:01 <        gtrak > i had the same problem trying to unzip files with java
01:01 <    bontucode > jcromartie: I am not very clear on how to use recur in this situation. I need to update the "result" based on the output of the recursion, I may still be thinking of recur as actual recursion. could you clarify here please?
01:01 <     Bbarrett > what is the best way to search for a sub-string within a string in clj
01:01 <    Anderkent > goddamnit
01:01 <    Anderkent > ctrl-cing gpg password prompt messes your terminal up *real good*
01:01 <     Bbarrett > .contains is only for maps or vectors right?
01:01 <          Vfe > For a very frequently called function(potentially tens of thousands of times a minute) is there any appreciable performance different between if and cond?
01:01 <     Bbarrett > or contains? rather
01:01 <    Anderkent > Bbarrett: maps and sets really, vectors i'd call it iffy
01:02 <     Bbarrett > okay
01:02 <        gtrak > Vfe: cond is if in the macroexpansion.
01:03 < justin_smith > Vfe: case can be much faster than cond though
01:03 <      jonasen > Bbarrett: (re-find #"bar" "foobar")?
01:04 <     Bbarrett > ahh
01:04 < justin_smith > (direct jumps based on result's identity vs. call / jump / call / jump ...
01:04 < justin_smith > )
01:05 <          Vfe > Thanks for the info :) Trying to see if I can get server usage % down a bit and there’s really no big things in profiling, so im down to optimizing the small stuff if it makes sense
--- Log closed Sat Mar 29 01:10:50 2014
--- Log opened Sat Mar 29 01:11:07 2014
01:11 -!- Irssi: #clojure: Total of 776 nicks [1 ops, 0 halfops, 0 voices, 775 normal]
01:11 -!- Irssi: Join to #clojure was synced in 20 secs
01:11 <     sdegutis > What are the file-permission workarounds in Clojure/Java?
01:12 <      amalloy > work...arounds? like, something more devious than just setting correct file permissions?
01:12 <     sdegutis > For when copying files
01:12 <      amalloy > Anderkent: i know Raynes and ninjudd both had it working on their macs at geni
01:13 <          Vfe > :Anderkent I have it working as well, though I honestly can’t tell you what I did forever ago O.o
01:14 <     sdegutis > Oh wait, I'm apparently using Java 7, so I can just use java.nio.file.StandardCopyOption/COPY_ATTRIBUTES
01:14 <    Anderkent > sdegutis: exec cp file other-file?
01:14 <    Anderkent > :D
01:15 <     sdegutis > Anderkent: that's not a half bad idea either actually
01:15 <  gfredericks > I think I just started a twitter fight about CLJS numerics
01:19 <     sdegutis > ping
01:23 < justin_smith > ,(apply str (map char [112 111 110 103]))
01:23 <   clojurebot > "pong"
01:23 <     sdegutis > :)
01:24 <    bontucode > jcromartie: I am still struggling with the recur for a bottom approach of result building, I read the docs, cannot yet fit, it will be great if you can show an example of working with collections
01:24 < justin_smith > bontucode: you can use recur where you would usually use a call to the same function
01:25 <      AmandaC > KSP
01:25 < justin_smith > as long as it is in a "tail position"
01:25 <      AmandaC > er, ignore that
01:25 < justin_smith > clojure will tell you if it is not in a tail position
01:27 <    bontucode > justin_smith: I am trying to convert create_seq method here (https://www.refheap.com/67435) to use recur. The recursion call is not at a tail position
01:27 < justin_smith > then you need to add arguments so that the extra work after that call is carried in an accumulator
01:28 < justin_smith > such that the recur can be at the tail
01:28 < justin_smith > this would also be true in a lang with TCO
01:28 <      amalloy > bontucode: that is not really an algorithm that is amenable to tail recursion
01:31 <    bontucode > amalloy: you mean, I cannot build the results in a bottom up fashion?
01:31 <  gfredericks > I'm thinking of trying to make this fancier, maybe via nrepl middleware: https://github.com/georgejahad/debug-repl
01:32 <  technomancy > gfredericks: how would it function as a middleware?
01:33 <  gfredericks > technomancy: it wouldn't be just middleware; but maybe the middleware could be used for setting the context of the repl?
01:33 <  gfredericks > letting you bounce around your breakpoints
01:33 <  technomancy > ah, multiple sessions or something
01:33 <  gfredericks > yeah
01:33 <  technomancy > a session multiplexer
01:34 <  gfredericks > fo sho
01:34 <  technomancy > cool beans
01:35 <  technomancy > http://p.hagelb.org/make-it-sew.gif
01:47 <        locks > oh god
01:48 <    bontucode > (map (fn [x] [x]) (range 3))
01:48 <    bontucode > ,(map (fn [x] [x]) (range 3))
01:48 <   clojurebot > ([0] [1] [2])
01:48 <   jcromartie > ,(map vector (range 3))
01:48 <   clojurebot > ([0] [1] [2])
01:48 <    bontucode > ,(map #([%]) (range 3))
01:48 <   clojurebot > #<ArityException clojure.lang.ArityException: Wrong number of args (0) passed to: PersistentVector>
01:49 <      amalloy > bontucode: #([%]) is (fn [x] ([x])), not (fn [x] [x])
01:50 <    bontucode > amalloy: right, so how to compress it?
01:50 <      amalloy > bontucode: (fn [x] [x]) is also vector, as jcromartie pointed out
01:50 <    bontucode > aah, got it, thanks
01:50 <    bontucode > yes, I missed that earlier, thnx
01:50 <      amalloy > but like...another answer is: don't. who cares about a few bytes
01:50 <      amalloy > write something legible, not something short
01:50 <        locks > ^
01:53 <    bontucode > amalloy: true
01:57 <    bontucode > what is the best way to approach this problem of generating sequence of length n, from the given list of numbers ?
02:06 <  michaniskin > (take n (cycle list-of-numbers)) ?
02:07 <   jcromartie > bontucode: well maybe reduce it to the mathematical constructs first
02:08 <   jcromartie > bontucode: also worth noting: you have your arg lists and doc strings backwards
02:09 <   jcromartie > it goes (defn name doc-string? [params] ...)
02:09 <   jcromartie > ,(do (defn foo "bar" []) (doc foo))
02:09 <   clojurebot > "([]); bar"
02:10 <   jcromartie > ,(do (defn foo [] "bar") (doc foo))
02:10 <   clojurebot > "([]); "
02:11 <    bontucode > michaniskin: sorry, need to generate all sequence of length n from the given list of numbers
02:12 <    bontucode > jcromartie: thx
02:12 <   jcromartie > bontucode: how about starting as simple as possible: write a function that returns the *next* sequence
02:13 <    bontucode > jcromartie: what is *next* sequence?
02:14 <   jcromartie > asterisks for *emphasis*
02:14 <        TimMc > What is *emphasis*?
02:14 <   jcromartie > :P
02:14 <        TimMc > ,clojure.core/*emphasis*
02:14 <   clojurebot > #<CompilerException java.lang.RuntimeException: No such var: clojure.core/*emphasis*, compiling:(NO_SOURCE_PATH:0:0)>
02:15 <        TimMc > how do I english
02:15 <    bontucode > jcromartie: so what do you mean by next sequence? if input is [1 2 3] what should be the expected output?
02:16 <        ptcek > Is OpenJDK not recommended for Clojure? Any recent article about running on OpenJDK out there?
02:16 <   jcromartie > so if low = 0 and high = 1, and n = 1, then the selection that follows [0] is [1]
02:17 <   jcromartie > for n = 2, it goes (0 0) (0 1) (1 0) (1 1) right?
02:19 <   whodidthis > man, anyone know if fnhouse is close to being published on clojars
02:20 <        gtrak > ptcek: I use openjdk all the time, it's fine.
02:21 <        gtrak > openjdk 7 and 8 are barely different from the oracle one.
02:21 <        gtrak > 6 works fine, too.
02:22 <   jcromartie > bontucode: also the mathematical/combinatorics term for this is "selections
02:26 <    bontucode > jcromartie: right. so the mathematical construct I had started with was,  seq(N) = {seq(N-1), i}, for i = 0 to N
02:27 <    bontucode > and to implement that I was using a bottom up building approach, to add the result of seq(N-1) and i.
02:27 <   jcromartie > ok, and the problem is that's not compatible with tail recursion
02:27 <   jcromartie > you could use laziness to work around that
02:28 <   jcromartie > but I don't know how (in)efficient that might be
02:29 <    bontucode > jcromartie: to start with, if it doesn't blow up with stackoverflow, I will consider myself on the next stage
02:30 <    Anderkent > you want to make it tail recursive then; that usually involves adding an accumulator
02:31 <        ptcek > gtrak: thanks. evaluating my posssibilities on BSD and oracle doesn't seem as good option there...
02:32 <        gtrak > ptcek: I read somewhere you could run the oracle jdk with linux compat, at least on freebsd
02:32 <  gfredericks > you can implement unbounded channels in core.async by replacing (>!! ch x) with (go (>!! ch x)) :)
02:32 <  gfredericks > >! for the second one, rather
02:33 <    Anderkent > oh, it's not just not tail-recursive, it branches out; not as simple as adding an accumulator then
02:33 <    Anderkent > or not, misread that code
02:33 <   jcromartie > I mean correct me if I'm wrong, but it's basically lexicographic ordering
02:34 <        ptcek > gtrak: I've seen this, but why to bother if OpenJDK is well supported and works... :)
02:35 <        gtrak > ptcek: meh :-), everything has tradeoffs
02:40 <     sdegutis > ,(->> (update-in (vec (->> 11 (* (inc 11)) (iterate dec) (take 11) (reverse) (take 1) (first) (range 111) (take (inc 1)) (map char) (reverse) (partition (inc 1) 1) (cycle) (take (inc 1)))) [1] reverse) (flatten) (apply str))
02:40 <   clojurebot > "poop"
02:41 <  gfredericks > sdegutis: playing with a string obfuscator?
02:42 <   jcromartie > now write something that takes a string and returns code like that
02:42 <     sdegutis > gfredericks: nope just taking a mental break from work
02:42 <  gfredericks > go model this in core.logig
02:42 <  gfredericks > logic
02:42 <     sdegutis > I tried to use only the digit 1
02:42 <  gfredericks > coreo.logico
03:01 <       rhg135 > hello everyone, I can't for the life of me figure out why outside a for loop is in a workerthread but inside it's a nrepl thread, https://www.refheap.com/67531
03:03 <  gfredericks > rhg135: laziness probably
03:03 <      amalloy > indeed
03:03 <     hyPiRion > yes
03:03 <       rhg135 > gfredericks: oh duh
03:03  * gfredericks feels affirmed
03:03 <     hyPiRion > rhg135: replace `for` with `doseq`
03:03  *      rhg135 thought he understood laziness
03:03 <       rhg135 > no i need results
03:03 <  gfredericks > doall
03:03 <        gtrak > rhg135: wrap it in doall
03:03 <       rhg135 > ill force it
03:03 <       rhg135 > mhm
03:03 <  gfredericks > or (doto dorun) or prn or
03:03 <       rhg135 > thx for waking my senses
03:03 <      amalloy > you need some way to actually get the value out of all those fork calls
03:03 <        gtrak > or you could close over Thread/currentThread outside of the for :-)
03:03 <        gtrak > depending on what you want.
03:04 <       rhg135 > amalloy: fork returns a future
03:05 <       rhg135 > the dorun works and i don't need lazyness
03:05 <        gtrak > dorun will lose the head.
03:05 <        gtrak > and return nil
03:06 <  gfredericks > (throw (Exception. "Cannot find head!"))
03:07 <       rhg135 > oops
03:07 <       rhg135 > i meant doall which is what i used
03:08 <       rhg135 > actually i mapv'ed a fork! private function
03:08 <       rhg135 > more concise imo
03:37 <       conner > anyone know a good way to be able to write in character literals when using paredit.. while still maintaining "\" as paredit escape?
03:37 <       conner > (in emacs)
03:44 < justin_smith > conner: C-q \
03:45 < justin_smith > C-q and C-w are my two bits of "get out of jail free" in paredit, personally
03:47 <       conner > justin_smith: thanks!
03:48 < justin_smith > C-w is combined with C-space to set mark, of course
03:48 <       conner > justin_smith: doing some pretty silly things with characters for an icon font right now: https://cloudup.com/cf9yRZzk5vE :P
03:51 < justin_smith > nice
03:58 <       bbloom > ,(deftype MutBox [^:unsynchronized-mutable x])
03:58 <   clojurebot > sandbox.MutBox
03:58 <       bbloom > ,(.x (MutBox. 123))
03:58 <   clojurebot > #<IllegalArgumentException java.lang.IllegalArgumentException: No matching field found: x for class sandbox.MutBox>
03:59 <       bbloom > isn't that supposed to work?
03:59 <       bbloom > what am i doing wrong...
03:59 <  gfredericks > ,(get "abc" -0.99)
03:59 <   clojurebot > \a
03:59 <      dnolen_ > bbloom: no, mutable fields cannot be accessed outside
04:00 <       bbloom > dnolen_: ah ok. is there a way to force mutable fields to be public? i'd like to have a small test case to work with (trying to get my interpreter to handle protocols, etc which leverage public mutable fields for the method cache table)
04:01 <       Bronsa > bbloom: no, you neet to have set/get methods
04:02 <       Bronsa > need*
04:02 <       bbloom > ,(set! (.__methodImplCache (fn [])) (clojure.lang.MethodImplCache. nil nil))
04:02 <   clojurebot > #<MethodImplCache clojure.lang.MethodImplCache@12c9015>
04:02 <       bbloom > i guess that'll do for my test case :-P
04:03 <        dbell > one place I've been spoiled w/clojure is that immutable data means we don't really need to care about passing object references vs passing the actual object, as neither should change
04:03 <        dbell > but now I'm dealing w/some core.async stuff and I'm realizing I don't know exactly how to handle this
04:03 <        dbell > if i'm passing channels around to multiple places, do the channels get multiplied?
04:04 <  gfredericks > channels are stateful objects; if you don't do any kind of explicit copying, you will end up with multiple references to the same object
04:04 <  gfredericks > which is exactly how the consumer and producer end up looking at the same channel
04:04 <  gfredericks > or multiple consumers/producers
04:05 <        dbell > so, (let [c chan] (map (fn [n] {:num n :chan c}) (range 5))
04:05 <        dbell > wouldn't copy c everywhere, just the ref?
04:05 <  gfredericks > right
04:05 <  gfredericks > just one channel happening there
04:05 <        dbell > awesome, thank you
04:06 <  gfredericks > dbell: the identical? function can help sanity check these kinds of things
04:06 <        dbell > ,(doc identical?)
04:06 <   clojurebot > "([x y]); Tests if 2 arguments are the same object"
04:06 <        dbell > ah
05:00 <       cYmen_ > hm...
05:01 <       cYmen_ > I just tried adding env usage to my project but it seems the values are all nil.
05:01 <       cYmen_ > Is there something I need to do when I want them set within cdier?
05:01 <       cYmen_ > cider
05:03 <       cYmen_ > Do I have to select the profile somehow?
05:12 <     craigbro > maybe restart?
05:25 <       cYmen_ > Don't know...seems to not work from the console either
05:26 <        DomKM > Anyone know if there is a core.reducers implementation of partition-all? I want to process a large file in chunks.
05:26 <       cYmen_ > lein with-profile dev ring server <- this should work, right?
05:27 <      llasram > nope
05:27 <      llasram > +dev
05:27 <      llasram > just `dev` means "only the :dev profile"
05:27 <       cYmen_ > still all nil
05:28 <      llasram > nb that the default :default includes :dev anyway though
05:28 <       cYmen_ > well crap I must have set it up wrong
05:29 <       cYmen_ > I can access the values with (env :somename), right?
05:30 <       cYmen_ > and set them using :env {:somename "foo"}, correct?
05:34 <         Luca > irssi -n keppy
05:34 <         Luca > exit
05:37 <      llasram > DomKM: Not a stand-alone one I'm aware of.  I've got some stuff in parkour I'm actually about to split out into a library named something like `reduxsirs`
05:40 <      llasram > Hmm, `partition-all` though -- I was thinking `partition-by`.  Interesting.  Just as tricky, but for different reasons!
05:41 <      TravisD > What was the emacs variable to customize the command executed by cider-jack-in? I can't remember :(
05:42 <        DomKM > llasram: Cool. I think I need partition-all, not by, though I do see you have distinct here which is also useful for me. Thanks.
05:42 <  technomancy > TravisD: M-x apropos-variable cider command
05:43 <      llasram > DomKM: Well, be careful with the `distinct` -- it does removes only *adjacent* duplicates
05:43 <      TravisD > technomancy: That only seems to show cider-switch-to-repl-command
05:43 <      llasram > DomKM: (because this is intended for a sorted MapReduce context)
05:43 <        DomKM > llasram: Thanks for the warning. I saw that and it's actually perfect for my usecase.
05:43 <  technomancy > TravisD: sorry, cider.*command
05:43 <      TravisD > oh weird. After jacking in the variable shows up
05:44 <      TravisD > but not before
05:44 <       cYmen_ > oh what the hell
05:44 <  technomancy > TravisD: oh sure; if cider isn't loaded yet
05:44 <       cYmen_ > can anybody give me hint on how to debug where these profile settings are getting lost?
05:44 <      TravisD > weird that some variables are there but not all
05:45 < justin_smith > cYmen_: maybe you are both setting the value manually, and you have a customize block with a different setting in it?
05:45 <       cYmen_ > All I did was add an :env {...} map to both the dev and production profiles of a default compojure-app project
05:46 <       cYmen_ > and they both contain the same keys
05:46 < justin_smith > ah, I was thinking emacs sorry
05:46 <       cYmen_ > ah, sorry
05:46 <       cYmen_ > emacs has profiles? :)
05:47 < justin_smith > sometimes I've seen a settings file called a profile
05:47 <      llasram > DomKM: There's also bbloom's tranduce libray, which lets you trivially implement `partition` (but still not `partition-all`): https://github.com/brandonbloom/transduce
05:48 <      llasram > ,tranduce,transduce,
05:48 <   clojurebot > #<CompilerException java.lang.RuntimeException: Unable to resolve symbol: tranduce in this context, compiling:(NO_SOURCE_PATH:0:0)>
05:48 <      llasram > haha
05:50 <       bbloom > llasram: why would partition-all be any harder to implement than partition?
05:51 <      llasram > bbloom: Because you need to do something different at the end of the reduction
05:51 <      llasram > Emit something from the partially-accumulated state
05:52 <      llasram > bbloom: Here's what I did to get something approximating (and generalizing) a reducers `partition-by`: https://github.com/damballa/parkour/blob/master/src/clojure/parkour/reducers.clj#L28
05:52 <       bbloom > llasram: that shouldn't be a problem if you just emit the states and then do a pass over that
05:53 <      llasram > bbloom: I'm not seeing it, because you still need to know to know somehow that you've reached the end of the succession of states, then do something different
05:54 <       cYmen_ > ah crap
05:54 <       cYmen_ > lein clean solved everything
05:54 < justin_smith > my favorite voodoo fix-anything-weird option
05:55 <          cbp > when everything else fails..
05:55 <      llasram > bbloom: I believe this is essentially the issue cgrand raised on the dev ML a while ago wrt reducers and transients
05:55 < justin_smith > cbp: well it's easy enough to do you may as well try it first!
05:55 <      amalloy > i mean, if you don't have AOT, it's pretty hard to get into a state where lein clean does any good
05:56 <  technomancy > every time lein clean solves a problem, an angel loses its wings
05:56 <    Anderkent > amalloy: is it? protocols / records still generate class files when loaded, don't they?
05:56 <      amalloy > no
05:56 <    Anderkent > huh. I had that thought cached for some reason
05:57 <      amalloy > only if you have aot are classfiles ever generated, i'm fairly sure
05:57 <      amalloy > that's basically what aot means: compile classfiles ahead of time :P
05:58 <       bbloom > llasram: just (concat input [::done])
05:58 <       bbloom > llasram: store each item in the state, emit it on the next go
06:00 <      llasram > bbloom: Except that `concat` doesn't compose with reducers which aren't also lazy sequences :-)
06:01 <      amalloy > llasram: it's easy to model concat as a reducer. in fact there's a concat reducer
06:01 <      llasram > amalloy: Hmm, fair point.  The provided `cat` requires its inputs to be `Counted`, but it would be relatively simple to create an implementation which does not
06:02 <       bbloom > llasram: if your inputs are uncounted, then you have a seq probably, so regular concat works :-P
06:02 <      llasram > bbloom: My inputs are the (potentially) unbounded collection of input records to a MapReduce task :-p
06:02 <       bbloom > llasram: i'm not saying that it's ideal, but mapcat-state can serve as a fully general yield construct
06:03 <      amalloy > llasram: sounds like a lazy seq to me?
06:04 <      amalloy > like, don't you get an Iterable<T> inputs, such that you can just call (iterator-seq inputs) and use lazy seqs?
06:04 <       bbloom > llasram: also, you can just use mapcat identity w/ uncounted values
06:04 <       bbloom > (require 'clojure.core.reducers)
06:04 <       bbloom > ,(require 'clojure.core.reducers)
06:04 <   clojurebot > #<FileNotFoundException java.io.FileNotFoundException: Could not locate clojure/core/reducers__init.class or clojure/core/reducers.clj on classpath: >
06:04 <       bbloom > boo
06:05 <      llasram > amalloy: I support working with it as both, but handling via reducers works better -- better performance, more consistent memory usage, and easier to reason about interaction with mutable I/O & serialization interfaces
06:06 <      amalloy > that's weird, bbloom. i know clojurebot runs a version that has reducers
06:07 <      llasram > bbloom: I'm sold.  I just really hadn't considered concatenating a terminator.  Cool -- this will really simplify some code
06:07 <       bbloom > llasram: clearly not enough C programming :-P
06:08 <     ztellman > amalloy: are there whitelists for namespaces in clojurebot?
06:09 <      llasram > bbloom: Haha.  Decade-ago me would be scandalized!
06:09 <      amalloy > i don't think so
06:10 <      llasram > amalloy: Oh, right -- to further clarify (because it took me a second to remember the details), Hadoop task input is generally via mutable serialization wrappers which are modified for each incoming value
06:15 <     hiredman > clojurebot's sandbox can be finicky about loading stuff
06:16 <       rhg135 > finally got it, https://www.refheap.com/67630
06:16 <       rhg135 > now i need a parser to populate the data types
06:17 <      amalloy > rhg135: whoa. that debug is super worrying - if you ever take out the debug form, you'll be calling (build) on tasks whose prerequisites aren't done building
06:18 <      amalloy > that is, the (debug "Results:" ...) line is all that's making you wait for the futures to finish
06:18 <       rhg135 > amalloy, it's laziness on my part
06:18 <       rhg135 > eventually i'll get timbre
06:19 <       bbloom > rhg135: and that laziness will cause other laziness to burn you :-)
06:19 <      amalloy > i think you misunderstood what i'm saying, rhg135. timbre is not a solution: the solution is to not do critical "business logic" inside of a debug statement
06:19 <       rhg135 > i am?
06:19 <       rhg135 > hmm
06:20 <      amalloy > because any maintainer, including future-rhg, will think it's safe to take out a debug print if they no longer need to debug it
06:20 <      amalloy > and that will break everything about your dependency model
06:20 <       rhg135 > oh amalloy invoke-all returns a Collection of *realized* futures
06:22 <      amalloy > huh, apparently it does. that's pretty weird, but okay
06:22 <       rhg135 > yup
06:32 <       rhg135 > i see one huge problem, what if something is depended on by multiple targets?
06:33 <      amalloy > rhg135: you can't just build a thing's dependencies in order to build it. you have to create the lattice representing the dependency graph, and then walk down from (all of) the top-level requested target to find all things that will need to be built
06:34 <      amalloy > then you build them all, in dependency order
06:35 <       rhg135 > amalloy, i tried that i hit a dead-end
06:35 <       rhg135 > couldnt build a graph
06:37 <    bontucode > is it possible to simply assoc a global map? or do we have to alter it under dosync ?
06:37 < justin_smith > bontucode: do you want the global map to change?
06:38 <    bontucode > justin_smith: yes
06:38 < justin_smith > then yeah, it should be a ref or atom
06:39 <    bontucode > justin_smith: thanks, also if in the same dosync, the same map needs to be looked up, we have to use the (:key @global-map) construct right?
06:40 <       rhg135 > could i get some advice on how i could get this graph?
06:40 <      amalloy > rhg135: look up the algorithm that make, ant, maven, and so on use
06:41 <      amalloy > it's not a novel problem, so someone else should have a solution you can use
06:41 <       rhg135 > thanks, amalloy
06:41 <       rhg135 > yeah...
06:41 < justin_smith > bontucode: you probably mean (key @global-map), and that depends on how you are updating it, most likely you will want to use alter or swap!
06:43 < justin_smith > (let [r (ref {:a 0})] (dosync (alter r update-in [:a] inc)) @r)
06:43 < justin_smith > ,(let [r (ref {:a 0})] (dosync (alter r update-in [:a] inc)) @r)
06:43 <   clojurebot > {:a 1}
06:46 <       rhg135 > ant is HUGE
06:47 <      amalloy > i advise you to shield your eyes before you look at maven, then
06:47 <    bontucode > justin_smith: I want to do, (let [r (ref {:1 1 })] (dosync (alter r assoc :2 (inc (:1 @r)))) @r)
06:47 <       rhg135 > amalloy, i expected as such since maven does way more lol
06:48 <     jlpeters > what's the syntax for using a variable within an enlive selector in a function?  a fair bit of googling doesn't yield much.  In summary, I'd like to set an 'active' class on a selector but be able to define that selector by passing a variable to the class-setting function, i.e., [#picture-id-<<picture number>>] (enlive/add-class "active") where <<picture
06:48 <     jlpeters > number>> is passed into the function.  I smell a macro here but my skills, while growing daily, remain lacking to create it
06:50 <       rhg135 > i can't even find this in there?
06:50 <          cbp > time to update lein new to put 1.6.0 in dependencies? :-D
06:50 <       rhg135 > now i wonder how it even works?
06:51 <          cbp > rhg135: soldier on good soul
06:52 <       rhg135 > i am, it just hurts D:
06:53 <  technomancy > cbp: already there
06:53 <          cbp > technomancy: oh. Do I have to upgrade lein then?
06:54 <  technomancy > cpb: need to run master or wait for a release
06:54 <          cbp > ah
06:55 <       rhg135 > the scary part is this isn't uncommon
07:33 <         kras > Hi, I am looking for a simple graph library similar to networkx in python, any suggestions?
07:34 <        chare > whats the difference between -> and ->>
07:34 <       rootex > >
07:34 <     hiredman > kras: loom might be a good place to start
07:35 <   Frozenlock > chare (-> "x" (str "a")) will give you (str "x" "a")
07:35 <   Frozenlock > while (->> "x" (str "a")) will give you (str "a" "x")
07:37 <  gfredericks > ,(-> 'x (str 'a))
07:37 <   clojurebot > "xa"
07:37 <  gfredericks > ,(-> 'x (str 'a 'b 'c 'd))
07:37 <   clojurebot > "xabcd"
07:37 <  gfredericks > ,(->> 'x (str 'a 'b 'c 'd))
07:37 <   clojurebot > "abcdx"
07:38 <         kras > hiredman: thank you, will give it a try
07:38 <         kras > gfredericks: wow, I didn't know about clojurebot
07:39 <  gfredericks > clojurebot: clojurebot?
07:39 <   clojurebot > clojurebot is broken
07:39 <  gfredericks > clojurebot: clojurebot?
07:39 <   clojurebot > clojurebot is a multimap
07:39 <  gfredericks > clojurebot: clojurebot?
07:39 <    bitemyapp > Raynes: pick up the pieces.
07:39 <   clojurebot > clojurebot is broken
07:39 <       Bronsa > so, I just compiled clojure.core with tools.emitter.jvm.
07:40 <  gfredericks > Bronsa: okay so we'll all switch now?
07:42 <  gfredericks > Bronsa: do you have some sort of measurement of how close it is to the existing compilation?
07:42 <       Bronsa > gfredericks: I still have to make sure that everything works without errors after being recompiled though
07:42 <       Bronsa > there are probably going to be some issues but the fact that it is able to compile it is still pretty cool, it's getting real close to being stable
07:43 <       Bronsa > gfredericks: compilation time or bytecode?
07:43 <  gfredericks > Bronsa: bytecode
07:45 <       Bronsa > nom but it should be pretty similar overall, I haven't made many changes
07:45 <       Bronsa > no*
07:46 <       Bronsa > the biggest change is that t.e.j emits typed bytecode while Compiler.java tags every object as Object and check-casts when needed
07:47 <  gfredericks > oh wow
07:47 <      amalloy > !!
07:47 <  gfredericks > is that significant for runtime perf?
07:47 <      llasram > (inc Bronsa)
07:47 <      lazybot > ⇒ 19
07:47 <      llasram > This is totally awesome
07:47 <      amalloy > i wasn't even watching this conversation but my IRC client suddenly set off alarm bells all throughout the building when i heard about the typed bytecode
07:48 <       Bronsa > gfredericks: I havn't done any perf test yet, will do them once I get everything to work :P
07:49 <  gfredericks > git commit -m "got the last thing to work"
07:50 <  gfredericks > Bronsa: I enjoyed your proxy talk at clojurewest
07:50 <       Bronsa > gfredericks: the only downside (that I actually think is an enhancement) is that some functions will throw at runtime
07:50 <       Bronsa > e.g. ns-interns
07:50 <     hyPiRion > I really like commits where the message is like "fixed a bug"
07:50 <  gfredericks > "boog stompin"
07:50 <       Bronsa > because (fn [^Y x] ..) when compiled with t.e.j will throw when x is not a Y
07:50 <       Raynes > bitemyapp: ?
07:51 <    bitemyapp > Raynes: pick up the BRRAAIIIIINNZZZZ
07:51 <  gfredericks > Bronsa: oh right. that's interesting
07:51 <       Bronsa > gfredericks: yeah, tbaldridge did an awesome talk
07:51 <       Raynes > bitemyapp: I have no idea what you're talking about.
07:51 <    bitemyapp > Raynes: it's okay.
07:52 <       Raynes > >_>
07:52  *      Raynes wobbles off
07:53 <         kras > Looking at the loom library where it says "The namespace loom.graph must be AOT compiled. You can include :aot [loom.graph] in your project.clj to do this". Can anyone throw some light on why this is required?
07:54 <         kras > Tried to follow a conversation on clojure group but cudn't understand anything :-(
07:54 <    bitemyapp > Raynes: <3
07:54 <     hiredman > kras: I have not found that to be the case
07:54 <     hiredman > no idea why they say that
07:54 <         kras > https://github.com/aysylu/loom#usage
07:55 <     hiredman > kras: I was just using it earlier today without any aot compilation
07:56 <     hyPiRion > kras: I guess it has some protocols which may be needed in some functions
07:56 <     hyPiRion > not sure if AOT is strictly required, though
07:56 <         kras > hiredman: does it have to do with the clojure version? I am using 1.5.1
07:56 <     hiredman > kras: me too
07:56 <     hiredman > kras: I actually chimed in on that mailing list thread
08:01 <     hiredman > kras: they aren't using protocols/records correctly, and they thrashed around and ended up discovering aot solved it without understanding the problem
08:01 <     hiredman > kras: is you always load loom.graph before loading loom.attr you should be fine
08:02 <     hiredman > before loom.label too
08:03 <     hiredman > and :use everywhere :/
08:11 <         kras > hiredman: thanks for the advice, will try
08:16 <       rhg135 > here's my probably horribly-inefficient dep graph generator, https://www.refheap.com/67725
08:19 <      amalloy > rhg135: transients aren't pointers - you can't just bash on them in place
08:20 <      amalloy > you have to use the return value from conj!
08:20 <       rhg135 > amalloy, strange how it works then ;)
08:21 <      amalloy > it's not guaranteed to work, anyway. for sets, in the current version of clojure, maybe it does. for maps, it works up to a size of like 8 or 10, and then stops working
08:22 <      amalloy > but there's no excuse for depending on it. you can easily use an atom, if mutability is what you're after, or reduce over a transient, if performance is what you want
08:22 <       rhg135 > hmm
08:22 <       rhg135 > i'll rewrite it
08:22 <    Anderkent > or use a volatile-mutable if you need both
08:22 <      amalloy > you can even use an atom around a transient, if you wan
08:22 <      amalloy > t
08:22 <       rhg135 > before release too
08:22 <      amalloy > (swap! a conj! whatever)
08:23 <    Anderkent > amalloy: eh, function given to swap has to be side-effect free
08:24 <      amalloy > Anderkent: well, yes and no. this atom is local, so he knows nobody else will ever touch it
08:24 <      amalloy > so nothing will retry, etc etc
08:24 <      amalloy > but yes, it's not a great practice
08:24 <      amalloy > which is why i'd just use reduce - this isn't a complicated computation that needs mutability
08:25 <    Anderkent > sure, I didnt look at the code
08:26 <  michaniskin > https://github.com/tailrecursion/boot.core/blob/master/src/tailrecursion/boot/kahnsort.clj
08:27 <      amalloy > roughly like https://www.refheap.com/9fd1a28c2f89e5ccd0647a255
08:27 <       rhg135 > i don't think walking through a sequence twice is good either
08:28 <      amalloy > what does that have to do with anything?
08:29 <       rhg135 > in the first function there
08:29 <       rhg135 > bbiab
08:41 <     hiredman > kras: further digging in to loom, it looks like the aot problem only happens in their tests because they force the reloading of some namespaces in their tests
08:43 <     hiredman > technomancy: please kickban __VenTys__; it seems to be some kind of bot, keeps privmsging me links
08:45 <     hiredman > possibly triggered by saying "loom"
08:48 <     hyPiRion > hrm, by saying loom you say?
08:49 <     hyPiRion > yup.
08:49 <     hiredman > weird
08:51 <  gfredericks > I've gotten two PMs in the last couple hours and have never said that word
08:52 <     hiredman > multiple triggers?
08:52 <     hiredman > the only thing to do is get a dictionary and start throwing out words
08:52 <  gfredericks > oh there's a third
08:53 <     hyPiRion > Oh, I'll start
08:53 <     hyPiRion > aardvark
08:54 <     hyPiRion > what, that bot actually replied to me when I said that.
08:54 <  gfredericks > abaci
08:54 <  gfredericks > aback
08:55 <  gfredericks > hiredman makes up the FUNNEST games
08:55 <  michaniskin > i wish to say loom, too
08:56 <  michaniskin > bam
08:56 <  gfredericks > my best theory is that it's as soon as you start talking after a bit of silence
08:56 <      llasram > I'll just go with aardvark
08:56 <  gfredericks > somebody else pipe up
08:57 <  gfredericks > oh no it got him
08:57 <      llasram > Hmm, no new messages, but apparently messaged me hours ago and I didn't notice
08:57 <  gfredericks > llasram: thank goodness you're safe
08:58 <      llasram > :-)
09:00 <  gfredericks > show gratis (solo hooy) ;; is hooy a typo for hoy?
09:00 <  gfredericks > is this not spanish?
09:00 <  michaniskin > it's a celebratory hoy
09:02 <  gfredericks > what does "show" mean?
09:02 -!- mode/#clojure [+o technomancy] by ChanServ
09:03 -!- __VenTys__ was kicked from #clojure by technomancy [Kicked by technomancy]
09:04 -!- mode/#clojure [+q __VenTys__*!*@*/*] by technomancy
09:04 -!- __VenTys__ was kicked from #clojure by technomancy [Kicked by technomancy]
09:05 -!- mode/#clojure [-o technomancy] by ChanServ
09:05 <  technomancy > ah actually quiet is probably not enough for a bot gone awry
09:05 -!- mode/#clojure [+o technomancy] by ChanServ
09:05 -!- mode/#clojure [+b __VenTys__*!*@*/*] by technomancy
09:05 -!- __VenTys__ was kicked from #clojure by technomancy [Kicked by technomancy]
09:06 <     hiredman > clojurebot: thank technomancy
09:06 <   clojurebot > Huh?
09:06 <      bjeanes > hello everybody
09:08 -!- mode/#clojure [-o technomancy] by ChanServ
09:08 <  technomancy > not sure that actually worked, hostmasks are weird
09:08 <       Bronsa > technomancy: he's back in
09:09 <     hyPiRion > clojurebot: thank technomancy |is| Thank you technomancy!
09:09 <   clojurebot > c'est bon!
09:09 <     hyPiRion > clojurebot: thank technomancy
09:09 <   clojurebot > thank technomancy is Thank you technomancy!
09:09 <     hyPiRion > whoops.
09:13 <  gfredericks > clojurebot: thank technomancy is thank technomancy is <reply> is Thank you technomancy! is
09:13 <   clojurebot > Roger.
09:15 <     hyPiRion > gfredericks: wat
09:15 <  michaniskin > technomancy: does leiningen do anything special with respect to data_readers.clj when installing dependencies?
09:15 <     hyPiRion > and this dude keeps spamming me
09:17 <  gfredericks > hyPiRion: you teach the bot something weird, I teach him something weirder
09:17 <      llasram > michaniskin: Since 2.3.4 (IIRC) it does something special when uberjaring, if that's what you mean?
09:17 <     hyPiRion > clojurebot: thank technomancy
09:17 <   clojurebot > thank technomancy is thank technomancy is <reply> is Thank you technomancy! is
09:17 <       Bronsa > lol
09:17 <      llasram > michaniskin: Otherwise it's all just class path entries, which the code in Clojure handles merging multiple instances of
09:17 <       Bronsa > (inc gfredericks)
09:17 <      lazybot > ⇒ 47
09:17 <     hyPiRion > gfredericks: it did exactly what I expected it to do. Which was a bit unexpected, if that even makes sense
09:18 <  michaniskin > llasram: for some reason when i use a URLClassloader to load clojure jars into my project the data_readers.clj doesn't seem to be installed (datomic specifically)
09:19 <  michaniskin > i'm not using leiningen, which is why i was thinking that lein was doing something special
09:20 <      llasram > michaniskin: Are you pulling in new JARs via classloader fun after Clojure itself is loaded?
09:20 <  michaniskin > llasram: yup
09:20 <      llasram > Ok.  clojure.core loads all the `data_readers.clj` it can find when it itself is first loaded
09:20 <      llasram > And that's it
09:21 <      llasram > If you want to load things after-the-fact, you'll need to do something yourself
09:21 <  michaniskin > i suppose it's ok to find them in the jars and merge them in myself, right?
09:21 <     hiredman > it is amazing the bugs you'll find using eastman
09:21 <     hiredman > loom's tests have a bunch of (is (= foo) bar)
09:22 <     hiredman > clearly meaning to be (is (= foo bar))
09:22 <      llasram > michaniskin: Or even just ##(#'clojure.core/load-data-readers)
09:22 <      lazybot > ⇒ {}
09:22 <      llasram > Haha, not quite what I expected to happen
09:22 <      llasram > ,(#'clojure.core/load-data-readers)
09:22 <   clojurebot > {}
09:22 <  michaniskin > llasram: awesome, that saves me some time!
09:24 <  gfredericks > $google github eastman clojure fingerhut
09:24 <      llasram > michaniskin: Be aware that that (private) function only sets the root value of *data-readers*.  I haven't tried to track down who started when what, but at least in my REPL it has a threat-local value too
09:25 <      llasram > Is eastman a fork of eastwood or something?
09:25 <     hiredman > oh, I meant eastwood
09:25 <      llasram > Oh, hah
09:25 <  michaniskin > llasram: that seems reasonable and what you'd expect if it were done automatically
09:26 <  gfredericks > no wonder google was so bad at that
09:26 <  michaniskin > thanks llasram
09:27 <     hiredman > https://github.com/aysylu/loom/pull/16
09:29  * gfredericks runs eastwood for the first time
09:31 <  gfredericks > it couldn't resolve a buncha muh vars o_O
09:31 <      amalloy > hiredman: usually i write: (is = foo bar)
09:32 <     hiredman > are you putting defs inside defns again?
09:32 <       Bronsa > gfredericks: :( what's going wrong?
09:33 <  gfredericks > Bronsa: heckifiknow
09:33 <       Bronsa > are you running it on a public project?
09:33 <  gfredericks > no
09:33 <  gfredericks > sorry, too tired to dig into it right now
09:35 <       Bronsa > no worries, open a ticket with the error message when you have some time and I'll try to understand
09:35 <       Bronsa > and now __VenTys__ started spamming me too. thank god for /ignore
09:38 <      amalloy > i mentioned it in #freenode a couple hours ago, Bronsa; dunno if that was the right place to report spam, but nobody seemed to care
09:47 <         ivan > that is more of a channel op thing for chouser or technomancy
09:47 <         ivan > yay, now I got it too
09:49 -!- mode/#clojure [+o technomancy] by ChanServ
09:50 -!- mode/#clojure [+b *!~ircap@90.174.0.195] by technomancy
09:50 -!- __VenTys__ was kicked from #clojure by technomancy [Kicked by technomancy]
09:52 -!- mode/#clojure [-q __VenTys__*!*@*/*] by technomancy
09:52 -!- mode/#clojure [-b __VenTys__*!*@*/*] by technomancy
09:53 -!- mode/#clojure [-o technomancy] by ChanServ
09:55 <         ivan > is there an nREPL middleware that prevents code execution until a secret cookie is presented?
09:59 <         bob2 > niche
09:59 <         ivan > it seems at least a little wrong to execute code that other users send you
10:12 <       rhg135 > vast imporvement imho https://www.refheap.com/67949
10:16 <      amalloy > wait, why isn't dedupe just clojure.core/distinct, rhg135?
10:17 <      amalloy > right, nm, it's distinct-by, which doesn't really exist
10:18 <       rhg135 > amalloy, oh i didn't know but yeah...
11:30 <        chare > how do we make lein new use clojure 1.6 in the generation
11:49 <  technomancy > chare: use lein 2.4.0
11:50 <  technomancy > (which hasn't been released yet)
11:50 <        chare > so its buggy?
11:51 <  technomancy > no, just needs a few more changes https://github.com/technomancy/leiningen/issues?milestone=15&state=open
--- Log closed Sat Mar 29 12:02:06 2014
--- Log opened Sat Mar 29 12:02:30 2014
12:02 -!- Irssi: #clojure: Total of 672 nicks [1 ops, 0 halfops, 0 voices, 671 normal]
12:02 -!- Irssi: Join to #clojure was synced in 26 secs
12:20 <      amalloy > technomancy: it was a trick question: all software is buggy
12:20 <  technomancy > oh nap
12:20 <  technomancy > snap
12:24 <        chare > what should I use for editor for clojure, whats the difference between sublime text, light table, etc...
12:27 <       rootex > chare: haven't tried it but lighttable looks more beginner friendly
12:38 <         ned- > chare: emacs or LT
12:45 <       Raynes > amalloy: Unless written in Haskell and confirmed to compile.
12:45 <       Raynes > ;)
12:46 <      amalloy > $heval head []
12:46 <      lazybot > ⇒ *Exception: Prelude.head: empty list
12:46 <      amalloy > BLAM
12:55 <      amalloy > probably better as: head brokenHaskellPrograms where brokenHaskellPrograms = []
